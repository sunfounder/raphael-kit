.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y Compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y vistas previas.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _1.3.3_py:

1.3.3 Rel√©
===========

Introducci√≥n
------------

En este proyecto, aprenderemos a usar un rel√©. Es uno de los componentes m√°s 
com√∫nmente utilizados en los sistemas de control autom√°tico. Cuando el voltaje, 
corriente, temperatura, presi√≥n, etc., alcanza, excede o est√° por debajo del 
valor predeterminado, el rel√© conectar√° o interrumpir√° el circuito, para controlar 
y proteger el equipo.

Componentes Requeridos
----------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/list_1.3.4.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_relay`
        - |link_relay_buy|
    *   - :ref:`cpn_diode`
        - |link_diode_buy|

Diagrama Esquem√°tico
---------------------------

.. image:: ../img/image345.png


Procedimientos Experimentales
------------------------------------

**Paso 1:** Monta el circuito.

.. image:: ../img/image144.png

**Paso 2:** Abre el archivo de c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python

**Paso 3:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.3_Relay.py

Mientras el c√≥digo se est√° ejecutando, el LED se enciende. Adem√°s, puedes 
escuchar un tic-tac causado por la ruptura del contacto normalmente cerrado 
y el cierre del contacto normalmente abierto.

**C√≥digo**

.. note::

    Puedes **Modificar/Resetear/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3

    import RPi.GPIO as GPIO
    import time

    # Configurar GPIO17 como pin de control
    relayPin = 17

    # Definir una funci√≥n de configuraci√≥n para algunas configuraciones
    def setup():
        # Configurar los modos GPIO a numeraci√≥n BCM
        GPIO.setmode(GPIO.BCM)
        # Configurar el modo de relayPin como salida,
        # y nivel inicial a Alto (3.3v)
        GPIO.setup(relayPin, GPIO.OUT, initial=GPIO.HIGH)

    # Definir una funci√≥n principal para el proceso principal
    def main():
        while True:
            print ('Relay open...')
            # Tick
            GPIO.output(relayPin, GPIO.LOW)
            time.sleep(1)
            print ('...Relay close')
            # Tock
            GPIO.output(relayPin, GPIO.HIGH)
            time.sleep(1)

    # Definir una funci√≥n destroy para limpiar todo despu√©s de
    # que el script haya terminado
    def destroy():
        # Apagar LED
        GPIO.output(relayPin, GPIO.HIGH)
        # Liberar recursos
        GPIO.cleanup()                    

    # Si ejecutas este script directamente, haz:
    if __name__ == '__main__':
        setup()
        try:
            main()
        # Cuando se presiona 'Ctrl+C', el programa hijo
        # destroy() ser√° ejecutado.
        except KeyboardInterrupt:
            destroy()

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    GPIO.output(relayPin, GPIO.LOW)

Configura los pines del transistor a nivel bajo para abrir el rel√©, el LED no se enciende.

.. code-block:: python

    time.sleep(1)

Espera 1 segundo. 

.. code-block:: python

    GPIO.output(relayPin, GPIO.HIGH)

Configura los pines del transistor a nivel alto para activar el rel√©, el LED se enciende.

Imagen del Fen√≥meno
-------------------------

.. image:: ../img/image145.jpeg