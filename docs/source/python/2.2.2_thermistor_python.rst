.. note::

    ¬°Hola, bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y Compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones navide√±as.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _2.2.2_py:

2.2.2 Termistor
================

Introducci√≥n
------------

Al igual que la fotorresistencia puede detectar la luz, el termistor es 
un dispositivo electr√≥nico sensible a la temperatura que se puede utilizar 
para realizar funciones de control de temperatura, como hacer una alarma de calor.

Componentes Necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/list_2.2.2_thermistor.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Diagrama Esquem√°tico
-------------------------

.. image:: ../img/image323.png


.. image:: ../img/image324.png


Procedimientos Experimentales
-----------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/image202.png

**Paso 2:** Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python/

**Paso 3:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.2_Thermistor.py

Cuando el c√≥digo se ejecuta, el termistor detecta la temperatura ambiente, 
que se imprimir√° en la pantalla una vez que termine el c√°lculo del programa.

**C√≥digo**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    import RPi.GPIO as GPIO
    import ADC0834
    import time
    import math

    def init():
        ADC0834.setup()

    def loop():
        while True:
            analogVal = ADC0834.getResult()
            Vr = 5 * float(analogVal) / 255
            Rt = 10000 * Vr / (5 - Vr)
            temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
            Cel = temp - 273.15
            Fah = Cel * 1.8 + 32
            print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))
            time.sleep(0.2)

    if __name__ == '__main__':
        init()
        try:
            loop()
        except KeyboardInterrupt:
            ADC0834.destroy()

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    import math

Esta es una biblioteca num√©rica que declara un conjunto de funciones para calcular 
operaciones matem√°ticas comunes y transformaciones.

.. code-block:: python

    analogVal = ADC0834.getResult()

Esta funci√≥n se usa para leer el valor del termistor.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)
    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))
    Cel = temp - 273.15
    Fah = Cel * 1.8 + 32
    print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))

Estos c√°lculos convierten los valores del termistor en grados cent√≠grados y grados Fahrenheit.

.. code-block:: python

    Vr = 5 * float(analogVal) / 255
    Rt = 10000 * Vr / (5 - Vr)

Estas dos l√≠neas de c√≥digo calculan la distribuci√≥n de voltaje 
con el valor le√≠do anal√≥gico para obtener Rt (resistencia del termistor).

.. code-block:: python

    temp = 1/(((math.log(Rt / 10000)) / 3950) + (1 / (273.15+25)))

Este c√≥digo se refiere a enchufar Rt en la f√≥rmula
**T\ K\ =1/(ln(R\ T/R\ N)/B+1/T\ N)** para obtener la temperatura en Kelvin.

.. code-block:: python

    temp = temp - 273.15

Convierte la temperatura en Kelvin a grados cent√≠grados.

.. code-block:: python

    Fah = Cel * 1.8 + 32

Convierte los grados cent√≠grados a grados Fahrenheit.

.. code-block:: python

    print ('Celsius: %.2f ¬∞C  Fahrenheit: %.2f ‚Ñâ' % (Cel, Fah))

Imprime los grados cent√≠grados, los grados Fahrenheit y sus unidades en la pantalla.

Foto del Fen√≥meno
----------------------

.. image:: ../img/image203.jpeg