 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.5_py:

4.1.5 Sonnette Visuelle Intelligente
==========================================

Introduction
-----------------

Dans ce projet, nous allons fabriquer une sonnette visuelle intelligente DIY.

Composants N√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../img/3.1.19components.png
  :width: 800
  :align: center

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|


Sch√©ma de Connexion
-----------------------

============ ======== ========= ========
Nom T-Board  physique  wiringPi BCM
GPIO27       Pin 13    2        27
============ ======== ========= ========

.. image:: ../img/3.1.19_schematic.png
   :width: 500
   :align: center


Proc√©dures Exp√©rimentales
------------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../img/3.1.19fritzing.png
  :width: 800
  :align: center

Avant ce projet, vous devez vous assurer d'avoir termin√© :ref:`3.1.3_py` et :ref:`3.1.2_py`.

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**√âtape 3 :** Ex√©cutez.

.. raw:: html

    <run></run>

.. code-block::

    python3 4.1.5_DoorBell.py

Apr√®s avoir ex√©cut√© le code, lorsque le bouton est press√©, une sonnette retentira et la cam√©ra enregistrera une vid√©o de 5 secondes, qui sera stock√©e sous le nom de fichier ``visitor.h264`` dans le r√©pertoire ``~``. Si vous avez un √©cran, vous pouvez √©galement voir les visiteurs en pr√©visualisant la vid√©o en temps r√©el.
**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller dans le chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    from picamera import PiCamera
    from pygame import mixer
    import RPi.GPIO as GPIO
    import time
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')


    camera = PiCamera()

    BtnPin = 18
    status = False

    def setup():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(BtnPin, GPIO.IN, GPIO.PUD_UP)
        mixer.init()

    def takePhotos(pin):
        global status
        status = True

    def main():
        global status
        GPIO.add_event_detect(BtnPin, GPIO.FALLING, callback=takePhotos)
        while True:
            if status:
                mixer.music.load(f'{user_home}/raphael-kit/music/doorbell.wav')
                mixer.music.set_volume(0.7)
                mixer.music.play()
                camera.start_preview(alpha=200)
                camera.start_recording(f'{user_home}/visitor.h264')
                print ('Have a visitor')
                time.sleep(5)
                mixer.music.stop()
                camera.stop_preview()
                camera.stop_recording()
                status = False 

    def destroy():
        GPIO.cleanup()
        mixer.music.stop()
        camera.stop_preview()
        camera.stop_recording()

    if __name__ == '__main__':
        setup()
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    status = False

Ceci est un indicateur utilis√© pour enregistrer si la sonnette est utilis√©e.

.. code-block:: python

    GPIO.add_event_detect(BtnPin, GPIO.FALLING, callback=takePhotos)

Configurer l'√©v√©nement de ``BtnPin``, lorsque le bouton est press√© (le signal de niveau passe de haut √† bas), appeler la fonction ``takePhotos()``.

.. code-block:: python

    if status:
        mixer.music.load(f'{user_home}/raphael-kit/music/doorbell.wav')
        mixer.music.set_volume(0.7)
        mixer.music.play()
        camera.start_preview(alpha=200)
        camera.start_recording(f'{user_home}/visitor.h264')
        print ('Have a visitor')
        time.sleep(5)
        mixer.music.stop()
        camera.stop_preview()
        camera.stop_recording()
        status = False 

Cinq secondes sont utilis√©es ici pour jouer de la musique et enregistrer des vid√©os, fonctionnant ainsi comme une sonnette.

Photo du Ph√©nom√®ne
------------------------

.. image:: ../img/4.1.5door_bell.JPG
   :align: center


