.. note::

    Hola, ¡bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte de Expertos**: Resuelve problemas postventa y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsiones Exclusivas**: Accede anticipadamente a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones festivas.

    👉 ¿Listo para explorar y crear con nosotros? ¡Haz clic en [|link_sf_facebook|] y únete hoy!

.. _1.1.6_py:

1.1.6 Matriz de LEDs
========================

Introducción
-----------------------

Como su nombre lo indica, una matriz de LEDs es una matriz compuesta por LEDs. 
La iluminación y el oscurecimiento de los LEDs forman diferentes caracteres y patrones.

Componentes Necesarios
----------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/list_dot.png

Es definitivamente conveniente comprar un kit completo, aquí está el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ARTÍCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

También puedes comprarlos por separado en los enlaces a continuación.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCIÓN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|

Diagrama Esquemático
-----------------------

============== ======== ======== ====
Nombre T-Board Physical wiringPi BCM
SPIMOSI        Pin 19   12       MOSI
SPICE0         Pin 24   10       CE0
SPISCLK        Pin 23   14       SCLK
============== ======== ======== ====

.. image:: ../img/schematic_dot.png
Procedimientos Experimentales
----------------------------

**Paso 1:** Monta el circuito.

.. image:: ../img/1.1.6fritzing.png

.. note::

    Enciende el SPI antes de comenzar el experimento, consulta :ref:`spi_configuration` para más detalles. También se necesita el módulo :ref:`Luma.LED_Matrix`.


**Paso 2:** Cambia de directorio.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**Paso 3:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.6_LedMatrix.py

Después de ejecutar el código, la Matriz de LEDs mostrará un rectángulo durante dos segundos, luego la letra 'A' durante dos segundos, y finalmente desplazará el texto "Hello, Nice to meet you!

**Código**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el código a continuación. Pero antes de eso, necesitas ir a la ruta del código fuente como ``raphael-kit/python``. Después de modificar el código, puedes ejecutarlo directamente para ver el efecto.


.. raw:: html

    <run></run>

.. code-block:: python

   from luma.core.interface.serial import spi, noop
   from luma.core.render import canvas
   from luma.core.virtual import viewport
   from luma.led_matrix.device import max7219
   from luma.core.legacy import text
   from luma.core.legacy.font import proportional, CP437_FONT, LCD_FONT
   import time

   serial = spi(port=0, device=0, gpio=noop())
   device = max7219(serial, rotate=1)
   virtual = viewport(device, width=200, height=400)

   def displayRectangle():
      with canvas(device) as draw:
         draw.rectangle(device.bounding_box, outline="white", fill="black")

   def displayLetter():
      with canvas(device) as draw:
         text(draw, (0, 0), "A", fill="white", font=proportional(CP437_FONT))

   def scrollToDisplayText():
      with canvas(virtual) as draw:
         text(draw, (0, 0), "Hello, Nice to meet you!", fill="white", font=proportional(CP437_FONT))

      for offset in range(150):
         virtual.set_position((offset,0))
         time.sleep(0.1)

   def main():
      while True:
         displayRectangle()
         time.sleep(2)
         displayLetter()
         time.sleep(2)
         scrollToDisplayText()

   def destroy():
      pass

   if __name__ == '__main__':
      try:
         main()
      except KeyboardInterrupt:
         destroy()
**Explicación del Código**

.. code-block:: python

    from luma.core.interface.serial import spi, noop
    from luma.core.render import canvas
    from luma.core.virtual import viewport
    from luma.led_matrix.device import max7219
    from luma.core.legacy import text
    from luma.core.legacy.font import proportional, CP437_FONT, LCD_FONT
    import time

Importa las bibliotecas relevantes, de las cuales ``luma.core`` es una biblioteca de componentes que proporciona un lienzo compatible con Pillow para Python 3, así como otras primitivas de dibujo y funciones de renderización de texto que admiten pantallas pequeñas en Raspberry Pi y otras computadoras de placa única.
Puedes visitar `https://luma-core.readthedocs.io/en/latest/intro.html <https://luma-core.readthedocs.io/en/latest/intro.html>`_ para obtener más información.

.. code-block:: python

    serial = spi(port=0, device=0, gpio=noop())
    device = max7219(serial, rotate=1)

Inicializa la clase ``luma.led_matrix.device.max7219``.

.. note::

    Si deseas modificar la dirección de visualización de la Matriz de LED, puedes hacerlo modificando el valor de rotate, donde 0 significa sin rotación, 1 significa rotación de 90° en el sentido horario, 2 significa rotación de 180°, y 3 significa rotación de 270° en el sentido horario.

.. code-block:: python

    def displayRectangle():
        with canvas(device) as draw:
            draw.rectangle(device.bounding_box, outline="white", fill="black")

Muestra un rectángulo hueco en el área de borde de la Matriz de LED y modifica el valor de ``fill`` a ``white`` para mostrar un rectángulo sólido.

.. code-block:: python

    def displayLetter():
        with canvas(device) as draw:
            text(draw, (0, 0), "A", fill="white", font=proportional(CP437_FONT))

Se muestra una "A" en la coordenada (0, 0) de la Matriz de LED, donde ``CP437_FONT`` es una fuente adecuada para pantallas de matriz de puntos de 8*8.

.. code-block:: python

    virtual = viewport(device, width=200, height=400)

No hay forma de mostrar una línea de texto en una sola matriz de LED de 8x8. Necesitamos usar el método ``luma.core.virtual.viewport`` para que el texto pueda desplazarse a través de la ventana virtual.

.. code-block:: python

    def scrollToDisplayText():
        with canvas(virtual) as draw:
            text(draw, (0, 0), "Hello, Nice to meet you!", fill="white", font=proportional(CP437_FONT))

        for offset in range(150):
            virtual.set_position((offset,0))
            time.sleep(0.1)

``scrollToDisplayText()`` implementa "Hello, Nice to meet you!" como un texto desplazable en la Matriz de LED.

Primero, pasamos virtual como un argumento a la función ``canvas()``, para que podamos usar la ventana virtual como la ventana de visualización actual. Luego, la función ``text()`` muestra "Hello, Nice to meet you!" en la Matriz de LED.

Usando la función de bucle for, movemos la ventana virtual en la dirección X para que podamos ver el texto "Hello, Nice to meet you!" desplazándose.

Imagen del Fenómeno
-----------------------

.. image:: ../img/1.1.6led_dot_matrix.JPG