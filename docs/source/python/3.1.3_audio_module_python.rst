 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _3.1.3_py:

3.1.3 Module Audio
========================

Introduction
-------------------

Dans ce projet, nous allons fabriquer une st√©r√©o DIY avec un module amplificateur audio, des haut-parleurs de 8 ohms/2W et un c√¢ble audio de 3,5 mm.


Composants N√©cessaires
--------------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/audio2.png
  :width: 700
  :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-

Proc√©dures Exp√©rimentales
------------------------------

**√âtape 1:** Construire le circuit.

.. image:: ../img/4.1.4fritzing.png
    :width: 800
    :align: center

Apr√®s avoir construit le circuit selon le sch√©ma ci-dessus, branchez le c√¢ble audio dans la prise audio 3,5 mm du Raspberry Pi.

.. image:: ../img/audio4.png
    :width: 400
    :align: center

**√âtape 2:** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python/

**√âtape 3:** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    python3 3.1.3_AudioModule.py

Apr√®s avoir ex√©cut√© le code, vous pouvez profiter de la musique.

.. note::

    Si votre haut-parleur ne produit aucun son, cela peut √™tre d√ª au fait que le Raspberry Pi a s√©lectionn√© une sortie audio incorrecte (par d√©faut, c'est HDMI). Vous devez :ref:`changer_sortie_audio` pour √âcouteurs.

    Si vous trouvez que le volume des haut-parleurs est trop bas, vous pouvez :ref:`Ajuster_le_volume `.

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    from pygame import mixer
    import os
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    mixer.init()
    
    def main():
        mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
        mixer.music.set_volume(0.7)
        mixer.music.play()
        while True:
            pass# Don't do anything.
    
    def destroy():
        mixer.music.stop()
    
    if __name__ == '__main__':
        try:
            main()
        except KeyboardInterrupt:
            destroy()

**Explication du Code**

.. code-block:: python

    from pygame import mixer

    mixer.init()

Importer la m√©thode ``mixer`` de la biblioth√®que ``pygame`` et initialiser la m√©thode.

.. code-block:: python

    mixer.music.load(f'{user_home}/raphael-kit/music/my_music.mp3')
    mixer.music.set_volume(0.7)
    mixer.music.play()

Ce code lit le fichier ``my_music.mp3`` dans le r√©pertoire ``~/raphael-kit/music`` et r√®gle le volume √† 0,7 (la plage est de 0 √† 1). 
Le Raspberry Pi commencera √† jouer de l'audio lorsque ``mixer.music.play()`` sera appel√©.

.. note::
    
    Vous pouvez √©galement t√©l√©charger d'autres fichiers musicaux sur votre Raspberry Pi. Pour un tutoriel d√©taill√©, veuillez vous r√©f√©rer √† :ref:`filezilla`

.. code-block:: python

    mixer.music.stop()

Appeler ``mixer.music.stop()`` arr√™tera la lecture de l'audio.
De plus, vous pouvez √©galement mettre en pause avec ``mixer.music.pause()`` et continuer avec ``mixer.music.unpause()``.

**Image du Ph√©nom√®ne**
------------------------

.. image:: ../img/3.1.3audio.JPG
   :align: center
