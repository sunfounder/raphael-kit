 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.7_py_pi5:

2.2.7 PIR
=========

Introduction
------------

Dans ce projet, nous allons fabriquer un dispositif en utilisant des capteurs 
pyroelectriques infrarouges pour le corps humain. Lorsque quelqu'un s'approche 
de la LED, celle-ci s'allume automatiquement. Sinon, la lumi√®re s'√©teint. Ce 
capteur de mouvement infrarouge est un type de capteur qui peut d√©tecter l'infrarouge 
√©mis par les humains et les animaux.

Composants n√©cessaires
----------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.2.7_pir_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|
    *   - :ref:`cpn_pir`
        - \-

Sch√©ma
---------

.. image:: ../python_pi5/img/2.2.7_pir_schematic.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.2.7_pir_circuit.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.7_PIR_zero.py

Apr√®s l'ex√©cution du code, le PIR d√©tecte les environs et fait briller la LED 
RVB en jaune s'il d√©tecte quelqu'un passant √† proximit√©.

Il y a deux potentiom√®tres sur le module PIR : l'un pour ajuster la sensibilit√© 
et l'autre pour ajuster la distance de d√©tection. Pour que le module PIR fonctionne 
mieux, vous devez les tourner tous les deux dans le sens antihoraire jusqu'√† la fin.

.. image:: ../python_pi5/img/2.2.7_PIR_TTE.png
    :width: 400
    :align: center

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import RGBLED, MotionSensor
   from time import sleep

   # Initialize RGB LED and PIR motion sensor using GPIO Zero library
   led = RGBLED(red=18, green=27, blue=22)  # RGB LED connected to GPIO pins 18 (Red), 27 (Green), 22 (Blue)
   pir = MotionSensor(17)  # PIR sensor connected to GPIO pin 17

   try:
       # Continuously monitor for motion and update LED color
       while True:
           if pir.motion_detected:  # Check for motion detected by PIR sensor
               led.color = (1, 1, 0)  # Set LED color to yellow (Red + Green)
           else:
               led.color = (0, 0, 1)  # Set LED color to blue (only Blue)
           sleep(0.1)  # Short delay to reduce CPU load

   except KeyboardInterrupt:
       # Handle KeyboardInterrupt (Ctrl+C) to exit the loop gracefully
       pass


**Explication du code**

#. Importe la classe ``RGBLED`` pour contr√¥ler une LED RVB et la classe ``MotionSensor`` pour la d√©tection de mouvement depuis la biblioth√®que GPIO Zero. Importe √©galement la fonction ``sleep`` pour cr√©er des d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import RGBLED, MotionSensor
       from time import sleep

#. Initialise une LED RVB avec les composants rouge, vert et bleu connect√©s respectivement aux broches GPIO 18, 27 et 22. Initialise √©galement un capteur PIR sur la broche GPIO 17.

   .. code-block:: python

       # Initialize RGB LED and PIR motion sensor using GPIO Zero library
       led = RGBLED(red=18, green=27, blue=22)  # RGB LED connected to GPIO pins 18 (Red), 27 (Green), 22 (Blue)
       pir = MotionSensor(17)  # PIR sensor connected to GPIO pin 17

#. Le programme entre dans une boucle infinie, v√©rifiant continuellement la pr√©sence de mouvement √† l'aide du capteur PIR. Si un mouvement est d√©tect√©, la LED devient jaune (m√©lange de rouge et vert). Si aucun mouvement n'est d√©tect√©, la LED devient bleue. Un court d√©lai de 0,1 seconde r√©duit la charge du CPU.

   .. code-block:: python

       try:
           # Continuously monitor for motion and update LED color
           while True:
               if pir.motion_detected:  # Check for motion detected by PIR sensor
                   led.color = (1, 1, 0)  # Set LED color to yellow (Red + Green)
               else:
                   led.color = (0, 0, 1)  # Set LED color to blue (only Blue)
               sleep(0.1)  # Short delay to reduce CPU load

       except KeyboardInterrupt:
           # Handle KeyboardInterrupt (Ctrl+C) to exit the loop gracefully
           pass

