 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _3.1.2_py_pi5:

3.1.2 Module Vid√©o
=====================

Introduction
---------------

En plus de prendre des photos, le module cam√©ra peut √©galement √™tre utilis√© pour enregistrer des vid√©os.

Composants n√©cessaires
--------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/3.3.2_photograph_list.png
  :width: 800

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Acc√©dez au bureau du Raspberry Pi. Vous aurez peut-√™tre besoin d'un √©cran pour une meilleure exp√©rience, r√©f√©rez-vous √† : `Connecter votre Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Ou acc√©dez au bureau du Raspberry Pi √† distance, pour un tutoriel d√©taill√© veuillez consulter :ref:`remote_desktop`.

**√âtape 2 :** Ouvrez un Terminal et acc√©dez au dossier du code.

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez.

.. code-block::

    sudo python3 3.1.2_VideoModule_zero.py

Ex√©cutez le code pour commencer l'enregistrement. Appuyez sur ``Ctrl+C`` pour terminer l'enregistrement. Nommez la vid√©o ``my_video.h264`` et enregistrez-la dans le r√©pertoire ``~``.

.. note::

    Vous pouvez √©galement ouvrir ``3.1.2_PhotographModule_zero.py`` dans le chemin ``~/raphael-kit/python-pi5`` avec un IDE Python, cliquer sur le bouton Ex√©cuter pour ex√©cuter et arr√™ter le code avec le bouton Stop.

Si vous souhaitez envoyer des photos vers votre PC, veuillez vous r√©f√©rer √† :ref:`filezilla`.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. code-block:: python

   #!/usr/bin/env python3

   import time
   from picamera2 import Picamera2, Preview
   from picamera2.encoders import H264Encoder
   from picamera2.outputs import FfmpegOutput
   import os

   # Get the current user's login name
   user = os.getlogin()
   # Get the path to the user's home directory
   user_home = os.path.expanduser(f'~{user}')

   # Create a Picamera2 instance
   camera = Picamera2()
   # Retrieve the default preview configuration
   preview_config = camera.preview_configuration

   try:
       # Configure preview size and format
       preview_config.size = (800, 600)
       preview_config.format = 'XRGB8888'
       # Start the camera preview in QTGL mode
       camera.start_preview(Preview.QTGL)

       # Define video configuration with size, frame rate, and buffer count
       conf = {'size': (800, 600)}
       controls = {'FrameRate': 40}
       config = camera.create_video_configuration(main=conf, controls=controls, buffer_count=12)
       # Create a video encoder with a specified bitrate
       encoder = H264Encoder(bitrate=10000000)
       # Define output file for the video
       output = FfmpegOutput(f'{user_home}/my_video.mp4')
       # Configure and start recording
       camera.configure(config)
       camera.start_recording(encoder, output)
       # Record for 10 seconds
       time.sleep(10)
       # Stop the recording
       camera.stop_recording()

   except KeyboardInterrupt:
       # Stop the camera preview if a KeyboardInterrupt (e.g., Ctrl+C) occurs
       camera.stop_preview()
       pass


**Explication du Code**

#. Importe les biblioth√®ques et les classes n√©cessaires. La biblioth√®que ``picamera2`` est utilis√©e pour le contr√¥le de la cam√©ra, ``H264Encoder`` pour l'encodage vid√©o, et ``FfmpegOutput`` pour d√©finir le fichier de sortie vid√©o.

   .. code-block:: python

       #!/usr/bin/env python3

       import time
       from picamera2 import Picamera2, Preview
       from picamera2.encoders import H264Encoder
       from picamera2.outputs import FfmpegOutput
       import os

#. R√©cup√®re le nom de connexion de l'utilisateur actuel et le chemin de son r√©pertoire personnel.

   .. code-block:: python

       # Get the current user's login name
       user = os.getlogin()
       # Get the path to the user's home directory
       user_home = os.path.expanduser(f'~{user}')

#. Cr√©e une instance de la classe ``Picamera2`` et r√©cup√®re la configuration de pr√©visualisation par d√©faut.

   .. code-block:: python

       # Create a Picamera2 instance
       camera = Picamera2()
       # Retrieve the default preview configuration
       preview_config = camera.preview_configuration

#. D√©finit la taille et le format de la pr√©visualisation de la cam√©ra. La taille est d√©finie √† 800x600 pixels, et le format est d√©fini √† ``XRGB8888``.

   .. code-block:: python

       try:
           # Configure preview size and format
           preview_config.size = (800, 600)
           preview_config.format = 'XRGB8888'
           
#. D√©marre la pr√©visualisation de la cam√©ra en mode QTGL, un mode de pr√©visualisation graphique.

   .. code-block:: python

       try:
           ...          
             
           # Start the camera preview in QTGL mode
           camera.start_preview(Preview.QTGL)
           
           ...

#. D√©finit la configuration vid√©o avec une taille de cadre de 800x600 pixels et un taux de trame de 40 images par seconde.

   .. code-block:: python

       try:
           ...
           
           # Define video configuration with size, frame rate, and buffer count
           conf = {'size': (800, 600)}
           controls = {'FrameRate': 40}
           config = camera.create_video_configuration(main=conf, controls=controls, buffer_count=12)
           
           ...

#. Cr√©e un encodeur vid√©o avec un d√©bit binaire sp√©cifi√© de 10 Mbps, utilisant le format d'encodage H.264. D√©finit le chemin du fichier de sortie pour la vid√©o, en l'enregistrant sous ``my_video.mp4`` dans le r√©pertoire personnel de l'utilisateur.

   .. code-block:: python

       try:
           ...

           # Create a video encoder with a specified bitrate
           encoder = H264Encoder(bitrate=10000000)
           # Define output file for the video
           output = FfmpegOutput(f'{user_home}/my_video.mp4')
           
           ...

#. Configure la cam√©ra avec les param√®tres vid√©o d√©finis, commence l'enregistrement en utilisant l'encodeur et le fichier de sortie sp√©cifi√©s, enregistre pendant 10 secondes, puis arr√™te l'enregistrement.

   .. code-block:: python

       try:
           ...

           # Configure and start recording
           camera.configure(config)
           camera.start_recording(encoder, output)
           # Record for 10 seconds
           time.sleep(10)
           # Stop the recording
           camera.stop_recording()

#. Ce bloc de code g√®re une interruption clavier (comme Ctrl+C) en arr√™tant la pr√©visualisation de la cam√©ra. L'instruction ``pass`` est utilis√©e pour g√©rer l'exception sans rien faire d'autre.

   .. code-block:: python

       except KeyboardInterrupt:
           # Stop the camera preview if a KeyboardInterrupt (e.g., Ctrl+C) occurs
           camera.stop_preview()
           pass







