 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.2_py_pi5:

2.2.2 Thermistance
=====================

Introduction
---------------

Tout comme la photor√©sistance peut d√©tecter la lumi√®re, la thermistance est un 
dispositif √©lectronique sensible √† la temp√©rature qui peut √™tre utilis√© pour 
r√©aliser des fonctions de contr√¥le de la temp√©rature, telles que la cr√©ation 
d'une alarme de chaleur.

Composants n√©cessaires
-------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.2.2_thermistor_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Sch√©ma
---------

.. image:: ../python_pi5/img/2.2.2_thermistor_schematic_1.png


.. image:: ../python_pi5/img/2.2.2_thermistor_schematic_2.png


Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.2.2_thermistor_circuit.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.2.2_Thermistor_zero.py

Lorsque le code s'ex√©cute, la thermistance d√©tecte la temp√©rature ambiante qui 
sera affich√©e √† l'√©cran une fois le calcul du programme termin√©.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   # -*- coding: utf-8 -*-

   import ADC0834
   import time
   import math

   # Initialize the ADC0834 module
   ADC0834.setup()

   # Run the process in a try-except block
   try:
       while True:
           # Read the analog value from the sensor
           analogVal = ADC0834.getResult()

           # Convert the analog value to a voltage
           Vr = 5 * float(analogVal) / 255

           # Calculate the resistance of the thermistor
           Rt = 10000 * Vr / (5 - Vr)

           # Calculate the temperature in Kelvin
           temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))

           # Convert Kelvin to Celsius
           Cel = temp - 273.15

           # Convert Celsius to Fahrenheit
           Fah = Cel * 1.8 + 32

           # Print the temperature in both Celsius and Fahrenheit
           print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

           # Wait for 0.2 seconds before the next read
           time.sleep(0.2)

   # Handle KeyboardInterrupt for graceful termination
   except KeyboardInterrupt:
       # Clean up ADC0834 resources
       ADC0834.destroy()


**Explication du code**

#. Cette section importe la biblioth√®que ADC0834 pour la conversion analogique-num√©rique, la biblioth√®que time pour impl√©menter des d√©lais, et la biblioth√®que math pour effectuer des op√©rations math√©matiques.

   .. code-block:: python

       #!/usr/bin/env python3
       # -*- coding: utf-8 -*-

       import ADC0834
       import time
       import math

#. Initialise le module ADC0834 pour permettre la lecture des valeurs analogiques.

   .. code-block:: python

       # Initialize the ADC0834 module
       ADC0834.setup()

#. Impl√©mente une boucle infinie pour la lecture continue des donn√©es. La boucle lit la valeur analogique d'une thermistance, convertit cette valeur en tension, calcule la r√©sistance de la thermistance, puis traduit cette r√©sistance en mesures de temp√©rature en Kelvin, Celsius et Fahrenheit. Elle affiche √©galement les relev√©s de temp√©rature en Celsius et Fahrenheit, en faisant une pause de 0,2 seconde entre chaque lecture.

   .. code-block:: python

       # Run the process in a try-except block
       try:
           while True:
               # Read the analog value from the sensor
               analogVal = ADC0834.getResult()

               # Convert the analog value to a voltage
               Vr = 5 * float(analogVal) / 255

               # Calculate the resistance of the thermistor
               Rt = 10000 * Vr / (5 - Vr)

               # Calculate the temperature in Kelvin
               temp = 1 / (((math.log(Rt / 10000)) / 3950) + (1 / (273.15 + 25)))

               # Convert Kelvin to Celsius
               Cel = temp - 273.15

               # Convert Celsius to Fahrenheit
               Fah = Cel * 1.8 + 32

               # Print the temperature in both Celsius and Fahrenheit
               print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

               # Wait for 0.2 seconds before the next read
               time.sleep(0.2)

#. Capture une exception KeyboardInterrupt pour terminer le programme proprement et inclut des instructions de nettoyage pour les ressources ADC0834 √† la fin.

   .. code-block:: python

       # Handle KeyboardInterrupt for graceful termination
       except KeyboardInterrupt:
           # Clean up ADC0834 resources
           ADC0834.destroy()
