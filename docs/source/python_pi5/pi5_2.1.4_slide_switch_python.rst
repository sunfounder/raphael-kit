.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci il mondo di Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Tecnico Esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.4_py_pi5:

2.1.4 Interruttore a Slitta
===============================

Introduzione
---------------

In questo progetto, impareremo come utilizzare un interruttore a slitta. 
Solitamente, l'interruttore a slitta √® saldato su PCB come interruttore di 
alimentazione, ma qui dobbiamo inserirlo nella breadboard, quindi potrebbe 
non essere fissato. Lo utilizziamo sulla breadboard per mostrare la sua funzione.

Componenti Necessari
------------------------------

Per questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/2.1.4_slide_switch_list.png

√à decisamente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK D'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_slide_switch`
        - |link_slide_switch_buy|
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|

Schema Elettrico
---------------------

Collega il pin centrale dell'interruttore a slitta a GPIO17 e due LED 
rispettivamente ai pin GPIO22 e GPIO27. Quindi, quando sposti l'interruttore, 
vedrai i due LED accendersi alternativamente.

.. image:: ../python_pi5/img/2.1.4_slide_switch_schematic_1.png

.. image:: ../python_pi5/img/2.1.4_slide_switch_schematic_2.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/2.1.4_slide_switch_circuit.png

**Passo 2:** Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.4_Slider_zero.py

Mentre il codice √® in esecuzione, sposta l'interruttore verso sinistra e si accender√† il LED giallo; sposta l'interruttore verso destra e si accender√† la luce rossa.

<<<<<<< HEAD
**Codice**
=======
.. warning::

    If there is an error prompt  ``RuntimeError: Cannot determine SOC peripheral base address``, please refer to :ref:`faq_soc` 

**Code**
>>>>>>> 387505b31ef24b78d49967f4b4dcfb048c8f48cb

.. note::

    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima, devi accedere alla directory del codice come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Importa le classi LED e Button per il controllo dei GPIO
   from time import sleep  # Importa la funzione sleep per aggiungere ritardi

   # Inizializza l'interruttore a slitta sul pin GPIO 17 con la resistenza pull-up disabilitata
   micro_switch = Button(17, pull_up=False)
   # Inizializza LED1 sul pin GPIO 22
   led1 = LED(22)
   # Inizializza LED2 sul pin GPIO 27
   led2 = LED(27)

   try:
       # Ciclo principale per controllare lo stato dei LED in base allo stato dell'interruttore a slitta
       while True:
           if micro_switch.is_pressed:  # Verifica se l'interruttore √® premuto
               print('    LED1 ON    ')  # Stampa un messaggio di stato
               led1.on()   # Accendi LED1
               led2.off()  # Spegni LED2
           else:  # Se l'interruttore non √® premuto
               print('    LED2 ON    ')  # Stampa un messaggio di stato
               led1.off()  # Spegni LED1
               led2.on()   # Accendi LED2

           sleep(0.5)  # Attendi 0,5 secondi prima di verificare nuovamente lo stato dell'interruttore

   except KeyboardInterrupt:
       # Gestisci un'interruzione da tastiera (Ctrl+C) per una chiusura pulita dal ciclo
       pass
 

**Spiegazione del Codice**

#. Questa linea imposta lo script per essere eseguito con Python 3. Importa ``LED`` e ``Button`` da ``gpiozero`` per controllare i dispositivi GPIO, e ``sleep`` da ``time`` per i ritardi.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Importa le classi LED e Button per il controllo dei GPIO
       from time import sleep  # Importa la funzione sleep per aggiungere ritardi

#. Inizializza un interruttore a slitta collegato al pin GPIO 17 con la resistenza pull-up disabilitata, e due LED collegati ai pin GPIO 22 e 27.

   .. code-block:: python

       # Inizializza l'interruttore a slitta sul pin GPIO 17 con la resistenza pull-up disabilitata
       micro_switch = Button(17, pull_up=False)
       # Inizializza LED1 sul pin GPIO 22
       led1 = LED(22)
       # Inizializza LED2 sul pin GPIO 27
       led2 = LED(27)

#. Il ciclo principale controlla lo stato dell'interruttore a slitta. Se premuto, LED1 si accende e LED2 si spegne; se non premuto, LED1 si spegne e LED2 si accende. Il ciclo si ripete ogni 0,5 secondi. Gestisce un'interruzione da tastiera (come Ctrl+C) per permettere una chiusura corretta dello script.

   .. code-block:: python

       try:
           # Ciclo principale per controllare lo stato dei LED in base allo stato dell'interruttore a slitta
           while True:
               if micro_switch.is_pressed:  # Verifica se l'interruttore √® premuto
                   print('    LED1 ON    ')  # Stampa un messaggio di stato
                   led1.on()   # Accendi LED1
                   led2.off()  # Spegni LED2
               else:  # Se l'interruttore non √® premuto
                   print('    LED2 ON    ')  # Stampa un messaggio di stato
                   led1.off()  # Spegni LED1
                   led2.on()   # Accendi LED2

               sleep(0.5)  # Attendi 0,5 secondi prima di verificare nuovamente lo stato dell'interruttore

       except KeyboardInterrupt:
           # Gestisci un'interruzione da tastiera (Ctrl+C) per una chiusura pulita dal ciclo
           pass
       
