 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.4_py_pi5:

2.1.4 Interrupteur √† Glissi√®re
=======================================

Introduction
------------

Dans ce projet, nous allons apprendre √† utiliser un interrupteur √† glissi√®re. Habituellement, 
l'interrupteur √† glissi√®re est soud√© sur un circuit imprim√© en tant qu'interrupteur d'alimentation, 
mais ici nous devons l'ins√©rer dans la plaque d'essai, ce qui peut ne pas √™tre tr√®s serr√©. 
Nous l'utilisons sur la plaque d'essai pour montrer son fonctionnement.

Composants N√©cessaires
----------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.4_slide_switch_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_slide_switch`
        - |link_slide_switch_buy|
    *   - :ref:`cpn_capacitor`
        - |link_capacitor_buy|

Sch√©ma de C√¢blage
---------------------

Connectez la broche centrale de l'interrupteur √† glissi√®re √† GPIO17, 
et deux LED aux broches GPIO22 et GPIO27 respectivement. Ensuite, 
lorsque vous actionnez l'interrupteur √† glissi√®re, vous pouvez voir 
les deux LED s'allumer alternativement.

.. image:: ../python_pi5/img/2.1.4_slide_switch_schematic_1.png


.. image:: ../python_pi5/img/2.1.4_slide_switch_schematic_2.png


Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.4_slide_switch_circuit.png

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.4_Slider_zero.py

Pendant que le code s'ex√©cute, placez l'interrupteur √† gauche, 
alors la LED jaune s'allume ; √† droite, la lumi√®re rouge s'allume.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Import LED and Button classes for GPIO control
   from time import sleep  # Import sleep function for adding delays

   # Initialize the micro switch on GPIO pin 17 with the pull-up resistor disabled
   micro_switch = Button(17, pull_up=False)
   # Initialize LED1 on GPIO pin 22
   led1 = LED(22)
   # Initialize LED2 on GPIO pin 27
   led2 = LED(27)

   try:
       # Main loop to control LED states based on the micro switch's state
       while True:
           if micro_switch.is_pressed:  # Check if the micro switch is pressed
               print('    LED1 ON    ')  # Print status message
               led1.on()   # Turn on LED1
               led2.off()  # Turn off LED2
           else:  # If the micro switch is not pressed
               print('    LED2 ON    ')  # Print status message
               led1.off()  # Turn off LED1
               led2.on()   # Turn on LED2

           sleep(0.5)  # Wait for 0.5 seconds before rechecking the switch state

   except KeyboardInterrupt:
       # Handle a keyboard interrupt (Ctrl+C) for a clean exit from the loop
       pass


**Explication du Code**

#. Cette ligne permet d'ex√©cuter le script avec Python 3. Elle importe ``LED`` et ``Button`` de ``gpiozero`` pour contr√¥ler les dispositifs GPIO, et ``sleep`` de ``time`` pour les d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Import LED and Button classes for GPIO control
       from time import sleep  # Import sleep function for adding delays

#. Initialise un micro-interrupteur connect√© √† la broche GPIO 17 avec la r√©sistance pull-up d√©sactiv√©e, et deux LED connect√©es aux broches GPIO 22 et 27.

   .. code-block:: python

       # Initialize the micro switch on GPIO pin 17 with the pull-up resistor disabled
       micro_switch = Button(17, pull_up=False)
       # Initialize LED1 on GPIO pin 22
       led1 = LED(22)
       # Initialize LED2 on GPIO pin 27
       led2 = LED(27)

#. La boucle principale v√©rifie l'√©tat du micro-interrupteur. Si press√©, LED1 s'allume et LED2 s'√©teint ; si non press√©, LED1 s'√©teint et LED2 s'allume. La boucle se r√©p√®te toutes les 0,5 secondes. Capture un KeyboardInterrupt (comme Ctrl+C) pour permettre une terminaison propre du script.

   .. code-block:: python

       try:
       # Main loop to control LED states based on the micro switch's state
       while True:
           if micro_switch.is_pressed:  # Check if the micro switch is pressed
               print('    LED1 ON    ')  # Print status message
               led1.on()   # Turn on LED1
               led2.off()  # Turn off LED2
           else:  # If the micro switch is not pressed
               print('    LED2 ON    ')  # Print status message
               led1.off()  # Turn off LED1
               led2.on()   # Turn on LED2

           sleep(0.5)  # Wait for 0.5 seconds before rechecking the switch state

       except KeyboardInterrupt:
           # Handle a keyboard interrupt (Ctrl+C) for a clean exit from the loop
           pass
