 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.1_py_pi5:

1.1.1 LED Clignotant
===========================

Introduction
-------------------

Dans ce projet, nous allons apprendre √† faire clignoter une LED en programmant. 
Gr√¢ce √† vos r√©glages, votre LED peut produire une s√©rie de ph√©nom√®nes int√©ressants.
Maintenant, allez-y.

Composants N√©cessaires
--------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/1.1.1_blinking_led_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Sch√©ma de Montage
--------------------

Dans cette exp√©rience, nous connectons la broche GPIO 17 du Raspberry Pi √† l'anode (broche longue) de la LED, puis la cathode (broche courte) de la LED √† une r√©sistance, et enfin l'autre extr√©mit√© de la r√©sistance √† la broche GND du Raspberry Pi. Pour allumer la LED, nous devons d√©finir GPIO17 sur haut (3,3V). Nous pouvons obtenir ce ph√©nom√®ne en programmant.

.. note::

    **Pin11** se r√©f√®re √† la 11e broche du Raspberry Pi de gauche √† droite, 
    et ses num√©ros de broche **BCM** correspondants sont indiqu√©s dans le tableau suivant.

Parmi les contenus li√©s au langage Python, BCM 17 est 17 dans la colonne BCM du tableau suivant. 
En m√™me temps, ils sont les m√™mes que la 11e broche sur le Raspberry Pi, Pin 11.

============ ======== ===
T-Board Name physical BCM
GPIO17       Pin 11   17
============ ======== ===

.. image:: ../python_pi5/img/1.1.1_blinking_led_schematic.png
    :width: 800
    :align: center

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Montez le circuit.

.. image:: ../python_pi5/img/1.1.1_blinking_led_circuit.png
    :width: 800
    :align: center

**√âtape 2 :** Allez dans le dossier du code et ex√©cutez-le.

1. Si vous utilisez un √©cran, nous vous recommandons de suivre les √©tapes suivantes.

Trouvez ``1.1.1_BlinkingLed_zero.py`` et double-cliquez dessus pour l'ouvrir. Vous √™tes maintenant dans le fichier.

Cliquez sur **Run** ->\ **Run Module** dans la fen√™tre et le contenu suivant appara√Ætra.

Pour arr√™ter l'ex√©cution, cliquez simplement sur le bouton X en haut √† droite pour le 
fermer et vous reviendrez au code. Si vous modifiez le code, avant de cliquer sur 
**Run Module (F5)**, vous devez d'abord le sauvegarder. Ensuite, vous pourrez voir les r√©sultats.

2. Si vous vous connectez √† distance au Raspberry Pi, tapez la commande suivante :

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/python-pi5

.. note::
    Changez le r√©pertoire vers le chemin du code de cette exp√©rience via ``cd``.

**√âtape 3 :** Ex√©cutez le code

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 1.1.1_BlinkingLed_zero.py

.. note::
    Ici, sudo signifie superuser do, et python signifie ex√©cuter le fichier avec Python.

Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.

**√âtape 4 :** Si vous souhaitez modifier le fichier de code ``1.1.1_BlinkingLed_zero.py``,
appuyez sur ``Ctrl + C`` pour arr√™ter l'ex√©cution du code. Tapez ensuite la commande suivante pour ouvrir ``1.1.1_BlinkingLed_zero.py`` :

.. raw:: html

   <run></run>

.. code-block::

   nano 1.1.1_BlinkingLed_zero.py

.. note::
    nano est un outil d'√©dition de texte. La commande est utilis√©e pour ouvrir le
    fichier de code ``1.1.1_BlinkingLed_zero.py`` avec cet outil.

Appuyez sur ``Ctrl+X`` pour quitter. Si vous avez modifi√© le code, il y aura une
invite demandant si vous souhaitez enregistrer les modifications ou non. Tapez ``Y`` (enregistrer)
ou ``N`` (ne pas enregistrer).

Appuyez ensuite sur ``Entr√©e`` pour quitter. Tapez √† nouveau nano ``1.1.1_BlinkingLed_zero.py`` pour voir l'effet apr√®s la modification.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

Le code du programme est le suivant :

.. note::

   Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller dans le chemin source du code comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   from time import sleep

   # Initialize an LED connected to GPIO pin 17 using the GPIO Zero library.
   led = LED(17)

   try:
      # Start an infinite loop to toggle the LED state.
      while True:
         # Turn on the LED and print a message to the console.
         led.on()
         print('...LED ON')

         # Wait for 0.5 seconds with the LED on.
         sleep(0.5)

         # Turn off the LED and print a message to the console.
         led.off()
         print('LED OFF...')

         # Wait for 0.5 seconds with the LED off.
         sleep(0.5)

   except KeyboardInterrupt:
      # Gracefully handle a keyboard interrupt (Ctrl+C) by breaking the loop.
      # GPIO Zero handles cleanup of GPIO settings automatically on exit.
      pass


**Explication du code**

#. Lorsque le syst√®me d√©tecte cela, il recherchera le chemin d'installation de Python dans le param√®tre d'environnement, puis appellera l'interpr√©teur correspondant pour effectuer l'op√©ration. Cela permet d'√©viter que l'utilisateur n'installe Python dans le chemin par d√©faut ``/usr/bin``.

   .. code-block:: python

       #!/usr/bin/env python3

#. Ces lignes importent les classes et fonctions n√©cessaires. ``LED`` de ``gpiozero`` pour le contr√¥le des LED et ``sleep`` de ``time`` pour les d√©lais.

   .. code-block:: python

       from gpiozero import LED
       from time import sleep

#. Cette ligne cr√©e un objet LED connect√© √† la broche GPIO 17.

   .. code-block:: python

       # Initialize an LED connected to GPIO pin 17 using the GPIO Zero library.
       led = LED(17)

#. Une boucle infinie est d√©marr√©e en utilisant ``while True:``. √Ä l'int√©rieur de la boucle, la LED est allum√©e (``led.on()``) et un message est imprim√©. Le programme fait ensuite une pause de 0,5 seconde (``sleep(0.5)``). Ensuite, la LED est √©teinte (``led.off()``), un autre message est imprim√© et le programme fait √† nouveau une pause de 0,5 seconde.

    .. code-block:: python

       try:
           # Start an infinite loop to toggle the LED state.
           while True:
               # Turn on the LED and print a message to the console.
               led.on()
               print('...LED ON')

               # Wait for 0.5 seconds with the LED on.
               sleep(0.5)

               # Turn off the LED and print a message to the console.
               led.off()
               print('LED OFF...')

               # Wait for 0.5 seconds with the LED off.
               sleep(0.5)

#. Le bloc ``except`` intercepte un ``KeyboardInterrupt`` (comme appuyer sur Ctrl+C) et quitte la boucle en toute s√©curit√©. L'instruction ``pass`` est utilis√©e ici comme un espace r√©serv√© pour indiquer qu'aucune action sp√©cifique n'est effectu√©e en cas d'interruption.

   .. code-block:: python

       except KeyboardInterrupt:
           # Gracefully handle a keyboard interrupt (Ctrl+C) by breaking the loop.
           # GPIO Zero handles cleanup of GPIO settings automatically on exit.
           pass

