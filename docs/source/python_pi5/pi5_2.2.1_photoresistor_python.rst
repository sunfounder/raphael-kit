.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci il mondo di Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Tecnico Esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.1_py_pi5:

2.2.1 Fotoresistore
=======================

Introduzione
---------------

Il fotoresistore √® un componente comunemente utilizzato per rilevare l'intensit√† 
della luce ambientale nella vita quotidiana. Aiuta il controller a riconoscere il 
giorno e la notte, realizzando funzioni di controllo della luce come la lampada 
notturna. Questo progetto √® molto simile a quello del potenziometro e potresti 
pensare che cambi la tensione per rilevare la luce.

Componenti Necessari
------------------------------

Per questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/2.2.1_photoresistor_list.png

√à decisamente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK D'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_adc0834`
        - \-
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|

Schema Elettrico
---------------------

.. image:: ../python_pi5/img/2.2.1_photoresistor_schematic_1.png


.. image:: ../python_pi5/img/2.2.1_photoresistor_schematic_2.png


Procedure Sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/2.2.1_photoresistor_circuit.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.1_Photoresistor_zero.py

Quando il codice √® in esecuzione, la luminosit√† del LED cambier√† in base all'intensit√† della luce rilevata dal fotoresistore.

<<<<<<< HEAD
**Codice**
=======
.. warning::

    If there is an error prompt  ``RuntimeError: Cannot determine SOC peripheral base address``, please refer to :ref:`faq_soc` 

**Code**
>>>>>>> 387505b31ef24b78d49967f4b4dcfb048c8f48cb

.. note::

    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima, devi accedere alla directory del codice come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import PWMLED
   import ADC0834
   import time

   # Inizializza un LED PWM sul pin GPIO 22
   led = PWMLED(22)

   # Configura il modulo ADC0834
   ADC0834.setup()

   # Definisci una funzione per mappare i valori da un intervallo a un altro
   def MAP(x, in_min, in_max, out_min, out_max):
       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

   # Loop principale per leggere il valore ADC e controllare la luminosit√† del LED
   def loop():
       while True:
           # Leggi il valore analogico dall'ADC
           analogVal = ADC0834.getResult()
           print('valore = %d' % analogVal)

           # Mappa il valore ADC a un valore PWM e imposta la luminosit√† del LED
           led.value = float(analogVal/255)

           # Attendi per 0,2 secondi
           time.sleep(0.2)

   # Esegui il loop principale e gestisci KeyboardInterrupt per una chiusura pulita
   try:
       loop()
   except KeyboardInterrupt: 
       # Spegni il LED prima di uscire
       led.value = 0


**Spiegazione del Codice**

#. Questo segmento importa la classe PWMLED dalla libreria gpiozero, necessaria per controllare i LED PWM. Include anche il modulo ADC0834 per interfacciarsi con il convertitore analogico-digitale e il modulo time per eseguire funzioni basate sul tempo come sleep.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import PWMLED
       import ADC0834
       import time

#. Inizializza un LED PWM collegato al pin GPIO 22 e configura il modulo ADC0834, preparandolo per l'uso nel progetto.

   .. code-block:: python

       # Inizializza un LED PWM sul pin GPIO 22
       led = PWMLED(22)

       # Configura il modulo ADC0834
       ADC0834.setup()

#. Definisce una funzione per mappare un valore di input da un intervallo a un altro. Questa funzione √® essenziale per tradurre le letture dell'ADC in un intervallo adatto per il controllo PWM.

   .. code-block:: python

       # Definisci una funzione per mappare i valori da un intervallo a un altro
       def MAP(x, in_min, in_max, out_min, out_max):
           return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

#. Questa sezione contiene un loop che legge continuamente il valore analogico dall'ADC0834, lo mappa su un valore PWM corrispondente e regola la luminosit√† del LED. Viene incluso un breve ritardo (time.sleep(0.2)) per rendere visibili i cambiamenti e per evitare di sovraccaricare la CPU.

   .. code-block:: python

       # Loop principale per leggere il valore ADC e controllare la luminosit√† del LED
       def loop():
           while True:
               # Leggi il valore analogico dall'ADC
               analogVal = ADC0834.getResult()
               print('value = %d' % analogVal)

               # Mappa il valore ADC a un valore PWM e imposta la luminosit√† del LED
               led.value = float(analogVal/255)

               # Attendi per 0,2 secondi
               time.sleep(0.2)

#. Esegue la funzione loop e include la gestione degli errori per una chiusura pulita con KeyboardInterrupt. Garantisce che il LED venga spento quando il programma viene interrotto.

   .. code-block:: python

       # Esegui il loop principale e gestisci KeyboardInterrupt per una chiusura pulita
       try:
           loop()
       except KeyboardInterrupt: 
           # Spegni il LED prima di uscire
           led.value = 0

