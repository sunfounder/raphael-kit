 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.1_py_pi5:

2.2.1 Photor√©sistance
========================

Introduction
---------------

La photor√©sistance est un composant couramment utilis√© pour mesurer l'intensit√© lumineuse 
ambiante. Elle aide le contr√¥leur √† reconna√Ætre le jour et la nuit et √† r√©aliser des fonctions 
de contr√¥le de l'√©clairage telles que la lampe de nuit. Ce projet est tr√®s similaire au 
potentiom√®tre, et vous pourriez penser qu'il s'agit de changer la tension pour d√©tecter la lumi√®re.


Composants n√©cessaires
------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.2.1_photoresistor_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_adc0834`
        - \-
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|

Sch√©ma
--------

.. image:: ../python_pi5/img/2.2.1_photoresistor_schematic_1.png


.. image:: ../python_pi5/img/2.2.1_photoresistor_schematic_2.png


Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.2.1_photoresistor_circuit.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.1_Photoresistor_zero.py

Lorsque le code s'ex√©cute, la luminosit√© de la LED changera en fonction de l'intensit√© lumineuse d√©tect√©e par la photor√©sistance.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import PWMLED
   import ADC0834
   import time

   # Initialize a PWM LED on GPIO pin 22
   led = PWMLED(22)

   # Set up the ADC0834 module
   ADC0834.setup()

   # Define a function for mapping values from one range to another
   def MAP(x, in_min, in_max, out_min, out_max):
       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

   # Main loop for reading ADC value and controlling LED brightness
   def loop():
       while True:
           # Read analog value from ADC
           analogVal = ADC0834.getResult()
           print('value = %d' % analogVal)

           # Map the ADC value to a PWM value and set LED brightness
           led.value = float(analogVal/255)

           # Wait for 0.2 seconds
           time.sleep(0.2)

   # Run the main loop and handle KeyboardInterrupt for graceful shutdown
   try:
       loop()
   except KeyboardInterrupt: 
       # Turn off LED before exiting
       led.value = 0


**Explication du code**

#. Ce segment importe la classe PWMLED de la biblioth√®que gpiozero, n√©cessaire pour contr√¥ler les LEDs PWM. Il inclut √©galement le module ADC0834 pour interfacer avec le convertisseur analogique-num√©rique, et le module time pour ex√©cuter des fonctions bas√©es sur le temps comme sleep.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import PWMLED
       import ADC0834
       import time

#. Initialise une LED PWM connect√©e √† la broche GPIO 22 et configure le module ADC0834, le pr√©parant pour une utilisation dans le projet.

   .. code-block:: python

       # Initialize a PWM LED on GPIO pin 22
       led = PWMLED(22)

       # Set up the ADC0834 module
       ADC0834.setup()

#. D√©finit une fonction pour mapper une valeur d'entr√©e d'une plage √† une autre. Cette fonction est cruciale pour traduire les lectures de l'ADC en une plage appropri√©e pour le contr√¥le PWM.

   .. code-block:: python

       # Define a function for mapping values from one range to another
       def MAP(x, in_min, in_max, out_min, out_max):
           return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

#. Cette section contient une boucle qui lit continuellement la valeur analogique de l'ADC0834, la mappe √† une valeur PWM correspondante, et ajuste la luminosit√© de la LED. Un court d√©lai (`time.sleep(0.2)`) est inclus pour rendre les changements visibles et √©viter de surcharger le CPU.

   .. code-block:: python

       # Main loop for reading ADC value and controlling LED brightness
       def loop():
           while True:
               # Read analog value from ADC
               analogVal = ADC0834.getResult()
               print('value = %d' % analogVal)

               # Map the ADC value to a PWM value and set LED brightness
               led.value = float(analogVal/255)

               # Wait for 0.2 seconds
               time.sleep(0.2)

#. Ex√©cute la fonction loop et inclut une gestion des erreurs pour un arr√™t propre sur KeyboardInterrupt. Il s'assure que la LED est √©teinte lorsque le programme est arr√™t√©.

   .. code-block:: python

       # Run the main loop and handle KeyboardInterrupt for graceful shutdown
       try:
           loop()
       except KeyboardInterrupt: 
           # Turn off LED before exiting
           led.value = 0

