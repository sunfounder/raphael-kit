 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.3_py_pi5:

1.1.3 Graphique √† barres LED
===============================

Introduction
----------------

Dans ce projet, nous allons allumer s√©quentiellement les lumi√®res sur le graphique √† barres LED.

Composants n√©cessaires
------------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/1.1.3_led_bar_list.png

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_bar_graph`
        - \-

Sch√©ma de connexion
-------------------------

============ ======== ======== ===
Nom T-Board  physique wiringPi BCM
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO25       Pin 22   6        25
SPICE0       Pin 24   10       8
SPICE1       Pin 26   11       7
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       22
GPIO21       Pin 40   29       21
============ ======== ======== ===

.. image:: ../python_pi5/img/1.1.3_LedBarGraph_schematic.png

Proc√©dures exp√©rimentales
------------------------------

**√âtape 1** : Construisez le circuit.

.. note::

    Faites attention √† la direction lors de la connexion. Si vous le connectez √† l'envers, il ne s'allumera pas.

.. image:: ../python_pi5/img/1.1.3_LedBarGraph_circuit.png

**√âtape 2** : Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3** : Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.3_LedBarGraph_zero.py

Apr√®s l'ex√©cution du code, vous verrez les LED de la barre LED s'allumer et s'√©teindre r√©guli√®rement.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   from time import sleep

   # Define GPIO pins where LEDs are connected
   led_pins = [18, 23, 24, 25, 8, 7, 12, 16, 20, 21]

   # Create LED objects for each pin
   leds = [LED(pin) for pin in led_pins]

   def odd_led_bar_graph():
       # Sequentially light up odd-numbered LEDs (index 0, 2, 4, etc.)
       for i in range(5):
           j = i * 2  # Calculate odd index
           leds[j].on()  # Turn on odd-numbered LED
           sleep(0.3)    # Delay for visual effect
           leds[j].off() # Turn off LED

   def even_led_bar_graph():
       # Sequentially light up even-numbered LEDs (index 1, 3, 5, etc.)
       for i in range(5):
           j = i * 2 + 1  # Calculate even index
           leds[j].on()   # Turn on even-numbered LED
           sleep(0.3)     # Delay for visual effect
           leds[j].off()  # Turn off LED

   def all_led_bar_graph():
       # Sequentially light up all LEDs one by one
       for led in leds:
           led.on()       # Turn on LED
           sleep(0.3)     # Delay for visual effect
           led.off()      # Turn off LED

   def turn_off_all_leds():
       # Turn off all LEDs at once
       for led in leds:
           led.off()

   try:
       # Main loop to cycle through LED patterns
       while True:
           odd_led_bar_graph()   # Activate odd-numbered LEDs
           sleep(0.3)            # Pause between patterns
           even_led_bar_graph()  # Activate even-numbered LEDs
           sleep(0.3)            # Pause between patterns
           all_led_bar_graph()   # Activate all LEDs
           sleep(0.3)            # Pause before restarting

   except KeyboardInterrupt:
       # Handle interruption (Ctrl+C) gracefully
       turn_off_all_leds()      # Ensure all LEDs are turned off on exit
       pass


**Explication du code**

#. Ces lignes importent les classes et fonctions n√©cessaires. ``LED`` de ``gpiozero`` pour le contr√¥le des LEDs et ``sleep`` de ``time`` pour les d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED
       from time import sleep

#. La liste ``led_pins`` contient les num√©ros des broches GPIO. ``leds`` est une liste d'objets ``LED``, chacun correspondant √† une broche dans ``led_pins``.

   .. code-block:: python

       # Define GPIO pins where LEDs are connected
       led_pins = [18, 23, 24, 25, 8, 7, 12, 16, 20, 21]

       # Create LED objects for each pin
       leds = [LED(pin) for pin in led_pins]

#. Faire s'allumer les LEDs sur les chiffres impairs du graphique √† barres LED.

   .. code-block:: python

       def odd_led_bar_graph():
           # Sequentially light up odd-numbered LEDs (index 0, 2, 4, etc.)
           for i in range(5):
               j = i * 2  # Calculate odd index
               leds[j].on()  # Turn on odd-numbered LED
               sleep(0.3)    # Delay for visual effect
               leds[j].off() # Turn off LED

#. Faire s'allumer les LEDs sur les chiffres pairs du graphique √† barres LED.

   .. code-block:: python

       def even_led_bar_graph():
           # Sequentially light up even-numbered LEDs (index 1, 3, 5, etc.)
           for i in range(5):
               j = i * 2 + 1  # Calculate even index
               leds[j].on()   # Turn on even-numbered LED
               sleep(0.3)     # Delay for visual effect
               leds[j].off()  # Turn off LED

#. Faire s'allumer les LEDs sur le graphique √† barres LED une par une.

   .. code-block:: python

       def all_led_bar_graph():
           # Sequentially light up all LEDs one by one
           for led in leds:
               led.on()       # Turn on LED
               sleep(0.3)     # Delay for visual effect
               led.off()      # Turn off LED

#. La boucle ``while True`` alterne en continu les motifs LED. Le bloc ``except`` g√®re une interruption clavier (Ctrl+C), assurant que toutes les LEDs sont √©teintes √† la sortie.

   .. code-block:: python

       try:
           # Main loop to cycle through LED patterns
           while True:
               odd_led_bar_graph()   # Activate odd-numbered LEDs
               sleep(0.3)            # Pause between patterns
               even_led_bar_graph()  # Activate even-numbered LEDs
               sleep(0.3)            # Pause between patterns
               all_led_bar_graph()   # Activate all LEDs
               sleep(0.3)            # Pause before restarting

       except KeyboardInterrupt:
           # Handle interruption (Ctrl+C) gracefully
           turn_off_all_leds()      # Ensure all LEDs are turned off on exit
           pass



