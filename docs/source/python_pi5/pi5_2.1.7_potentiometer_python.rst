 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.7_py_pi5:

2.1.7 Potentiom√®tre
=======================

Introduction
---------------

La fonction ADC peut √™tre utilis√©e pour convertir des signaux analogiques en signaux num√©riques, 
et dans cette exp√©rience, nous utilisons l'ADC0834 pour obtenir cette fonctionnalit√©. Ici, 
nous r√©alisons ce processus en utilisant un potentiom√®tre. Le potentiom√®tre modifie la quantit√© 
physique ‚Äî la tension, qui est convertie par la fonction ADC.


Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.7_potentiometer_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_potentiometer`
        - |link_potentiometer_buy|
    *   - :ref:`cpn_adc0834`
        - \-

Sch√©ma
----------

.. image:: ../python_pi5/img/2.1.7_potentiometer_second_1.png


.. image:: ../python_pi5/img/2.1.7_potentiometer_second_2.png

Proc√©dures exp√©rimentales
-----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.7_Potentiometer_circuit.png


.. note::
    Veuillez placer la puce en vous r√©f√©rant √† la position correspondante repr√©sent√©e 
    dans l'image. Notez que les encoches sur la puce doivent √™tre √† gauche lorsqu'elle 
    est plac√©e.

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.7_Potentiometer_zero.py

Apr√®s l'ex√©cution du code, tournez le bouton du potentiom√®tre, l'intensit√© de la 
LED changera en cons√©quence.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. 
    Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. 
    Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import PWMLED
   import ADC0834
   import time

   # Initialize a PWM LED on GPIO pin 22
   led = PWMLED(22)

   # Set up the ADC0834 module
   ADC0834.setup()

   def MAP(x, in_min, in_max, out_min, out_max):
       """
       Map a value from one range to another.
       :param x: The value to be mapped.
       :param in_min: The lower bound of the value's current range.
       :param in_max: The upper bound of the value's current range.
       :param out_min: The lower bound of the value's target range.
       :param out_max: The upper bound of the value's target range.
       :return: The mapped value.
       """
       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

   try:
       while True:
           # Get the current reading from the ADC0834 module
           res = ADC0834.getResult()
           print('res = %d' % res)

           # Map the ADC value to a range suitable for setting LED brightness
           R_val = MAP(res, 0, 255, 0, 100)

           # Set the LED brightness
           led.value = float(R_val / 100)

           # Wait for 0.2 seconds before reading again
           time.sleep(0.2)

   # Graceful exit when 'Ctrl+C' is pressed
   except KeyboardInterrupt: 
       led.value = 0  # Turn off the LED


**Explication du code**

#. ``gpiozero`` pour le contr√¥le de la LED PWM, ``ADC0834`` pour la conversion analogique-num√©rique, et ``time`` pour impl√©menter des d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3

       from gpiozero import PWMLED
       import ADC0834
       import time

#. Initialisez un objet PWMLED connect√© √† la broche GPIO 22 et configurez le convertisseur ADC0834.

   .. code-block:: python

       # Initialize a PWM LED on GPIO pin 22
       led = PWMLED(22)

       # Set up the ADC0834 module
       ADC0834.setup()

#. D√©finir une fonction nomm√©e ``MAP`` pour convertir une plage de valeurs en une autre, utile pour mapper les valeurs ADC aux niveaux de luminosit√© appropri√©s de la LED.

   .. code-block:: python

       def MAP(x, in_min, in_max, out_min, out_max):
           return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

#. Lire en continu la valeur de l'ADC dans une boucle, en mapant la lecture de l'ADC (0-255) √† un niveau de luminosit√© (0-100) pour la LED. Ajuster la luminosit√© de la LED en fonction de cette valeur mapp√©e. Impl√©menter un d√©lai de 0,2 seconde pour une meilleure lisibilit√© et stabilit√©.

   .. code-block:: python

       try:
           while True:
               # Get the current reading from the ADC0834 module
               res = ADC0834.getResult()
               print('res = %d' % res)

               # Map the ADC value to a range suitable for setting LED brightness
               R_val = MAP(res, 0, 255, 0, 100)

               # Set the LED brightness
               led.value = float(R_val / 100)

               # Wait for 0.2 seconds before reading again
               time.sleep(0.2)

       # Graceful exit when 'Ctrl+C' is pressed
       except KeyboardInterrupt: 
           led.value = 0  # Turn off the LED