.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _3.1.1_py_pi5:

3.1.1 写真モジュール
==========================

はじめに
-----------------

このキットにはカメラモジュールが装備されているため、Raspberry Piで写真を撮影してみましょう。

必要な部品
------------------------------

このプロジェクトには、次のコンポーネントが必要です。 

.. image:: ../python_pi5/img/3.3.1_photograph_list.png
  :width: 800

一式を購入するのが便利です、こちらがリンクです： 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前	
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから別々に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|

実験手順
------------------------------

**ステップ 1:** Raspberry Piデスクトップに入ります。より良い体験のために画面が必要な場合は、 `Connect your Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_ を参照してください。または、リモートでRaspberry Piデスクトップにアクセスするには、 :ref:`remote_desktop` の詳細なチュートリアルを参照してください。

**ステップ 2:** ターミナルを開き、コードのフォルダに入ります。

.. code-block::

    cd ~/raphael-kit/python-pi5

**ステップ 3:** 実行します。

.. code-block::

    sudo python3 3.1.1_PhotographModule_zero.py

コードが実行された後、カメラが写真を撮ります。 ``~/`` ディレクトリに ``my_photo.jpg`` という名前の写真を見ることができます。

.. note::

    ``~/raphael-kit/python-pi5/`` パスの ``3.1.1_PhotographModule.py`` をPython IDEで開き、実行ボタンをクリックしてコードを実行し、停止ボタンでコードを停止することもできます。

写真をPCにダウンロードしたい場合は、 :ref:`filezilla` を参照してください。

.. warning::

    エラー メッセージ ``RuntimeError: Cannot determine SOC peripheral base address`` が表示された場合は、 :ref:`faq_soc` を参照してください。

**コード**

.. code-block:: python

   #!/usr/bin/env python3    
   from picamera2 import Picamera2, Preview
   import os

   # Get the current user's login name
   user = os.getlogin()
   # Get the path to the user's home directory
   user_home = os.path.expanduser(f'~{user}')

   # Create a Picamera2 instance
   camera = Picamera2()
   # Retrieve the default preview configuration
   preview_config = camera.preview_configuration

   try:
       # Set preview size and format
       preview_config.size = (800, 600)
       preview_config.format = 'XRGB8888'  
       # Start the camera preview in QTGL mode
       camera.start_preview(Preview.QTGL)
       # Start the camera
       camera.start()
       # Capture and save a photo to the user's home directory
       camera.capture_file(f'{user_home}/my_photo.jpg')

   except KeyboardInterrupt:
       # Stop the camera preview if a KeyboardInterrupt (e.g., Ctrl+C) occurs
       camera.stop_preview()
       pass

**コード説明**

#. picamera2ライブラリから ``Picamera2`` と ``Preview`` クラスをインポートし、オペレーティングシステムの相互作用に ``os`` モジュールを使用します。

   .. code-block:: python

       #!/usr/bin/env python3    
       from picamera2 import Picamera2, Preview
       import os

#. 現在のユーザーのログイン名とそのホームディレクトリのパスを取得します。

   .. code-block:: python

       # Get the current user's login name
       user = os.getlogin()
       # Get the path to the user's home directory
       user_home = os.path.expanduser(f'~{user}')

#. ``Picamera2`` クラスのインスタンスを作成し、デフォルトのプレビュー設定を取得します。

   .. code-block:: python

       # Create a Picamera2 instance
       camera = Picamera2()
       # Retrieve the default preview configuration
       preview_config = camera.preview_configuration

#. カメラプレビューのサイズとフォーマットを設定します。サイズは800x600ピクセルに設定され、フォーマットは ``XRGB8888`` に設定されます。

   .. code-block:: python

       try:
           # Set preview size and format
           preview_config.size = (800, 600)
           preview_config.format = 'XRGB8888'

           ...

#. QTGLモードでカメラプレビューを開始し、その後カメラ自体を開始します。

   .. code-block:: python

       try:
           ...
           
           # Start the camera preview in QTGL mode
           camera.start_preview(Preview.QTGL)
           # Start the camera
           camera.start()

           ...

#. カメラから画像をキャプチャし、 ``~/`` に保存します。

   .. code-block:: python

       try:
           ...           
           
           # Capture and save a photo to the user's home directory
           camera.capture_file(f'{user_home}/my_photo.jpg')

   .. note::
       ``camera.capture()`` 関数と ``for`` ループを一緒に使用して連続撮影を実現できます。撮影の時間間隔を調整するには ``delay`` 関数を使用します。

       .. code-block:: python

           for i in range(5):
               camera.capture(f'{user_home}/my_photo{str(i)}.jpg')

#. このコードブロックは、Ctrl+CなどのKeyboardInterruptを処理し、カメラプレビューを停止します。 ``pass`` 文は、例外を処理する際に他の操作を行わないように使用されます。

   .. code-block:: python

       except KeyboardInterrupt:
           # Stop the camera preview if a KeyboardInterrupt (e.g., Ctrl+C) occurs
           camera.stop_preview()
           pass
