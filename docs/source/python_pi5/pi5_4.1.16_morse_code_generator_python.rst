.. note::

    ¬°Hola! ¬°Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook! Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos Exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _4.1.16_py_pi5:

4.1.13 Generador de C√≥digo Morse
============================================

Introducci√≥n
--------------------

En este proyecto, haremos un generador de c√≥digo Morse, donde puedes escribir una 
serie de letras en ingl√©s en la Raspberry Pi para que aparezcan como c√≥digo Morse.

Componentes Necesarios
-------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../python_pi5/img/4.1.16_morse_code_generator_list.png
    :width: 800
    :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Diagrama Esquem√°tico
--------------------------

============== ====== ======== ===
Nombre T-Board f√≠sica WiringPi BCM
GPIO17         Pin 11   0      17
GPIO22         Pin 15   3      22
============== ====== ======== ===

.. image:: ../python_pi5/img/4.1.16_morse_code_generator_schematic.png
   :align: center

Procedimientos Experimentales
----------------------------

**Paso 1:** Construye el circuito. (Presta atenci√≥n a los polos del zumbador: 
El que tiene la etiqueta + es el polo positivo y el otro es el negativo.)

.. image:: ../python_pi5/img/4.1.16_morse_code_generator_circuit.png

**Paso 2**: Abre el archivo de c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Paso 3**: Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.16_MorseCodeGenerator_zero.py

Despu√©s de que el programa se ejecute, escribe una serie de caracteres, 
y el zumbador y el LED enviar√°n las se√±ales de c√≥digo Morse correspondientes.

.. warning::

    Si recibe el mensaje de error ``RuntimeError: Cannot determine SOC peripheral base address``, consulte :ref:`faq_soc`

**C√≥digo**

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Buzzer, LED
   import time

   # Inicializar Buzzer y LED en los pines GPIO
   BeepPin = Buzzer(22)
   ALedPin = LED(17)

   # Representaci√≥n del c√≥digo Morse para los caracteres
   MORSECODE = {
       'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110',
       'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10',
       'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',
       'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100',
       '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000',
       '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111',
       '?': '001100', '/': '10010', ',': '110011', '.': '010101', ';': '101010',
       '!': '101011', '@': '011010', ':': '111000',
   }

   def on():
       """ Turn on the buzzer and LED. """
       BeepPin.on()
       ALedPin.on()

   def off():
       """ Turn off the buzzer and LED. """
       BeepPin.off()
       ALedPin.off()

   def beep(dt):  # dt para el tiempo de retraso.
       """
       Produce a beep sound and LED flash for the specified duration.
       :param dt: Duration for the beep and flash.
       """
       on()
       time.sleep(dt)
       off()
       time.sleep(dt)

   def morsecode(code):
       """
       Convert the input code into Morse code and signal it using the buzzer and LED.
       :param code: The text to be converted to Morse code.
       """
       pause = 0.25
       for letter in code:
           for tap in MORSECODE[letter]:
               if tap == '0':
                   beep(pause / 2)  # Pitido corto para el punto
               if tap == '1':
                   beep(pause)      # Pitido largo para la raya
           time.sleep(pause)  # Pausa entre letras

   def destroy():
       """ Clean up resources on script termination. """
       print("")
       BeepPin.off()
       ALedPin.off()

   try:
       while True:
           code = input("Please input the messenger:")
           code = code.upper()  # Convertir a may√∫sculas para la b√∫squeda de c√≥digo Morse
           print(code)
           morsecode(code)
   except KeyboardInterrupt:
       destroy()


**Explicaci√≥n del C√≥digo**

#. Este c√≥digo importa las clases Buzzer y LED de la biblioteca gpiozero. Estas clases son esenciales para controlar los dispositivos GPIO correspondientes en la Raspberry Pi.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Buzzer, LED
       import time

#. Inicializa el buzzer en el pin GPIO 22 y el LED en el pin GPIO 17, facilitando el control de estos componentes.

   .. code-block:: python

       # Inicializar Buzzer y LED en los pines GPIO
       BeepPin = Buzzer(22)
       ALedPin = LED(17)

#. Define la estructura ``MORSE``, un diccionario que contiene las representaciones del c√≥digo Morse para los caracteres A-Z, n√∫meros 0-9 y s√≠mbolos como ‚Äú?‚Äù, ‚Äú/‚Äù, ‚Äú:‚Äù, ‚Äú,‚Äù, ‚Äú.‚Äù, ‚Äú;‚Äù, ‚Äú!‚Äù, ‚Äú@‚Äù, donde ``0`` indica un punto y ``1`` indica una raya.

   .. code-block:: python

       # Representaci√≥n del c√≥digo Morse para los caracteres
       MORSECODE = {
           'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110',
           'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10',
           'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',
           'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100',
           '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000',
           '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111',
           '?': '001100', '/': '10010', ',': '110011', '.': '010101', ';': '101010',
           '!': '101011', '@': '011010', ':': '111000',
       }

#. La funci√≥n ``on()`` enciende el buzzer y el LED. La funci√≥n ``off()`` se utiliza para apagar el buzzer y el LED.

   .. code-block:: python

       def on():
           """ Turn on the buzzer and LED. """
           BeepPin.on()
           ALedPin.on()

       def off():
           """ Turn off the buzzer and LED. """
           BeepPin.off()
           ALedPin.off()

#. Define una funci√≥n ``beep()`` para hacer que el buzzer y el LED emitan sonidos y parpadeen en un intervalo determinado por ``dt``.

   .. code-block:: python

       def beep(dt):  # dt para el tiempo de retraso.
           """
           Produce a beep sound and LED flash for the specified duration.
           :param dt: Duration for the beep and flash.
           """
           on()
           time.sleep(dt)
           off()
           time.sleep(dt)

#. La funci√≥n ``morsecode()`` se utiliza para procesar el c√≥digo Morse de los caracteres de entrada, haciendo que el ‚Äú1‚Äù del c√≥digo emita sonidos o luces y el ‚Äú0‚Äù emita sonidos o luces brevemente. Por ejemplo, al ingresar ‚ÄúSOS‚Äù, habr√° una se√±al que contiene tres cortos, tres largos y luego tres cortos segmentos ‚Äú ¬∑ ¬∑ ¬∑ - - - ¬∑ ¬∑ ¬∑ ‚Äù.

   .. code-block:: python

       def morsecode(code):
           """
           Convert the input code into Morse code and signal it using the buzzer and LED.
           :param code: The text to be converted to Morse code.
           """
           pause = 0.25
           for letter in code:
               for tap in MORSECODE[letter]:
                   if tap == '0':
                       beep(pause / 2)  # Pitido corto para el punto
                   if tap == '1':
                       beep(pause)      # Pitido largo para la raya
               time.sleep(pause)  # Pausa entre letras

#. Define una funci√≥n llamada ``destroy`` que apaga tanto el buzzer como el LED. Esta funci√≥n est√° destinada a ser llamada cuando se termina el script para asegurarse de que los pines GPIO no queden en un estado activo.

   .. code-block:: python

       def destroy():
           """ Clean up resources on script termination. """
           print("")
           BeepPin.off()
           ALedPin.off()

#. Cuando se escriben los caracteres relevantes con el teclado, ``upper()`` convertir√° las letras ingresadas a su forma en may√∫sculas. ``print()`` luego imprime el texto claro en la pantalla de la computadora, y la funci√≥n ``morsecode()`` hace que el buzzer y el LED emitan el c√≥digo Morse.

   .. code-block:: python

       try:
           while True:
               code = input("Please input the messenger:")
               code = code.upper()  # Convertir a may√∫sculas para la b√∫squeda de c√≥digo Morse
               print(code)
               morsecode(code)
       except KeyboardInterrupt:
           destroy()

