 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.16_py_pi5:

4.1.13 G√©n√©rateur de code Morse
=========================================

Introduction
-----------------

Dans ce projet, nous allons cr√©er un g√©n√©rateur de code Morse, o√π vous saisirez
une s√©rie de lettres anglaises dans le Raspberry Pi pour qu'elles soient converties
en code Morse.

Composants n√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.16_morse_code_generator_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Sch√©ma
-----------------------

============ ======== ======== ===
Nom T-Board  physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.16_morse_code_generator_schematic.png
   :align: center

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit. (Attention aux p√¥les du buzzer :
celui avec l'√©tiquette + est le p√¥le positif et l'autre est le
n√©gatif.)

.. image:: ../python_pi5/img/4.1.16_morse_code_generator_circuit.png

**√âtape 2 :** Ouvrir le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.16_MorseCodeGenerator_zero.py

Apr√®s le d√©marrage du programme, tapez une s√©rie de caract√®res, et le buzzer ainsi
que la LED enverront les signaux correspondants en code Morse.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Buzzer, LED
   import time

   # Initialize Buzzer and LED to GPIO pins
   BeepPin = Buzzer(22)
   ALedPin = LED(17)

   # Morse code representation for characters
   MORSECODE = {
       'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110',
       'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10',
       'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',
       'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100',
       '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000',
       '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111',
       '?': '001100', '/': '10010', ',': '110011', '.': '010101', ';': '101010',
       '!': '101011', '@': '011010', ':': '111000',
   }

   def on():
       """ Turn on the buzzer and LED. """
       BeepPin.on()
       ALedPin.on()

   def off():
       """ Turn off the buzzer and LED. """
       BeepPin.off()
       ALedPin.off()

   def beep(dt):  # dt for delay time.
       """
       Produce a beep sound and LED flash for the specified duration.
       :param dt: Duration for the beep and flash.
       """
       on()
       time.sleep(dt)
       off()
       time.sleep(dt)

   def morsecode(code):
       """
       Convert the input code into Morse code and signal it using the buzzer and LED.
       :param code: The text to be converted to Morse code.
       """
       pause = 0.25
       for letter in code:
           for tap in MORSECODE[letter]:
               if tap == '0':
                   beep(pause / 2)  # Short beep for dot
               if tap == '1':
                   beep(pause)      # Long beep for dash
           time.sleep(pause)  # Pause between letters

   def destroy():
       """ Clean up resources on script termination. """
       print("")
       BeepPin.off()
       ALedPin.off()

   try:
       while True:
           code = input("Please input the messenger:")
           code = code.upper()  # Convert to uppercase for Morse code lookup
           print(code)
           morsecode(code)
   except KeyboardInterrupt:
       destroy()


**Explication du code**

#. Ce code importe les classes Buzzer et LED de la biblioth√®que gpiozero. Ces classes sont essentielles pour contr√¥ler les dispositifs GPIO correspondants sur le Raspberry Pi.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Buzzer, LED
       import time

#. Initialise le buzzer sur la broche GPIO 22 et la LED sur la broche GPIO 17, facilitant le contr√¥le de ces composants.

   .. code-block:: python

       # Initialize Buzzer and LED to GPIO pins
       BeepPin = Buzzer(22)
       ALedPin = LED(17)

#. D√©finit la structure ``MORSE``, un dictionnaire contenant les repr√©sentations en code Morse pour les caract√®res de A √† Z, les nombres de 0 √† 9, et des symboles comme ‚Äú?‚Äù, ‚Äú/‚Äù, ‚Äú:‚Äù, ‚Äú,‚Äù, ‚Äú.‚Äù, ‚Äú;‚Äù, ‚Äú!‚Äù, ‚Äú@‚Äù, avec ``0`` signifiant un point et ``1`` indiquant un tiret.

   .. code-block:: python

       # Morse code representation for characters
       MORSECODE = {
           'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110',
           'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10',
           'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',
           'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100',
           '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000',
           '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111',
           '?': '001100', '/': '10010', ',': '110011', '.': '010101', ';': '101010',
           '!': '101011', '@': '011010', ':': '111000',
       }

#. La fonction ``on()`` d√©marre le buzzer et la LED. La fonction ``off()`` est utilis√©e pour √©teindre le buzzer et la LED.

   .. code-block:: python

       def on():
           """ Turn on the buzzer and LED. """
           BeepPin.on()
           ALedPin.on()

       def off():
           """ Turn off the buzzer and LED. """
           BeepPin.off()
           ALedPin.off()

#. D√©finit une fonction ``beep()`` pour faire √©mettre au buzzer et √† la LED des sons et des clignotements √† un certain intervalle de ``dt``.

   .. code-block:: python

       def beep(dt):  # dt for delay time.
           """
           Produce a beep sound and LED flash for the specified duration.
           :param dt: Duration for the beep and flash.
           """
           on()
           time.sleep(dt)
           off()
           time.sleep(dt)

#. La fonction ``morsecode()`` est utilis√©e pour traiter le code Morse des caract√®res entr√©s en faisant √©mettre des sons ou des lumi√®res pour les ‚Äú1‚Äù du code et bri√®vement pour les ‚Äú0‚Äù, par exemple, en entrant ‚ÄúSOS‚Äù, il y aura un signal contenant trois courts, trois longs puis trois courts segments ‚Äú ¬∑ ¬∑ ¬∑ - - - ¬∑ ¬∑ ¬∑ ‚Äù.

   .. code-block:: python

       def morsecode(code):
           """
           Convert the input code into Morse code and signal it using the buzzer and LED.
           :param code: The text to be converted to Morse code.
           """
           pause = 0.25
           for letter in code:
               for tap in MORSECODE[letter]:
                   if tap == '0':
                       beep(pause / 2)  # Short beep for dot
                   if tap == '1':
                       beep(pause)      # Long beep for dash
               time.sleep(pause)  # Pause between letters

#. Defines a function named ``destroy`` that turns off both the buzzer and the LED. This function is intended to be called when the script is terminated to ensure that the GPIO pins are not left in an active state.

   .. code-block:: python

       def destroy():
           """ Clean up resources on script termination. """
           print("")
           BeepPin.off()
           ALedPin.off()

#. When you type the relevant characters with the keyboard, ``upper()`` will convert the input letters to their capital form. ``printf()`` then prints the clear text on the computer screen, and the ``morsecod()`` function causes the buzzer and the LED to emit Morse code.

   .. code-block:: python

       try:
           while True:
               code = input("Please input the messenger:")
               code = code.upper()  # Convert to uppercase for Morse code lookup
               print(code)
               morsecode(code)
       except KeyboardInterrupt:
           destroy()

