 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.8_py_pi5:

2.1.8 Clavier
================

Introduction
----------------

Un clavier est un ensemble rectangulaire de boutons. Dans ce projet, nous l'utiliserons pour entrer des caract√®res.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.8_keypad_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_keypad`
        - \-

Sch√©ma
-----------

.. image:: ../python_pi5/img/2.1.8_keypad_chematic_1.png


.. image:: ../python_pi5/img/2.1.8_keypad_chematic_2.png


Proc√©dures exp√©rimentales
------------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.8_keypad_circuit.png

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.8_Keypad_zero.py

Apr√®s l'ex√©cution du code, les valeurs des boutons press√©s sur le clavier
 (valeur des boutons) seront affich√©es √† l'√©cran.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DigitalOutputDevice, Button
   from time import sleep

   class Keypad:
       def __init__(self, rows_pins, cols_pins, keys):
           """
           Initialize the Keypad with specified row and column pins and keypad layout.
           :param rows_pins: List of GPIO pins for the rows.
           :param cols_pins: List of GPIO pins for the columns.
           :param keys: List of keys in the keypad layout.
           """
           # Initialize row pins as DigitalOutputDevice
           self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]
           # Initialize column pins as Buttons
           self.cols = [Button(pin, pull_up=False) for pin in cols_pins]
           self.keys = keys  # Set the keypad layout

       def read(self):
           """
           Read the currently pressed keys on the keypad.
           :return: A list of pressed keys.
           """
           pressed_keys = []
           # Scan each row and column to identify pressed keys
           for i, row in enumerate(self.rows):
               row.on()  # Enable the current row
               for j, col in enumerate(self.cols):
                   if col.is_pressed:  # Check if the column button is pressed
                       # Calculate the key index based on row and column
                       index = i * len(self.cols) + j
                       pressed_keys.append(self.keys[index])
               row.off()  # Disable the current row
           return pressed_keys

   try:
       # Configure rows, columns, and keypad layout
       rows_pins = [18, 23, 24, 25]
       cols_pins = [10, 22, 27, 17]
       keys = ["1", "2", "3", "A",
               "4", "5", "6", "B",
               "7", "8", "9", "C",
               "*", "0", "#", "D"]

       # Create an instance of the Keypad class
       keypad = Keypad(rows_pins, cols_pins, keys)
       last_key_pressed = []

       # Continuously read the keypad and print newly pressed keys
       while True:
           pressed_keys = keypad.read()
           if pressed_keys and pressed_keys != last_key_pressed:
               print(pressed_keys)  # Print the list of pressed keys
               last_key_pressed = pressed_keys
           sleep(0.1)  # Short delay to reduce CPU load

   except KeyboardInterrupt:
       # Handle a keyboard interrupt (Ctrl+C) for a clean exit
       pass


**Explication du code**

#. Importe les classes ``DigitalOutputDevice`` et ``Button`` de la biblioth√®que ``gpiozero``, ainsi que la fonction ``sleep`` pour les d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import DigitalOutputDevice, Button
       from time import sleep

#. D√©finit la classe ``Keypad``. La m√©thode ``__init__`` initialise le clavier avec les broches de lignes et de colonnes sp√©cifi√©es et les touches. La m√©thode ``read`` scanne le clavier et renvoie une liste des touches press√©es.

   .. code-block:: python

       class Keypad:
           def __init__(self, rows_pins, cols_pins, keys):
               """
               Initialize the Keypad with specified row and column pins and keypad layout.
               :param rows_pins: List of GPIO pins for the rows.
               :param cols_pins: List of GPIO pins for the columns.
               :param keys: List of keys in the keypad layout.
               """
               # Initialize row pins as DigitalOutputDevice
               self.rows = [DigitalOutputDevice(pin) for pin in rows_pins]
               # Initialize column pins as Buttons
               self.cols = [Button(pin, pull_up=False) for pin in cols_pins]
               self.keys = keys  # Set the keypad layout

           def read(self):
               """
               Read the currently pressed keys on the keypad.
               :return: A list of pressed keys.
               """
               pressed_keys = []
               # Scan each row and column to identify pressed keys
               for i, row in enumerate(self.rows):
                   row.on()  # Enable the current row
                   for j, col in enumerate(self.cols):
                       if col.is_pressed:  # Check if the column button is pressed
                           # Calculate the key index based on row and column
                           index = i * len(self.cols) + j
                           pressed_keys.append(self.keys[index])
                   row.off()  # Disable the current row
               return pressed_keys

#. Configure les broches GPIO pour les lignes et les colonnes et d√©finit la disposition du clavier.

   .. code-block:: python

       try:
           # Configure rows, columns, and keypad layout
           rows_pins = [18, 23, 24, 25]
           cols_pins = [10, 22, 27, 17]
           keys = ["1", "2", "3", "A",
                   "4", "5", "6", "B",
                   "7", "8", "9", "C",
                   "*", "0", "#", "D"]

#. Cr√©e une instance de la classe ``Keypad`` avec la configuration sp√©cifi√©e.

   .. code-block:: python

       try:
           ...

           # Create an instance of the Keypad class
           keypad = Keypad(rows_pins, cols_pins, keys)
           last_key_pressed = []

#. Lit continuellement le clavier pour les touches press√©es, imprime les changements d'√©tat des touches et introduit un court d√©lai pour r√©duire la charge du CPU. Intercepte un KeyboardInterrupt (comme Ctrl+C) pour permettre une sortie propre du script.

   .. code-block:: python

       try:
           ...

           # Continuously read the keypad and print newly pressed keys
           while True:
               pressed_keys = keypad.read()
               if pressed_keys and pressed_keys != last_key_pressed:
                   print(pressed_keys)  # Print the list of pressed keys
                   last_key_pressed = pressed_keys
               sleep(0.1)  # Short delay to reduce CPU load

       except KeyboardInterrupt:
           # Handle a keyboard interrupt (Ctrl+C) for a clean exit
           pass

