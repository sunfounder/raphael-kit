 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.9_py_pi5:

4.1.6 Alarme de Recul
======================================

Introduction
-------------

Dans ce projet, nous utiliserons un √©cran LCD, un buzzer et des capteurs √† 
ultrasons pour cr√©er un syst√®me d'assistance au recul. Nous pouvons le placer 
sur une voiture t√©l√©command√©e pour simuler le processus r√©el de recul de la 
voiture dans le garage.

Composants n√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.9_reversing_alarm_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
        - |link_ultrasonic_buy|
    *   - :ref:`cpn_i2c_lcd`
        - |link_i2clcd1602_buy|

Sch√©ma
--------------------

Le capteur √† ultrasons d√©tecte la distance entre lui-m√™me et l'obstacle, 
qui sera affich√©e sur l'√©cran LCD sous forme de code. En m√™me temps, le 
capteur √† ultrasons fait √©mettre au buzzer un son d'alerte de fr√©quence 
diff√©rente selon la valeur de la distance.

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO17       Pin 11   0        17
SDA1         Pin 3             
SCL1         Pin 5             
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.9_reversing_alarm_schematic.png
   :align: center

Proc√©dures exp√©rimentales
--------------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/4.1.9_reversing_alarm_circuit.png
    :align: center

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.9_ReversingAlarm_zero.py

Lorsque le code s'ex√©cute, le module de capteur √† ultrasons d√©tecte la 
distance √† l'obstacle et affiche l'information sur la distance sur l'√©cran 
LCD1602 ; de plus, le buzzer √©met un son d'alerte dont la fr√©quence change 
en fonction de la distance.

.. note::

    * Si vous obtenez l'erreur ``FileNotFoundError: [Errno 2] No such file or directory: '/dev/i2c-1'``, vous devez vous r√©f√©rer √† :ref:`i2c_config` pour activer l'I2C.
    * Si vous obtenez l'erreur ``ModuleNotFoundError: No module named 'smbus2'``, veuillez ex√©cuter ``sudo pip3 install smbus2``.
    * Si l'erreur ``OSError: [Errno 121] Remote I/O error`` appara√Æt, cela signifie que le module est mal c√¢bl√© ou que le module est d√©fectueux.
    * Si le code et le c√¢blage sont corrects, mais que l'√©cran LCD ne montre toujours pas de contenu, vous pouvez tourner le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3
    import LCD1602
    import time
    from gpiozero import DistanceSensor, Buzzer

    # Initialize the ultrasonic sensor with GPIO pins
    sensor = DistanceSensor(echo=24, trigger=23)  # Echo pin is GPIO 24, Trigger pin is GPIO 23

    # Initialize the buzzer connected to GPIO pin 17
    buzzer = Buzzer(17)

    def lcdsetup():
        # Initialize the LCD with I2C address and enable backlight
        LCD1602.init(0x27, 1)  # 0x27 is the I2C address of the LCD
        LCD1602.clear()  # Clear the LCD display
        # Display startup messages on LCD
        LCD1602.write(0, 0, 'Ultrasonic Starting')
        LCD1602.write(1, 1, 'By SunFounder')
        time.sleep(2)  # Wait for 2 seconds

    def distance():
        # Calculate and return the distance measured by the sensor
        dis = sensor.distance * 100  # Convert distance to centimeters
        print('Distance: {:.2f} cm'.format(dis))  # Print distance with two decimal places
        time.sleep(0.3)  # Wait for 0.3 seconds before next measurement
        return dis

    def loop():
        # Continuously measure distance and update LCD and buzzer
        while True:
            dis = distance()  # Get the current distance
            # Display distance and handle alerts based on distance
            if dis > 400:  # Check if distance is out of range
                LCD1602.clear()
                LCD1602.write(0, 0, 'Error')
                LCD1602.write(3, 1, 'Out of range')
                time.sleep(0.5)
            else:
                # Display current distance on LCD
                LCD1602.clear()
                LCD1602.write(0, 0, 'Distance is')
                LCD1602.write(5, 1, str(round(dis, 2)) + ' cm')
                # Adjust buzzer frequency based on distance
                if dis >= 50:
                    time.sleep(0.5)
                elif 20 < dis < 50:
                    # Medium distance: medium buzzer frequency
                    for _ in range(2):
                        buzzer.on()
                        time.sleep(0.05)
                        buzzer.off()
                        time.sleep(0.2)
                elif dis <= 20:
                    # Close distance: high buzzer frequency
                    for _ in range(5):
                        buzzer.on()
                        time.sleep(0.05)
                        buzzer.off()
                        time.sleep(0.05)

    try:
        lcdsetup()  # Setup the LCD display
        loop()      # Start the measurement loop
    except KeyboardInterrupt:
        # Turn off buzzer and clear LCD on user interrupt (e.g., Ctrl+C)
        buzzer.off()
    LCD1602.clear()



**Explication du code**

#. Ce script utilise plusieurs biblioth√®ques pour son fonctionnement. La biblioth√®que ``LCD1602`` g√®re l'affichage LCD, tandis que ``time`` fournit des fonctions li√©es au temps. La biblioth√®que ``gpiozero`` est essentielle pour les interactions avec les broches GPIO du Raspberry Pi, en particulier pour l'utilisation du capteur de distance (DistanceSensor) et du buzzer.

   .. code-block:: python

       #!/usr/bin/env python3
       import LCD1602
       import time
       from gpiozero import DistanceSensor, Buzzer

#. Le capteur √† ultrasons est configur√© avec ses broches √©cho et trigger connect√©es aux broches GPIO 24 et 23, respectivement. De plus, un buzzer est connect√© √† la broche GPIO 17.

   .. code-block:: python

       # Initialize the ultrasonic sensor with GPIO pins
       sensor = DistanceSensor(echo=24, trigger=23)  # Echo pin is GPIO 24, Trigger pin is GPIO 23

       # Initialize the buzzer connected to GPIO pin 17
       buzzer = Buzzer(17)

#. L'initialisation de l'√©cran LCD implique de l'effacer et d'afficher un message de d√©marrage.

   .. code-block:: python

       def lcdsetup():
           # Initialize the LCD with I2C address and enable backlight
           LCD1602.init(0x27, 1)  # 0x27 is the I2C address of the LCD
           LCD1602.clear()  # Clear the LCD display
           # Display startup messages on LCD
           LCD1602.write(0, 0, 'Ultrasonic Starting')
           LCD1602.write(1, 1, 'By SunFounder')
           time.sleep(2)  # Wait for 2 seconds

#. La fonction ``distance`` calcule la distance mesur√©e par le capteur √† ultrasons et l'affiche, en renvoyant la valeur en centim√®tres.

   .. code-block:: python

       def distance():
           # Calculate and return the distance measured by the sensor
           dis = sensor.distance * 100  # Convert distance to centimeters
           print('Distance: {:.2f} cm'.format(dis))  # Print distance with two decimal places
           time.sleep(0.3)  # Wait for 0.3 seconds before next measurement
           return dis

#. La boucle principale mesure continuellement la distance, mettant √† jour √† la fois l'√©cran LCD et le buzzer. Elle g√®re diff√©rentes plages de distance avec des actions sp√©cifiques, comme l'affichage de messages d'erreur ou la variation des fr√©quences du buzzer en fonction de la distance mesur√©e.

   .. code-block:: python

       def loop():
           # Continuously measure distance and update LCD and buzzer
           while True:
               dis = distance()  # Get the current distance
               # Display distance and handle alerts based on distance
               if dis > 400:  # Check if distance is out of range
                   LCD1602.clear()
                   LCD1602.write(0, 0, 'Error')
                   LCD1602.write(3, 1, 'Out of range')
                   time.sleep(0.5)
               else:
                   # Display current distance on LCD
                   LCD1602.clear()
                   LCD1602.write(0, 0, 'Distance is')
                   LCD1602.write(5, 1, str(round(dis, 2)) + ' cm')
                   # Adjust buzzer frequency based on distance
                   if dis >= 50:
                       time.sleep(0.5)
                   elif 20 < dis < 50:
                       # Medium distance: medium buzzer frequency
                       for _ in range(2):
                           buzzer.on()
                           time.sleep(0.05)
                           buzzer.off()
                           time.sleep(0.2)
                   elif dis <= 20:
                       # Close distance: high buzzer frequency
                       for _ in range(5):
                           buzzer.on()
                           time.sleep(0.05)
                           buzzer.off()
                           time.sleep(0.05)

#. Lors de l'ex√©cution, le script configure l'√©cran LCD et entre dans la boucle principale. Il peut √™tre interrompu avec une commande clavier (Ctrl+C), ce qui √©teint le buzzer et efface l'√©cran LCD.

   .. code-block:: python

       try:
           lcdsetup()  # Setup the LCD display
           loop()      # Start the measurement loop
       except KeyboardInterrupt:
           # Turn off buzzer and clear LCD on user interrupt (e.g., Ctrl+C)
           buzzer.off()
           LCD1602.clear()
