 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.2_py_pi5:

1.1.2 LED RVB
====================

Introduction
--------------

Dans ce projet, nous allons contr√¥ler une LED RVB pour afficher diverses couleurs.

Composants n√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/1.1.2_rgb_led_list.png
    :align: center

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|


Sch√©ma de c√¢blage
-----------------------

Apr√®s avoir connect√© les broches R, G et B √† une r√©sistance de limitation de courant, connectez-les respectivement aux GPIO17, GPIO18 et GPIO27. La broche la plus longue (GND) de la LED se connecte √† la masse (GND) du Raspberry Pi. Lorsque les trois broches re√ßoivent diff√©rentes valeurs PWM, la LED RVB affichera diff√©rentes couleurs.

============ ======== ===
Nom T-Board  Physique BCM
GPIO17       Pin 11   17
GPIO18       Pin 12   18
GPIO27       Pin 13   27
============ ======== ===

.. image:: ../python_pi5/img/1.1.2_rgb_led_schematic.png

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/1.1.2_rgbLed_circuit.png

**√âtape 2 :** Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.2_rgbLed_zero.py

Apr√®s l'ex√©cution du code, vous verrez que la LED RVB affiche rouge, vert, bleu, jaune, rose et cyan.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import RGBLED
   from time import sleep

   # Define a list of colors for the RGB LED in RGB format (Red, Green, Blue).
   # Each color component ranges from 0 (off) to 1 (full intensity).
   COLORS = [(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 0), (1, 0, 1), (0, 1, 1)]

   # Initialize an RGB LED. Connect the red component to GPIO 17, green to GPIO 18, and blue to GPIO 27.
   rgb_led = RGBLED(red=17, green=18, blue=27)

   try:
       # Continuously cycle through the defined colors.
       while True:
           for color in COLORS:
               # Set the RGB LED to the current color.
               rgb_led.color = color
               # Output the current color to the console.
               print(f"Color set to: {color}")
               # Wait for 1 second before switching to the next color.
               sleep(1)

   except KeyboardInterrupt:
       # Handle a KeyboardInterrupt (Ctrl+C) to exit the loop gracefully.
       # GPIO cleanup will be managed automatically by GPIO Zero on script termination.
       pass


**Explication du code**

#. Cette section importe la classe ``RGBLED`` de la biblioth√®que ``gpiozero`` pour contr√¥ler une LED RVB, et la biblioth√®que ``time`` pour impl√©menter des d√©lais dans le code.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import RGBLED
       from time import sleep

       # Define a list of colors for the RGB LED in RGB format (Red, Green, Blue).
       # Each color component ranges from 0 (off) to 1 (full intensity).

#. La liste ``COLORS`` contient des tuples repr√©sentant diff√©rentes couleurs au format RVB. En attribuant diff√©rentes valeurs de modulation de largeur d'impulsion (PWM) √† chacune des broches R, G et B via l'attribut ``rgb_led.color``, la LED peut produire une vari√©t√© de couleurs. Les valeurs PWM varient de 0 √† 1, o√π 0 repr√©sente aucune intensit√© (√©teint) et 1 repr√©sente une intensit√© maximale pour chaque composant de couleur.
#. Par exemple, r√©gler ``rgb_led.color = (1, 0, 0)`` rend la LED rouge, car cela met l'intensit√© maximale pour le composant rouge tout en √©teignant les composants vert et bleu. De m√™me, des combinaisons vari√©es de ces valeurs produisent diff√©rentes couleurs. Cette technique de m√©lange des couleurs par PWM permet de cr√©er une large gamme de couleurs sur la LED RVB.

   .. code-block:: python    
       
       COLORS = [(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 0), (1, 0, 1), (0, 1, 1)]

#. Une LED RVB est initialis√©e avec ses composants rouge, vert et bleu connect√©s respectivement aux broches GPIO 17, 18 et 27.

   .. code-block:: python

       # Initialize an RGB LED. Connect the red component to GPIO 17, green to GPIO 18, and blue to GPIO 27.
       rgb_led = RGBLED(red=17, green=18, blue=27)

#. La boucle ``while True:`` parcourt en continu les couleurs d√©finies dans ``COLORS``. Pour chaque couleur, ``rgb_led.color = color`` r√®gle la LED sur cette couleur, et ``sleep(1)`` fait une pause de 1 seconde.

   .. code-block:: python

       try:
           # Continuously cycle through the defined colors.
           while True:
               for color in COLORS:
                   # Set the RGB LED to the current color.
                   rgb_led.color = color
                   # Output the current color to the console.
                   print(f"Color set to: {color}")
                   # Wait for 1 second before switching to the next color.
                   sleep(1)

#. Cette section g√®re proprement une ``KeyboardInterrupt`` (comme appuyer sur Ctrl+C). L'instruction ``pass`` est utilis√©e comme un espace r√©serv√© pour indiquer qu'aucune action sp√©cifique n'est entreprise lors de l'interruption, car GPIO Zero g√®re automatiquement le nettoyage des GPIO.

   .. code-block:: python

       except KeyboardInterrupt:
           # Handle a KeyboardInterrupt (Ctrl+C) to exit the loop gracefully.
           # GPIO cleanup will be managed automatically by GPIO Zero on script termination.
           pass

