.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete m√°s en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _2.2.3_py_pi5:

2.2.3 DHT-11
===============

Introducci√≥n
------------------

El sensor digital de temperatura y humedad DHT11 es un sensor compuesto que 
contiene una salida de se√±al digital calibrada de temperatura y humedad. 
Se aplica la tecnolog√≠a de m√≥dulos digitales dedicados y la tecnolog√≠a de 
detecci√≥n de temperatura y humedad para asegurar que el producto tenga alta 
fiabilidad y excelente estabilidad.

Los sensores incluyen un sensor resistivo de elemento h√∫medo y un sensor de 
temperatura NTC, y est√°n conectados a un microcontrolador de alto rendimiento 
de 8 bits.

Componentes necesarios
---------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/list_2.2.3_dht-11.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - COMPONENTES EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_humiture_sensor`
        - |link_humiture_buy|

Diagrama esquem√°tico
---------------------------

.. image:: ../img/image326.png


Procedimientos experimentales
------------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../img/image207.png

**Paso 2:** Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python_pi5/

**Paso 3:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.3_DHT.py

Despu√©s de ejecutar el c√≥digo, el programa imprimir√° la temperatura y la humedad 
detectadas por el DHT11 en la pantalla de la computadora.

.. warning::

    Si recibe el mensaje de error ``RuntimeError: Cannot determine SOC peripheral base address``, consulte :ref:`faq_soc`

**C√≥digo**

.. nota::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python_pi5``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.


.. raw:: html

    <run></run>

.. code-block:: python

   from gpiozero import OutputDevice, InputDevice
   import time


   class DHT11():
      MAX_DELAY_COUINT = 100
      BIT_1_DELAY_COUNT = 10
      BITS_LEN = 40

      def __init__(self, pin, pull_up=False):
         self._pin = pin
         self._pull_up = pull_up


      def read_data(self):
         bit_count = 0
         delay_count = 0
         bits = ""

         # -------------- send start --------------
         gpio = OutputDevice(self._pin)
         gpio.off()
         time.sleep(0.02)

         gpio.close()
         gpio = InputDevice(self._pin, pull_up=self._pull_up)

         # -------------- wait response --------------
         while gpio.value == 1:
               pass
         
         # -------------- read data --------------
         while bit_count < self.BITS_LEN:
               while gpio.value == 0:
                  pass

               # st = time.time()
               while gpio.value == 1:
                  delay_count += 1
                  # break
                  if delay_count > self.MAX_DELAY_COUINT:
                     break
               if delay_count > self.BIT_1_DELAY_COUNT:
                  bits += "1"
               else:
                  bits += "0"

               delay_count = 0
               bit_count += 1

         # -------------- verify --------------
         humidity_integer = int(bits[0:8], 2)
         humidity_decimal = int(bits[8:16], 2)
         temperature_integer = int(bits[16:24], 2)
         temperature_decimal = int(bits[24:32], 2)
         check_sum = int(bits[32:40], 2)

         _sum = humidity_integer + humidity_decimal + temperature_integer + temperature_decimal

         # print(bits)
         # print(humidity_integer, humidity_decimal, temperature_integer, temperature_decimal)
         # print(f'sum:{_sum}, check_sum:{check_sum}')
         # print()

         if check_sum != _sum:
               humidity = 0.0
               temperature = 0.0
         else:
               humidity = float(f'{humidity_integer}.{humidity_decimal}')
               temperature = float(f'{temperature_integer}.{temperature_decimal}')

         # -------------- return --------------
         return humidity, temperature


   if __name__ == '__main__':
      dht11 = DHT11(17)
      while True:
         humidity, temperature = dht11.read_data()
         print(f"{time.time():.3f}  temperature:{temperature}¬∞C  humidity: {humidity}%")
         time.sleep(2) 

**Explicaci√≥n del C√≥digo**

.. code-block:: python

    def read_data(self):
        bit_count = 0
        delay_count = 0
        bits = ""

        # -------------- send start --------------
        gpio = OutputDevice(self._pin)
        gpio.off()
        time.sleep(0.02)

        gpio.close()
        gpio = InputDevice(self._pin, pull_up=self._pull_up)
        #...

Esta funci√≥n se utiliza para implementar las funciones del DHT11. Almacena los datos 
detectados en la matriz ``bits[]``. El DHT11 transmite datos de 40 bits a la vez. 
Los primeros 16 bits est√°n relacionados con la humedad, los 16 bits del medio est√°n 
relacionados con la temperatura, y los √∫ltimos ocho bits se utilizan para la verificaci√≥n. 
El formato de los datos es:

**8 bits de datos enteros de humedad** + **8 bits de datos decimales de humedad** 
+ **8 bits de datos enteros de temperatura** + **8 bits de datos decimales de temperatura** 
+ **8 bits de bits de verificaci√≥n**.

Cuando se detecta la validez a trav√©s del bit de verificaci√≥n, la funci√≥n devuelve 
dos resultados: 1. error; 2. humedad y temperatura.

.. code-block:: python

   _sum = humidity_integer + humidity_decimal + temperature_integer + temperature_decimal

   if check_sum != _sum:
      humidity = 0.0
      temperature = 0.0
   else:
      humidity = float(f'{humidity_integer}.{humidity_decimal}')
      temperature = float(f'{temperature_integer}.{temperature_decimal}')



Por ejemplo, si los datos recibidos son 00101011 (valor de 8 bits del entero de humedad) 
00000000 (valor de 8 bits del decimal de humedad) 00111100 (valor de 8 bits del entero de 
temperatura) 00000000 (valor de 8 bits del decimal de temperatura) 01100111 (bit de verificaci√≥n)

**C√°lculo:**

00101011 + 00000000 + 00111100 + 00000000 = 01100111.

Si el resultado final es diferente al bit de verificaci√≥n, la transmisi√≥n 
de datos es anormal: devuelve False.

Si el resultado final es igual al bit de verificaci√≥n, los datos recibidos 
son correctos, entonces se devolver√°n ``humidity`` y ``temperature``, y se mostrar√° 
‚ÄúHumedad = 43%, Temperatura = 60¬∞C‚Äù.
