 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.3_py_pi5:

2.1.3 Module de Commutateur Tactile
=======================================

Introduction
----------------------

Dans ce projet, vous allez d√©couvrir le module de commutateur tactile. Il peut remplacer les types de commutateurs traditionnels avec ces avantages : utilisation pratique, sensation de toucher agr√©able, contr√¥le pr√©cis et usure m√©canique minimale.

Composants N√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../python_pi5/img/2.1.3_touch_switch_list.png
    :width: 700
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - PR√âSENTATION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_touch_switch`
        - |link_touch_buy|

Sch√©ma de C√¢blage
--------------------

.. image:: ../python_pi5/img/2.1.3_touch_switch_schematic.png
    :width: 500
    :align: center

Proc√©dures Exp√©rimentales
---------------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/2.1.3_touch_switch_circuit.png
    :width: 700
    :align: center

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.3_TouchSwitch_zero.py

Pendant que le code s'ex√©cute, la LED rouge s'allume ; lorsque vous appuyez sur le module de commutateur tactile, la LED jaune s'allume.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Import LED and Button classes from gpiozero
   from time import sleep  # Import sleep for delay

   # Initialize touch sensor (Button) on GPIO pin 17, pull-up resistor disabled
   touch_sensor = Button(17, pull_up=False)  # Suitable for sensors that pull the pin low when pressed

   # Initialize LED1 and LED2 connected to GPIO pins 22 and 27 respectively
   led1 = LED(22)  # LED1 connected to GPIO pin 22
   led2 = LED(27)  # LED2 connected to GPIO pin 27

   try:
       # Continuously monitor the state of the touch sensor and control LEDs accordingly
       while True:
           if touch_sensor.is_pressed:  # Check if the touch sensor is pressed
               print('You touch it!')  # Output message indicating sensor activation
               led1.off()  # Turn off LED1
               led2.on()   # Turn on LED2
           else:  # If the sensor is not pressed
               led1.on()   # Turn on LED1
               led2.off()  # Turn off LED2

           sleep(0.5)  # Pause for 0.5 seconds before rechecking the sensor state

   except KeyboardInterrupt:
       # Handle a keyboard interrupt (Ctrl+C) for a clean exit from the loop
       pass
	

**Explication du Code**

#. Cette ligne configure le script pour qu'il s'ex√©cute avec Python 3. Elle importe ``LED`` et ``Button`` de ``gpiozero`` pour contr√¥ler les dispositifs GPIO, et ``sleep`` de ``time`` pour les d√©lais.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Import LED and Button classes from gpiozero
       from time import sleep  # Import sleep for delay

#. Initialise un capteur tactile (en tant que Button) sur la broche GPIO 17 avec la r√©sistance pull-up d√©sactiv√©e, et deux LED sur les broches GPIO 22 et 27.

   .. code-block:: python

       # Initialize touch sensor (Button) on GPIO pin 17, pull-up resistor disabled
       touch_sensor = Button(17, pull_up=False)  # Suitable for sensors that pull the pin low when pressed

       # Initialize LED1 and LED2 connected to GPIO pins 22 and 27 respectively
       led1 = LED(22)  # LED1 connected to GPIO pin 22
       led2 = LED(27)  # LED2 connected to GPIO pin 27

#. La boucle principale v√©rifie l'√©tat du capteur tactile. Lorsqu'il est touch√©, LED2 s'allume et LED1 s'√©teint ; lorsqu'il n'est pas touch√©, LED1 est allum√©e et LED2 √©teinte. La boucle se r√©p√®te toutes les 0,5 secondes. Capture un KeyboardInterrupt (comme Ctrl+C) pour permettre une terminaison propre du script.

   .. code-block:: python

       try:
           # Continuously monitor the state of the touch sensor and control LEDs accordingly
           while True:
               if touch_sensor.is_pressed:  # Check if the touch sensor is pressed
                   print('You touch it!')  # Output message indicating sensor activation
                   led1.off()  # Turn off LED1
                   led2.on()   # Turn on LED2
               else:  # If the sensor is not pressed
                   led1.on()   # Turn on LED1
                   led2.off()  # Turn off LED2

               sleep(0.5)  # Pause for 0.5 seconds before rechecking the sensor state

       except KeyboardInterrupt:
           # Handle a keyboard interrupt (Ctrl+C) for a clean exit from the loop
           pass


