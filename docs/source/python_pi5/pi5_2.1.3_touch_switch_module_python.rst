.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci il mondo di Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Tecnico Esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.1.3_py_pi5:

2.1.3 Modulo Interruttore Tattile
=====================================

Introduzione
---------------------

In questo progetto imparerai a conoscere il modulo interruttore tattile. Questo pu√≤ sostituire i tipi tradizionali di interruttori con i seguenti vantaggi: operazione conveniente, piacevole sensazione al tatto, controllo preciso e minore usura meccanica.


Componenti Necessari
--------------------------------

Per questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/2.1.3_touch_switch_list.png
    :width: 700
    :align: center

√à decisamente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK D'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_touch_switch`
        - |link_touch_buy|

Schema Elettrico
--------------------

.. image:: ../python_pi5/img/2.1.3_touch_switch_schematic.png
    :width: 500
    :align: center

Procedure Sperimentali
------------------------------

**Passo 1::** Costruisci il circuito.

.. image:: ../python_pi5/img/2.1.3_touch_switch_circuit.png
    :width: 700
    :align: center

**Passo 2:** Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.3_TouchSwitch_zero.py

Mentre il codice √® in esecuzione, il LED rosso si accende; quando tocchi il modulo interruttore tattile, si accende il LED giallo.

.. warning::

    Se viene visualizzato l'errore ``RuntimeError: Cannot determine SOC peripheral base address``, fare riferimento a :ref:`faq_soc`. 

**Code**

.. note::

    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima, devi andare nella directory del codice come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Importa le classi LED e Button da gpiozero
   from time import sleep  # Importa sleep per il ritardo

   # Inizializza il sensore tattile (Button) sul pin GPIO 17, resistenza pull-up disabilitata
   touch_sensor = Button(17, pull_up=False)  # Adatto a sensori che portano il pin a basso quando premuti

   # Inizializza LED1 e LED2 collegati rispettivamente ai pin GPIO 22 e 27
   led1 = LED(22)  # LED1 collegato al pin GPIO 22
   led2 = LED(27)  # LED2 collegato al pin GPIO 27

   try:
       # Controlla continuamente lo stato del sensore tattile e gestisce i LED di conseguenza
       while True:
           if touch_sensor.is_pressed:  # Verifica se il sensore tattile √® premuto
               print('You touch it!')  # Messaggio di output che indica l'attivazione del sensore
               led1.off()  # Spegni LED1
               led2.on()   # Accendi LED2
           else:  # Se il sensore non √® premuto
               led1.on()   # Accendi LED1
               led2.off()  # Spegni LED2

           sleep(0.5)  # Pausa di 0,5 secondi prima di verificare nuovamente lo stato del sensore

   except KeyboardInterrupt:
       # Gestisci un'interruzione da tastiera (Ctrl+C) per una chiusura pulita dal ciclo
       pass


**Spiegazione del Codice**

#. Questa linea imposta lo script per essere eseguito con Python 3. Importa ``LED`` e ``Button`` da ``gpiozero`` per controllare i dispositivi GPIO, e ``sleep`` da ``time`` per i ritardi.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Importa le classi LED e Button da gpiozero
       from time import sleep  # Importa sleep per il ritardo

#. Inizializza un sensore tattile (come Button) sul pin GPIO 17 con pull-up disabilitato, e due LED sui pin GPIO 22 e 27.

   .. code-block:: python

       # Inizializza il sensore tattile (Button) sul pin GPIO 17, resistenza pull-up disabilitata
       touch_sensor = Button(17, pull_up=False)  # Adatto a sensori che portano il pin a basso quando premuti

       # Inizializza LED1 e LED2 collegati rispettivamente ai pin GPIO 22 e 27
       led1 = LED(22)  # LED1 collegato al pin GPIO 22
       led2 = LED(27)  # LED2 collegato al pin GPIO 27

#. Il ciclo principale controlla lo stato del sensore tattile. Quando toccato, LED2 si accende e LED1 si spegne; quando non toccato, LED1 √® acceso e LED2 spento. Il ciclo si ripete ogni 0,5 secondi. Gestisce un'interruzione da tastiera (come Ctrl+C) per permettere una chiusura corretta dello script.

   .. code-block:: python

       try:
           # Controlla continuamente lo stato del sensore tattile e gestisce i LED di conseguenza
           while True:
               if touch_sensor.is_pressed:  # Verifica se il sensore tattile √® premuto
                   print('You touch it!')  # Messaggio di output che indica l'attivazione del sensore
                   led1.off()  # Spegni LED1
                   led2.on()   # Accendi LED2
               else:  # Se il sensore non √® premuto
                   led1.on()   # Accendi LED1
                   led2.off()  # Spegni LED2

               sleep(0.5)  # Pausa di 0,5 secondi prima di verificare nuovamente lo stato del sensore

       except KeyboardInterrupt:
           # Gestisci un'interruzione da tastiera (Ctrl+C) per una chiusura pulita dal ciclo
           pass


