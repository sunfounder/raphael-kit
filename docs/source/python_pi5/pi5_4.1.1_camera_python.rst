 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.1_py_pi5:

4.1.1 Cam√©ra
====================

Introduction
---------------

Nous allons ici fabriquer un appareil photo avec un d√©clencheur. Lorsque vous appuyez sur le bouton, l'appareil photo prend une photo tandis que la LED clignote.

Composants n√©cessaires
--------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../python_pi5/img/4.1.1_camera_list.png
  :width: 800
  :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|

Sch√©ma de montage
-----------------------

============ ======== ======== ===
Nom T-Board  physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.1_camera_schematic.png
   :align: center

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/4.1.1_camera_circuit.png
  :width: 800
  :align: center

**√âtape 2 :** Acc√©dez au bureau du Raspberry Pi. Vous aurez peut-√™tre besoin d'un √©cran pour une meilleure exp√©rience, r√©f√©rez-vous √† : `Connect your Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Ou acc√©dez au bureau du Raspberry Pi √† distance, pour un tutoriel d√©taill√©, veuillez vous r√©f√©rer √† : :ref:`remote_desktop`.

**√âtape 3 :** Ouvrez un terminal et acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 4 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.1_Camera_zero.py

Apr√®s avoir ex√©cut√© le code, appuyez sur le bouton, le Raspberry Pi fera clignoter la LED et prendra une photo. La photo sera nomm√©e ``my_photo.jpg`` et sera stock√©e dans le r√©pertoire ``~``.

.. note::

    Vous pouvez √©galement ouvrir ``4.1.1_Camera_zero.py`` dans le chemin ``~/raphael-kit/python/`` avec un IDE Python, cliquer sur le bouton Ex√©cuter pour ex√©cuter, et arr√™ter le code avec le bouton Arr√™ter.

Si vous souhaitez t√©l√©charger la photo sur votre PC, veuillez vous r√©f√©rer √† : :ref:`filezilla`.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from picamera2 import Picamera2, Preview
   from gpiozero import LED, Button
   import time
   import os

   # Get the current user's login name and home directory
   user = os.getlogin()
   user_home = os.path.expanduser(f'~{user}')

   # Initialize the camera
   camera = Picamera2()
   camera.start()

   # Initialize a variable to track the camera's status
   global status
   status = False

   # Set up LED and button with their GPIO pin numbers
   led = LED(17)
   button = Button(18)

   def takePhotos(pin):
       """Function to set the camera's status to True when the button is pressed."""
       global status
       status = True

   try:
       # Assign the function to be called when the button is pressed
       button.when_pressed = takePhotos
       
       # Main loop
       while True:
           # Check if the button has been pressed
           if status:
               # Blink the LED five times
               for i in range(5):
                   led.on()
                   time.sleep(0.1)
                   led.off()
                   time.sleep(0.1)
               # Capture and save a photo
               camera.capture_file(f'{user_home}/my_photo.jpg')
               print('Take a photo!')          
               # Reset the status
               status = False
           else:
               # Turn off the LED if not capturing
               led.off()
           
           # Wait for a short period before checking the button status again
           time.sleep(1)

   except KeyboardInterrupt:
       # Stop the camera and turn off the LED if a KeyboardInterrupt occurs
       camera.stop_preview()
       led.off()
       pass


**Explication du code**

#. Importe les biblioth√®ques n√©cessaires pour la gestion du temps, le contr√¥le de la cam√©ra et le contr√¥le des composants GPIO.

   .. code-block:: python

       #!/usr/bin/env python3
       from picamera2 import Picamera2, Preview
       from gpiozero import LED, Button
       import time
       import os

#. R√©cup√®re le nom de connexion de l'utilisateur actuel et le r√©pertoire personnel pour enregistrer les photos.

   .. code-block:: python

       # Get the current user's login name and home directory
       user = os.getlogin()
       user_home = os.path.expanduser(f'~{user}')

#. Initialise la cam√©ra et la d√©marre.

   .. code-block:: python

       # Initialize the camera
       camera = Picamera2()
       camera.start()

#. D√©clare ``status`` comme une variable globale et l'initialise √† ``False``.

   .. code-block:: python

       # Initialize a variable to track the camera's status
       global status
       status = False

#. Initialise une LED connect√©e √† la broche GPIO 17 et un bouton connect√© √† la broche GPIO 18.

   .. code-block:: python

       # Set up LED and button with their GPIO pin numbers
       led = LED(17)
       button = Button(18)

#. D√©finit une fonction ``takePhotos`` qui d√©finit la variable globale ``status`` √† ``True`` lorsque le bouton est press√©.

   .. code-block:: python

       def takePhotos(pin):
           """Function to set the camera's status to True when the button is pressed."""
           global status
           status = True

#. Assigne la fonction ``takePhotos`` √† appeler lorsque le bouton est press√©.

   .. code-block:: python

       try:
           # Assign the function to be called when the button is pressed
           button.when_pressed = takePhotos
           
           ...
           
#. V√©rifie continuellement si le ``status`` est ``True``. Si c'est le cas, il fait clignoter la LED cinq fois, capture une photo et r√©initialise ``status``. Sinon, la LED reste √©teinte. Il y a un d√©lai de 1 seconde entre chaque it√©ration de la boucle.

   .. code-block:: python

       try:        
           ...
           
           # Main loop
           while True:
               # Check if the button has been pressed
               if status:
                   # Blink the LED five times
                   for i in range(5):
                       led.on()
                       time.sleep(0.1)
                       led.off()
                       time.sleep(0.1)
                   # Capture and save a photo
                   camera.capture_file(f'{user_home}/my_photo.jpg')
                   print('Take a photo!')          
                   # Reset the status
                   status = False
               else:
                   # Turn off the LED if not capturing
                   led.off()
               
               # Wait for a short period before checking the button status again
               time.sleep(1)

#. Capture un KeyboardInterrupt (comme Ctrl+C) et arr√™te l'aper√ßu de la cam√©ra et √©teint la LED avant de quitter.

   .. code-block:: python

       except KeyboardInterrupt:
           # Stop the camera and turn off the LED if a KeyboardInterrupt occurs
           camera.stop_preview()
           led.off()
           pass

