 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.3.1_py_pi5:

1.3.1 Moteur
=============

Introduction
-----------------

Dans ce projet, nous allons apprendre √† utiliser le L293D pour piloter un moteur 
√† courant continu (CC) et le faire tourner dans le sens horaire et antihoraire. 
Comme le moteur CC n√©cessite un courant plus important, pour des raisons de s√©curit√©, 
nous utilisons ici le module d'alimentation pour alimenter les moteurs.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../python_pi5/img/1.3.1_motor_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_power_module`
        - \-
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_motor`
        - |link_motor_buy|


Sch√©ma de c√¢blage
------------------

.. image:: ../python_pi5/img/1.3.1_motor_schematic.png


Proc√©dures exp√©rimentales
---------------------------

**√âtape 1:** Construisez le circuit.

.. image:: ../python_pi5/img/1.3.1_motor_circuit.png

.. note::
    Le module d'alimentation peut utiliser une batterie 9V avec la boucle de batterie 9V dans le kit. 
    Ins√©rez le capuchon du cavalier du module d'alimentation dans les bandes de bus 5V de la breadboard.

.. image:: ../python_pi5/img/1.3.1_motor_battery.jpeg

**√âtape 2**: Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3**: Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.1_Motor_zero.py

Lorsque le code s'ex√©cute, le moteur tourne d'abord dans le sens horaire pendant 5 secondes, 
puis s'arr√™te pendant 5 secondes. Ensuite, il tourne dans le sens antihoraire pendant 5 secondes; 
par la suite, le moteur s'arr√™te pendant 5 secondes. Cette s√©rie d'actions sera ex√©cut√©e de mani√®re r√©p√©t√©e.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Motor
   from time import sleep

   # Initialize the Motor with GPIO Zero, specifying GPIO pins for forward (17), backward (27), and enable (22) control
   motor = Motor(forward=17, backward=27, enable=22)

   try:
       # Main function to control the motor's direction and movement.
       # Alternates motor rotation between clockwise and counterclockwise with stops in between.
       actions = {'CW': motor.forward, 'CCW': motor.backward, 'STOP': motor.stop}  # Define motor actions for readability
       
       while True:
           # Loop through the defined actions to control motor direction
           for action in ['CW', 'STOP', 'CCW', 'STOP']:
               actions[action]()  # Execute the current action (forward, stop, backward, stop)
               print(f"{action}")  # Display the current action in the console
               sleep(5)  # Pause for 5 seconds before proceeding to the next action

   except KeyboardInterrupt:
       # Gracefully handle a keyboard interrupt (e.g., Ctrl+C) to stop the program
       pass


**Explication du code**

#. Ces instructions d'importation int√®grent la classe ``Motor`` de la biblioth√®que ``gpiozero`` et la fonction ``sleep`` du module ``time``.
    
   .. code-block:: python  

       #!/usr/bin/env python3
       from gpiozero import Motor
       from time import sleep
      

#. Cette ligne initialise un objet ``Motor``, en sp√©cifiant les broches GPIO pour le contr√¥le avant (17), arri√®re (27) et l'activation (22).
    
   .. code-block:: python
       
       # Initialize the Motor with GPIO Zero, specifying GPIO pins for forward (17), backward (27), and enable (22) control
       motor = Motor(forward=17, backward=27, enable=22)
      

#. Les actions pour le contr√¥le du moteur sont d√©finies dans un dictionnaire pour plus de lisibilit√©. Une boucle infinie (`while True`) parcourt ces actions, ex√©cutant chacune pendant 5 secondes.
    
   .. code-block:: python
       
       try:
           # Main function to control the motor's direction and movement.
           # Alternates motor rotation between clockwise and counterclockwise with stops in between.
           actions = {'CW': motor.forward, 'CCW': motor.backward, 'STOP': motor.stop}  # Define motor actions for readability
           
           while True:
               # Loop through the defined actions to control motor direction
               for action in ['CW', 'STOP', 'CCW', 'STOP']:
                   actions[action]()  # Execute the current action (forward, stop, backward, stop)
                   print(f"{action}")  # Display the current action in the console
                   sleep(5)  # Pause for 5 seconds before proceeding to the next action
      

#. Ce segment permet au programme d'√™tre termin√© en toute s√©curit√© en utilisant une interruption clavier (Ctrl+C) sans causer d'erreurs.
    
   .. code-block:: python
       
       except KeyboardInterrupt:
       # Gracefully handle a keyboard interrupt (e.g., Ctrl+C) to stop the program
       pass
      

