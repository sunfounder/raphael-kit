.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _4.1.7_py_pi5:

4.1.4 Z√§hlger√§t
=======================

Einf√ºhrung
-----------------

Hier erstellen wir ein Z√§hlsystem mit Anzeige, bestehend aus einem
PIR-Sensor und einer 4-stelligen Segmentanzeige. Wenn der PIR erkennt,
dass jemand vorbeigeht, wird die Zahl auf der 4-stelligen Segmentanzeige
um 1 erh√∂ht. Sie k√∂nnen diesen Z√§hler verwenden, um die Anzahl der Personen zu z√§hlen, die durch einen Durchgang gehen.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

.. image:: ../python_pi5/img/4.1.7_counting_device_list_1.png
    :align: center

.. image:: ../python_pi5/img/4.1.7_counting_device_list_2.png
    :align: center

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen diese auch separat √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_pir`
        - \-


Schaltplan
----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.7_counting_device_schematic.png
   :align: center

Experimentelle Verfahren
-----------------------------

**Schritt 1**: Bauen Sie den Schaltkreis.

.. image:: ../python_pi5/img/4.1.7_counting_device_circuit.png


**Schritt 2**: Wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3**: F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.7_CountingDevice_zero.py

Nachdem der Code ausgef√ºhrt wurde, wird die Zahl auf der 4-stelligen Segmentanzeige um 1 erh√∂ht, wenn der PIR erkennt, dass jemand vorbeigeht.

Es gibt zwei Potentiometer am PIR-Modul: eines zur Einstellung der Empfindlichkeit und das andere zur Einstellung der Erkennungsdistanz. Um das PIR-Modul besser zu nutzen, sollten Sie beide gegen den Uhrzeigersinn bis zum Anschlag drehen.

.. image:: ../python_pi5/img/4.1.7_PIR_TTE.png
    :width: 400
    :align: center

.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::
    Sie k√∂nnen den untenstehenden Code **modifizieren/zur√ºcksetzen/kopieren/ausf√ºhren/stoppen**. Bevor Sie dies tun, m√ºssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nach der √Ñnderung des Codes k√∂nnen Sie ihn direkt ausf√ºhren, um die Auswirkung zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import OutputDevice, MotionSensor

   # Initialize PIR motion sensor on GPIO 26
   pir = MotionSensor(26)

   # Initialize shift register pins
   SDI = OutputDevice(24)    # Serial Data Input
   RCLK = OutputDevice(23)   # Register Clock Input
   SRCLK = OutputDevice(18)  # Shift Register Clock Input

   # Initialize 7-segment display pins
   placePin = [OutputDevice(pin) for pin in (10, 22, 27, 17)]

   # Define digit codes for 7-segment display
   number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

   # Counter for the displayed number
   counter = 0

   def clearDisplay():
       # Clears the display by setting all segments off
       for _ in range(8):
           SDI.on()
           SRCLK.on()
           SRCLK.off()
       RCLK.on()
       RCLK.off()

   def hc595_shift(data):
       # Shifts data into the 74HC595 shift register
       for i in range(8):
           SDI.value = 0x80 & (data << i)
           SRCLK.on()
           SRCLK.off()
       RCLK.on()
       RCLK.off()

   def pickDigit(digit):
       # Activates a specific digit of the 7-segment display
       for pin in placePin:
           pin.off()
       placePin[digit].on()

   def display():
       # Updates the display with the current counter value
       global counter
       clearDisplay()
       pickDigit(0)
       hc595_shift(number[counter % 10])

       clearDisplay()
       pickDigit(1)
       hc595_shift(number[counter % 100//10])

       clearDisplay()
       pickDigit(2)
       hc595_shift(number[counter % 1000//100])

       clearDisplay()
       pickDigit(3)
       hc595_shift(number[counter % 10000//1000])

   def loop():
       # Main loop to update display and check for motion
       global counter
       currentState = 0
       lastState = 0
       while True:
           display()
           currentState = 1 if pir.motion_detected else 0
           if currentState == 1 and lastState == 0:
               counter += 1
           lastState = currentState

   try:
       loop()
   except KeyboardInterrupt:
       # Turn off all pins when the script is interrupted
       SDI.off()
       SRCLK.off()
       RCLK.off()
       pass




**Code-Erkl√§rung**


#. Diese Zeile importiert die Klassen ``OutputDevice`` und ``MotionSensor`` aus der Bibliothek ``gpiozero``. ``OutputDevice`` kann eine LED, ein Motor oder jedes Ger√§t sein, das Sie als Ausgang steuern m√∂chten. Der ``MotionSensor`` ist in der Regel ein PIR (Passiver Infrarotsensor), der zur Bewegungserkennung verwendet wird.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import OutputDevice, MotionSensor

#. Initialisiert den PIR-Bewegungssensor, der mit dem GPIO-Pin 26 verbunden ist.

   .. code-block:: python

       # Initialize PIR motion sensor on GPIO 26
       pir = MotionSensor(26)

#. Initialisiert GPIO-Pins, die mit dem Serial Data Input (SDI), Register Clock Input (RCLK) und Shift Register Clock Input (SRCLK) des Schieberegisters verbunden sind.

   .. code-block:: python

       # Initialize shift register pins
       SDI = OutputDevice(24)    # Serial Data Input
       RCLK = OutputDevice(23)   # Register Clock Input
       SRCLK = OutputDevice(18)  # Shift Register Clock Input

#. Initialisiert die Pins f√ºr jede Ziffer der 7-Segment-Anzeige und definiert die Bin√§rcodes f√ºr die Anzeige der Zahlen 0-9.

   .. code-block:: python

       # Initialize 7-segment display pins
       placePin = [OutputDevice(pin) for pin in (10, 22, 27, 17)]

       # Define digit codes for 7-segment display
       number = (0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90)

#. L√∂scht die 7-Segment-Anzeige, indem alle Segmente ausgeschaltet werden, bevor die n√§chste Ziffer angezeigt wird.

   .. code-block:: python

       def clearDisplay():
           # Clears the display by setting all segments off
           for _ in range(8):
               SDI.on()
               SRCLK.on()
               SRCLK.off()
           RCLK.on()
           RCLK.off()

#. Verschiebt ein Byte Daten in das 74HC595-Schieberegister, um die Anzeigesegmente zu steuern.

   .. code-block:: python

       def hc595_shift(data):
           # Shifts data into the 74HC595 shift register
           for i in range(8):
               SDI.value = 0x80 & (data << i)
               SRCLK.on()
               SRCLK.off()
           RCLK.on()
           RCLK.off()


#. W√§hlt aus, welche Ziffer der 7-Segment-Anzeige aktiviert werden soll. Jede Ziffer wird durch einen separaten GPIO-Pin gesteuert.

   .. code-block:: python

       def pickDigit(digit):
           # Activates a specific digit of the 7-segment display
           for pin in placePin:
               pin.off()
           placePin[digit].on()


#. Startet die Anzeige zun√§chst f√ºr die Einerziffer, gefolgt von der Aktivierung der Anzeige f√ºr die Zehnerziffer. Anschlie√üend werden die Anzeigen f√ºr die Hunderter- und Tausenderziffern in der Reihenfolge aktiviert. Diese schnelle Abfolge von Aktivierungen erzeugt die Illusion einer kontinuierlichen vierstelligen Anzeige.

   .. code-block:: python

       def display():
           # Updates the display with the current counter value
           global counter
           clearDisplay()
           pickDigit(0)
           hc595_shift(number[counter % 10])

           clearDisplay()
           pickDigit(1)
           hc595_shift(number[counter % 100//10])

           clearDisplay()
           pickDigit(2)
           hc595_shift(number[counter % 1000//100])

           clearDisplay()
           pickDigit(3)
           hc595_shift(number[counter % 10000//1000])

#. Definiert die Hauptschleife, in der die Anzeige kontinuierlich aktualisiert und der Zustand des PIR-Sensors √ºberpr√ºft wird. Wenn eine Bewegung erkannt wird, wird der Z√§hler erh√∂ht.

   .. code-block:: python

       def loop():
           # Main loop to update display and check for motion
           global counter
           currentState = 0
           lastState = 0
           while True:
               display()
               currentState = 1 if pir.motion_detected else 0
               if currentState == 1 and lastState == 0:
                   counter += 1
               lastState = currentState

#. F√ºhrt die Hauptschleife aus und stellt sicher, dass das Skript mit einem Tastaturbefehl (Ctrl+C) unterbrochen werden kann, wobei alle Pins f√ºr einen sauberen Ausstieg ausgeschaltet werden.

   .. code-block:: python

       try:
           loop()
       except KeyboardInterrupt:
           # Turn off all pins when the script is interrupted
           SDI.off()
           SRCLK.off()
           RCLK.off()
           pass



