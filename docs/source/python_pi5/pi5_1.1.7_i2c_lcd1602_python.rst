.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci il mondo di Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto tecnico esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e giveaway**: Partecipa a giveaway e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.1.7_py_pi5:

1.1.7 LCD1602 I2C
========================

Introduzione
---------------------

L'LCD1602 √® un display a cristalli liquidi di tipo caratteri, che pu√≤ visualizzare 
contemporaneamente 32 caratteri (16*2).

Componenti Necessari
-------------------------------

Per questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/1.1.7_i2c_lcd_list.png

√à decisamente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK D'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_i2c_lcd`
        - |link_i2clcd1602_buy|

Schema Elettrico
---------------------

============ ========
T-Board Name physical
SDA1         Pin 3
SCL1         Pin 5
============ ========

.. image:: ../python_pi5/img/1.1.7_i2c_lcd_schematic.png


Procedure Sperimentali
-----------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/1.1.7_i2c_lcd1602_circuit.png


**Passo 2**: Configura I2C (vedi :ref:`i2c_config`. Se hai gi√† configurato I2C, salta questo passaggio.)

**Passo 3:** Cambia la directory.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 4:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.1.7_Lcd1602_zero.py

Dopo l'esecuzione del codice, sul display LCD vedrai apparire il messaggio ``Greetings!, From SunFounder``.

.. note::

    * Se ricevi l'errore ``FileNotFoundError: [Errno 2] No such file or directory: '/dev/i2c-1'``, devi consultare :ref:`i2c_config` per abilitare I2C.
    * Se ricevi l'errore ``ModuleNotFoundError: No module named 'smbus2'``, esegui il comando ``sudo pip3 install smbus2``.
    * Se compare l'errore ``OSError: [Errno 121] Remote I/O error``, significa che il modulo √® collegato in modo errato o √® danneggiato.
    * Se il codice e il cablaggio sono corretti, ma l'LCD non visualizza contenuti, prova a regolare il potenziometro sul retro per aumentare il contrasto.



.. warning::

    Se viene visualizzato l'errore ``RuntimeError: Cannot determine SOC peripheral base address``, fare riferimento a :ref:`faq_soc`. 

**Code** 

.. note::

    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima, devi andare nella directory del codice come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   import LCD1602  # Importa il modulo per interfacciarsi con LCD1602
   import time     # Importa il modulo per le funzioni di temporizzazione

   def setup():
       # Inizializza l'LCD con l'indirizzo I2C 0x27 e abilita la retroilluminazione
       LCD1602.init(0x27, 1) 
       # Visualizza il messaggio 'Greetings!' nell'angolo in alto a sinistra (riga 0, colonna 0)
       LCD1602.write(0, 0, 'Greetings!') 
       # Visualizza il messaggio 'From SunFounder' nella seconda riga (riga 1, colonna 1)
       LCD1602.write(1, 1, 'From SunFounder') 
       time.sleep(2)  # Visualizza i messaggi per 2 secondi

   try:
       setup()  # Esegui la funzione setup per inizializzare l'LCD e visualizzare i messaggi
       
   except KeyboardInterrupt:
       # Cancella il display LCD se si verifica un'interruzione da tastiera (es. Ctrl+C)
       LCD1602.clear()
       pass  # Procedi senza ulteriori azioni


**Spiegazione del Codice**

1. Questo file √® un file open source per il controllo dell'I2C LCD1602. Ci consente di utilizzare facilmente l'I2C LCD1602.

   .. code-block:: python

       import LCD1602  # Importa il modulo per interfacciarsi con LCD1602

2. La funzione inizializza il sistema I2C con il simbolo del dispositivo designato. Il primo parametro √® l'indirizzo del dispositivo I2C, che pu√≤ essere rilevato tramite il comando i2cdetect (vedi Appendice per i dettagli). L'indirizzo dell'I2C LCD1602 √® generalmente 0x27.

   .. code-block:: python

       # Inizializza l'LCD con l'indirizzo I2C 0x27 e abilita la retroilluminazione
       LCD1602.init(0x27, 1) 

3. ``LCD1602.write`` viene utilizzato per visualizzare i messaggi sull'LCD. I primi due parametri sono la posizione di riga e colonna, e il terzo √® il messaggio. Ora puoi vedere ‚ÄúGreetings!! From SunFounder‚Äù visualizzato sull'LCD.

   .. code-block:: python

       # Visualizza il messaggio 'Greetings!' nell'angolo in alto a sinistra (riga 0, colonna 0)
       LCD1602.write(0, 0, 'Greetings!') 
       # Visualizza il messaggio 'From SunFounder' nella seconda riga (riga 1, colonna 1)
       LCD1602.write(1, 1, 'From SunFounder') 

