 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.5_py_pi5:

2.1.5 Interrupteur √† Bascule
=================================

Introduction
---------------

Il s'agit d'un interrupteur √† bascule √† bille avec une bille m√©tallique √† l'int√©rieur. 
Il est utilis√© pour d√©tecter les inclinaisons de petits angles.

Composants N√©cessaires
-------------------------
Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.5_tilt_switch_list.png

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_tilt_switch`
        - \-

Sch√©ma de C√¢blage
--------------------

.. image:: ../python_pi5/img/2.1.5_tilt_switch_schematic_1.png


.. image:: ../python_pi5/img/2.1.5_tilt_switch_schematic_2.png


Proc√©dures Exp√©rimentales
----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/2.1.5_tilt_switch_circuit.png

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.5_Tilt_zero.py

Placez l'interrupteur √† la verticale, et la LED verte s'allumera. 
Si vous l'inclinez, "Tilt!" sera affich√© √† l'√©cran et la LED rouge
s'allumera. Replacez-le √† la verticale, et la LED verte se rallumera.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller dans le r√©pertoire source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button

   # Initialize the Button for the tilt sensor and LEDs using GPIO Zero
   TiltPin = Button(17, pull_up=False)  # Tilt sensor connected to GPIO pin 17, pull-up resistor disabled
   green_led = LED(27)  # Green LED connected to GPIO pin 27
   red_led = LED(22)   # Red LED connected to GPIO pin 22

   def detect():
       """
       Detect the tilt sensor state and control the LEDs.
       Turns on the red LED and turns off the green LED when tilted.
       Turns off the red LED and turns on the green LED when not tilted.
       """
       if TiltPin.is_pressed:  # Check if the sensor is tilted
           print('    *************')
           print('    *   Tilt!   *')
           print('    *************')
           red_led.on()   # Turn on red LED
           green_led.off()  # Turn off green LED
       else:  # If the sensor is not tilted
           red_led.off()  # Turn off red LED
           green_led.on()  # Turn on green LED

   try:
       while True:
           # Continuously check the tilt sensor state and update LEDs
           TiltPin.when_pressed = detect
           TiltPin.when_released = detect

   except KeyboardInterrupt:
       # Handle KeyboardInterrupt (Ctrl+C) to exit the loop gracefully
       pass


**Explication du Code**

#. Cette ligne configure le script pour s'ex√©cuter avec Python 3 et importe les classes ``LED`` et ``Button`` de ``gpiozero`` pour contr√¥ler les p√©riph√©riques GPIO.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button

#. Initialise le capteur d'inclinaison connect√© √† la broche GPIO 17 (avec r√©sistance pull-up d√©sactiv√©e) et deux LED connect√©es aux broches GPIO 27 et 22.

   .. code-block:: python

       # Initialize the Button for the tilt sensor and LEDs using GPIO Zero
       TiltPin = Button(17, pull_up=False)  # Tilt sensor connected to GPIO pin 17, pull-up resistor disabled
       green_led = LED(27)  # Green LED connected to GPIO pin 27
       red_led = LED(22)   # Red LED connected to GPIO pin 22

#. D√©finit la fonction ``detect``, qui v√©rifie l'√©tat du capteur d'inclinaison. Si inclin√©, elle allume la LED rouge et √©teint la LED verte. Si non inclin√©, elle fait l'inverse.

   .. code-block:: python

       def detect():
           """
           Detect the tilt sensor state and control the LEDs.
           Turns on the red LED and turns off the green LED when tilted.
           Turns off the red LED and turns on the green LED when not tilted.
           """
           if TiltPin.is_pressed:  # Check if the sensor is tilted
               print('    *************')
               print('    *   Tilt!   *')
               print('    *************')
               red_led.on()   # Turn on red LED
               green_led.off()  # Turn off green LED
           else:  # If the sensor is not tilted
               red_led.off()  # Turn off red LED
               green_led.on()  # Turn on green LED

#. La boucle principale assigne la fonction ``detect`` aux √©v√©nements ``when_pressed`` et ``when_released`` du capteur d'inclinaison. Le bloc ``try-except`` g√®re l'interruption du clavier pour une terminaison propre.

   .. code-block:: python

       try:
           while True:
               # Continuously check the tilt sensor state and update LEDs
               TiltPin.when_pressed = detect
               TiltPin.when_released = detect

       except KeyboardInterrupt:
           # Handle KeyboardInterrupt (Ctrl+C) to exit the loop gracefully
           pass

