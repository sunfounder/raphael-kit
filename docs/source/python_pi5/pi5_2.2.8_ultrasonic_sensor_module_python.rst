.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _2.2.8_py_pi5:

2.2.8 Ultraschallsensormodul
==============================

Einf√ºhrung
--------------

Das Ultraschallsensormodul verwendet Ultraschallwellen, um Objekte genau zu erkennen und Distanzen zu messen. Es sendet Ultraschallwellen aus und wandelt diese in elektronische Signale um.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

.. image:: ../python_pi5/img/2.2.8_ultrasonic_list.png

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM SET
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen diese auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
        - |link_ultrasonic_buy|

Schaltplan
-----------------

.. image:: ../python_pi5/img/2.2.8_ultrasonic_schematic.png


Experimentelle Verfahren
---------------------------------

**Schritt 1:** Baue die Schaltung.

.. image:: ../python_pi5/img/2.2.8_ultrasonic_circuit.png

**Schritt 2:** Gehe zum Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3:** F√ºhre die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.8_Ultrasonic_zero.py

Nachdem der Code ausgef√ºhrt wurde, erkennt das Ultraschallsensormodul die Distanz zwischen dem Hindernis vor dem Modul und dem Modul selbst, dann wird der Distanzwert auf dem Bildschirm angezeigt.

.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::

    Sie k√∂nnen den untenstehenden Code **modifizieren/zur√ºcksetzen/kopieren/ausf√ºhren/stoppen**. Bevor Sie das tun, m√ºssen Sie jedoch zum Quellcodepfad wie ``raphael-kit/python-pi5`` wechseln. Nachdem Sie den Code modifiziert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DistanceSensor
   from time import sleep

   # Initialize the DistanceSensor using GPIO Zero library
   # Trigger pin is connected to GPIO 23, Echo pin to GPIO 24
   sensor = DistanceSensor(echo=24, trigger=23)

   try:
       # Main loop to continuously measure and report distance
       while True:
           dis = sensor.distance * 100  # Measure distance and convert from meters to centimeters
           print('Distance: {:.2f} cm'.format(dis))  # Print the distance with two decimal precision
           sleep(0.3)  # Wait for 0.3 seconds before the next measurement

   except KeyboardInterrupt:
       # Handle KeyboardInterrupt (Ctrl+C) to gracefully exit the loop
       pass



**Code-Erkl√§rung**

#. Importiert die Klasse ``DistanceSensor`` aus der ``gpiozero`` Bibliothek zur Distanzmessung und die Funktion ``sleep`` aus dem Modul ``time`` f√ºr Verz√∂gerungen.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import DistanceSensor
       from time import sleep

#. Initialisiert den Ultraschallsensor mit dem Echo-Pin an GPIO 24 und dem Trigger-Pin an GPIO 23.

   .. code-block:: python

       # Initialize the DistanceSensor using GPIO Zero library
       # Trigger pin is connected to GPIO 23, Echo pin to GPIO 24
       sensor = DistanceSensor(echo=24, trigger=23)

#. Die Hauptschleife misst kontinuierlich die Distanz, wandelt sie von Metern in Zentimeter um und gibt sie mit zwei Dezimalstellen an. Dann wartet sie 0.3 Sekunden und misst die Distanz erneut. F√§ngt ein KeyboardInterrupt (wie Strg+C) ab, um einen sanften Ausstieg aus dem Skript zu erm√∂glichen.

   .. code-block:: python

       try:
           # Main loop to continuously measure and report distance
           while True:
               dis = sensor.distance * 100  # Measure distance and convert from meters to centimeters
               print('Distance: {:.2f} cm'.format(dis))  # Print the distance with two decimal precision
               sleep(0.3)  # Wait for 0.3 seconds before the next measurement

       except KeyboardInterrupt:
           # Handle KeyboardInterrupt (Ctrl+C) to gracefully exit the loop
           pass




