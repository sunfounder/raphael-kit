.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© Unirsi?**

    - **Supporto Tecnico Esperto**: Risolvi i problemi post-vendita e affronta le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni festive.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.8_py_pi5:

2.2.8 Modulo Sensore Ultrasonico
======================================

Introduzione
---------------

Il sensore ultrasonico utilizza ultrasuoni per rilevare con precisione gli oggetti e 
misurare le distanze. Invia onde ultrasoniche e le converte in segnali elettronici.

Componenti Necessari
------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/2.2.8_ultrasonic_list.png

√à decisamente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
        - |link_ultrasonic_buy|

Schema Elettrico
------------------

.. image:: ../python_pi5/img/2.2.8_ultrasonic_schematic.png


Procedure Sperimentali
------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/2.2.8_ultrasonic_circuit.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.8_Ultrasonic_zero.py

Dopo l'esecuzione del codice, il modulo sensore ultrasonico rileva la distanza 
tra l'ostacolo di fronte e il modulo stesso, e il valore della distanza verr√† 
stampato sullo schermo.

.. warning::

    Se viene visualizzato l'errore ``RuntimeError: Cannot determine SOC peripheral base address``, fare riferimento a :ref:`faq_soc`. 

**Code**

.. note::

    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. 
    Ma prima, devi andare al percorso sorgente del codice come ``raphael-kit/python-pi5``. 
    Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import DistanceSensor
   from time import sleep

   # Inizializza il sensore di distanza utilizzando la libreria GPIO Zero
   # Il pin di trigger √® collegato al GPIO 23, il pin di echo al GPIO 24
   sensor = DistanceSensor(echo=24, trigger=23)

   try:
       # Ciclo principale per misurare e riportare continuamente la distanza
       while True:
           dis = sensor.distance * 100  # Misura la distanza e converti da metri a centimetri
           print('Distanza: {:.2f} cm'.format(dis))  # Stampa la distanza con due cifre decimali
           sleep(0.3)  # Attendi 0,3 secondi prima della prossima misurazione

   except KeyboardInterrupt:
       # Gestisce KeyboardInterrupt (Ctrl+C) per uscire dal ciclo in modo ordinato
       pass


**Spiegazione del Codice**

#. Viene importata la classe ``DistanceSensor`` dalla libreria ``gpiozero`` per la misurazione della distanza, e la funzione ``sleep`` dal modulo ``time`` per gestire i ritardi.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import DistanceSensor
       from time import sleep

#. Inizializza il sensore ultrasonico di distanza con il pin Echo collegato al GPIO 24 e il pin Trigger al GPIO 23.

   .. code-block:: python

       # Inizializza il sensore di distanza utilizzando la libreria GPIO Zero
       # Il pin di trigger √® collegato al GPIO 23, il pin di echo al GPIO 24
       sensor = DistanceSensor(echo=24, trigger=23)

#. Il ciclo principale misura continuamente la distanza, la converte da metri a centimetri e la stampa con due cifre decimali di precisione. Poi attende 0,3 secondi prima di rieseguire la misurazione. Il ciclo viene interrotto correttamente tramite KeyboardInterrupt (ad esempio Ctrl+C) per consentire un'uscita ordinata dallo script.

   .. code-block:: python

       try:
           # Ciclo principale per misurare e riportare continuamente la distanza
           while True:
               dis = sensor.distance * 100  # Misura la distanza e converti da metri a centimetri
               print('Distanza: {:.2f} cm'.format(dis))  # Stampa la distanza con due cifre decimali
               sleep(0.3)  # Attendi 0,3 secondi prima della prossima misurazione

       except KeyboardInterrupt:
           # Gestisce KeyboardInterrupt (Ctrl+C) per uscire dal ciclo in modo ordinato
           pass


