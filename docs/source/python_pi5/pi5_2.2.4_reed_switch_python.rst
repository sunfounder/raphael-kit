.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _2.2.4_py_pi5:

2.2.4 M√≥dulo de Interruptor de L√°minas
=========================================

Introducci√≥n
---------------

En este proyecto, aprenderemos sobre el interruptor de l√°minas, que es un interruptor el√©ctrico que opera mediante un campo magn√©tico aplicado.

Componentes Necesarios
--------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../python_pi5/img/2.2.4_reed_switch_list.png
    :width: 700
    :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN AL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|

Diagrama Esquem√°tico
---------------------------

============== ====== ======== ===
Nombre T-Board f√≠sica wiringPi BCM
GPIO17         Pin 11 0        17
GPIO27         Pin 13 2        27
GPIO22         Pin 15 3        22
============== ====== ======== ===

.. image:: ../python_pi5/img/2.2.4_reed_switch_schematic_1.png
    :width: 400
    :align: center

.. image:: ../python_pi5/img/2.2.4_reed_switch_schematic_2.png
    :width: 400
    :align: center

Procedimientos Experimentales
-----------------------------------

**Paso 1:** Construye el circuito.

.. image:: ../python_pi5/img/2.2.4_reed_switch_circuit.png
    :width: 700
    :align: center

**Paso 2:** Cambia de directorio.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Paso 3:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.4_ReedSwitch_zero.py

El LED verde se encender√° cuando se ejecute el c√≥digo. Si se coloca un im√°n cerca del m√≥dulo del interruptor de l√°minas, el LED rojo se encender√°; al retirar el im√°n, el LED verde se encender√° nuevamente.

.. warning::

    Si recibe el mensaje de error ``RuntimeError: Cannot determine SOC peripheral base address``, consulte :ref:`faq_soc`

**C√≥digo**

.. note::

    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, debes ir a la ruta del c√≥digo fuente como ``raphael-kit/python-pi5``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button

   # Inicializa el interruptor de l√°minas y los LEDs usando GPIO Zero
   reed_switch = Button(17, pull_up=True)  # Interruptor de l√°minas en GPIO 17, usando una resistencia pull-up interna
   green_led = LED(27)                     # LED verde conectado al pin GPIO 27
   red_led = LED(22)                       # LED rojo conectado al pin GPIO 22

   def update_leds():
       """
       Update the state of the LEDs based on the reed switch.
       Turns the red LED on and green LED off when the reed switch is pressed, and vice versa.
       """
       if reed_switch.is_pressed:
           green_led.off()          # Apaga el LED verde
           red_led.on()             # Enciende el LED rojo
       else:
           green_led.on()           # Enciende el LED verde
           red_led.off()            # Apaga el LED rojo

   try:
       green_led.on()               # Enciende el LED verde al inicio
       while True:
           # Establece las funciones de callback para los cambios de estado del interruptor de l√°minas
           reed_switch.when_pressed = update_leds   # Callback cuando se presiona el interruptor
           reed_switch.when_released = update_leds  # Callback cuando se suelta el interruptor

   except KeyboardInterrupt:
       # Limpia recursos y sale con Ctrl+C
       green_led.off()
       red_led.off()
       pass

**Explicaci√≥n del C√≥digo**

#. Esta l√≠nea especifica que el script se debe ejecutar usando Python 3. Importa ``LED`` y ``Button`` (usado para el interruptor de l√°minas) de la biblioteca gpiozero.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button

#. Inicializa el interruptor de l√°minas en el pin GPIO 17 con una resistencia pull-up interna. Tambi√©n inicializa dos LEDs conectados a los pines GPIO 27 y 22.

   .. code-block:: python
       
       # Inicializa el interruptor de l√°minas y los LEDs usando GPIO Zero
       reed_switch = Button(17, pull_up=True)  # Interruptor de l√°minas en GPIO 17, usando una resistencia pull-up interna
       green_led = LED(27)                     # LED verde conectado al pin GPIO 27
       red_led = LED(22)                       # LED rojo conectado al pin GPIO 22

#. Define la funci√≥n ``update_leds``, que actualiza los estados de los LEDs bas√°ndose en el estado del interruptor de l√°minas. El LED rojo se enciende y el LED verde se apaga cuando se presiona el interruptor, y lo contrario cuando se suelta.

   .. code-block:: python

       def update_leds():
           if reed_switch.is_pressed:
               green_led.off()          # Apaga el LED verde
               red_led.on()             # Enciende el LED rojo
           else:
               green_led.on()           # Enciende el LED verde
               red_led.off()            # Apaga el LED rojo

#. Establece el estado inicial del LED verde a encendido. El bucle principal asigna la funci√≥n ``update_leds`` como callbacks para los eventos ``when_pressed`` y ``when_released`` del interruptor de l√°minas. Incluye manejo de excepciones para KeyboardInterrupt para limpiar y salir del programa de manera ordenada.

   .. code-block:: python

       try:
           green_led.on()               # Enciende el LED verde al inicio
           while True:
               # Establece las funciones de callback para los cambios de estado del interruptor de l√°minas
               reed_switch.when_pressed = update_leds   # Callback cuando se presiona el interruptor
               reed_switch.when_released = update_leds  # Callback cuando se suelta el interruptor

       except KeyboardInterrupt:
           # Limpia recursos y sale con Ctrl+C
           green_led.off()
           red_led.off()
           pass
       
