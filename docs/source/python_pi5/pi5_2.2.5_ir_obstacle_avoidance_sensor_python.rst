.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© Unirsi?**

    - **Supporto Tecnico Esperto**: Risolvi i problemi post-vendita e affronta le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni festive.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.5_py_pi5:

2.2.5 Sensore IR per Evitamento Ostacoli
==============================================

Introduzione
-----------------

In questo progetto, impareremo a conoscere il modulo a infrarossi per l'evitamento degli ostacoli, un modulo sensore che pu√≤ essere utilizzato per rilevare ostacoli a breve distanza, con poche interferenze, facile da assemblare e utilizzare. Pu√≤ essere ampiamente utilizzato in robot per l'evitamento di ostacoli, carrelli con funzione di evitamento ostacoli, conteggio su linee di montaggio, ecc.

Componenti Necessari
---------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/2.2.5_ir_obstacle_list.png
   :width: 700
   :align: center

√à decisamente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Schema Elettrico
-------------------

.. image:: ../python_pi5/img/2.2.5_ir_obstacle_list_schematic.png
   :width: 500
   :align: center

Procedure Sperimentali
-------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/2.2.5_ir_obstacle_circuit.png
   :width: 700
   :align: center

**Passo 2:** Cambia directory.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 2.2.5_IrObstacle_zero.py

Dopo aver eseguito il codice, quando metti la mano davanti alla sonda del modulo, l'indicatore di uscita del modulo si accender√† e la scritta "Ostacolo Rilevato!" verr√† stampata ripetutamente sullo schermo fino a quando non rimuoverai la mano.

<<<<<<< HEAD
**Codice**
=======
.. warning::

    If there is an error prompt  ``RuntimeError: Cannot determine SOC peripheral base address``, please refer to :ref:`faq_soc` 

**Code**
>>>>>>> 387505b31ef24b78d49967f4b4dcfb048c8f48cb

.. note::

   Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima, devi andare al percorso sorgente del codice come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Button
   import time

   # Inizializza il sensore ostacoli collegato al pin GPIO 17
   # Il sensore √® configurato con una resistenza di pull-up
   obstacle_sensor = Button(17, pull_up=True)  

   try:
      # Monitora continuamente la presenza di ostacoli
      while True:
         if obstacle_sensor.is_pressed:  # Controlla se il sensore √® attivato
               print("Detected Barrier!")  # Stampa un messaggio quando viene rilevato un ostacolo
               time.sleep(1)  # Ritardo di 1 secondo per evitare messaggi ripetitivi

   except KeyboardInterrupt:
      # Gestisce l'interruzione da tastiera (Ctrl+C) per una chiusura pulita e sicura
      pass


**Spiegazione del Codice**

#. Questa linea imposta lo script per essere eseguito con Python 3. Importa la classe ``Button`` da gpiozero (utilizzata per il sensore ostacoli) e il modulo ``time`` per i ritardi.

   .. code-block:: python

      #!/usr/bin/env python3
      from gpiozero import Button
      import time

#. Inizializza un sensore ostacoli collegato al pin GPIO 17 con una resistenza di pull-up interna.

   .. code-block:: python

      # Inizializza il sensore ostacoli collegato al pin GPIO 17
      # Il sensore √® configurato con una resistenza di pull-up
      obstacle_sensor = Button(17, pull_up=True)  

#. In un ciclo continuo, il programma verifica se il sensore ostacoli √® attivato (``is_pressed``). Se viene rilevato un ostacolo, stampa "Ostacolo Rilevato!" e poi attende un secondo (per evitare messaggi ripetitivi). La struttura ``try-except`` viene utilizzata per gestire un'Interruzione da Tastiera (KeyboardInterrupt) per una chiusura pulita del programma.

   .. code-block:: python

      try:
         # Monitora continuamente la presenza di ostacoli
         while True:
            if obstacle_sensor.is_pressed:  # Controlla se il sensore √® attivato
                  print("Detected Barrier!")  # Stampa un messaggio quando viene rilevato un ostacolo
                  time.sleep(1)  # Ritardo di 1 secondo per evitare messaggi ripetitivi

      except KeyboardInterrupt:
         # Gestisce l'interruzione da tastiera (Ctrl+C) per una chiusura pulita e sicura
         pass

