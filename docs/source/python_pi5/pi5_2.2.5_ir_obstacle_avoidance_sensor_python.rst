 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.5_py_pi5:

2.2.5 Capteur d'√©vitement d'obstacles IR
===========================================

Introduction
---------------

Dans ce projet, nous allons apprendre √† utiliser le module d'√©vitement d'obstacles IR, qui est un module capteur pouvant √™tre utilis√© pour d√©tecter des obstacles √† courte distance, avec une petite interf√©rence, facile √† assembler, facile √† utiliser, etc. Il peut √™tre largement utilis√© dans l'√©vitement d'obstacles pour robots, chariots d'√©vitement d'obstacles, comptage sur ligne de production, etc.

Composants n√©cessaires
--------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.2.5_ir_obstacle_list.png
   :width: 700
   :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Sch√©ma
---------

.. image:: ../python_pi5/img/2.2.5_ir_obstacle_list_schematic.png
   :width: 500
   :align: center

Proc√©dures exp√©rimentales
---------------------------

**√âtape 1 :** Construisez le circuit

.. image:: ../python_pi5/img/2.2.5_ir_obstacle_circuit.png
   :width: 700
   :align: center

**√âtape 2 :** Changez de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

   sudo python3 2.2.5_IrObstacle_zero.py

Apr√®s l'ex√©cution du code, lorsque vous placez votre main devant la sonde du module, 
l'indicateur de sortie sur le module s'allume et "Detected Barrier!" sera imprim√© de mani√®re r√©p√©t√©e √† l'√©cran jusqu'√† ce que votre main soit retir√©e.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

   Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Button
   import time

   # Initialize the obstacle sensor connected to GPIO pin 17
   # The sensor is configured with a pull-up resistor
   obstacle_sensor = Button(17, pull_up=True)  

   try:
      # Continuously monitor for obstacles
      while True:
         if obstacle_sensor.is_pressed:  # Check if the sensor is triggered
               print("Detected Barrier!")  # Print a message when an obstacle is detected
               time.sleep(1)  # Delay for 1 second to avoid repetitive messages

   except KeyboardInterrupt:
      # Handle KeyboardInterrupt (Ctrl+C) for a clean and safe exit
      pass


**Explication du code**

#. Cette ligne configure le script pour qu'il s'ex√©cute en utilisant Python 3. Elle importe la classe ``Button`` de gpiozero (utilis√©e pour le capteur d'obstacles) et le module ``time`` pour les d√©lais.

   .. code-block:: python

      #!/usr/bin/env python3
      from gpiozero import Button
      import time

#. Initialise un capteur d'obstacles connect√© √† la broche GPIO 17 avec une r√©sistance pull-up interne.

   .. code-block:: python

      # Initialize the obstacle sensor connected to GPIO pin 17
      # The sensor is configured with a pull-up resistor
      obstacle_sensor = Button(17, pull_up=True)  

#. Dans une boucle continue, le programme v√©rifie si le capteur d'obstacles est activ√© (``is_pressed``). Si un obstacle est d√©tect√©, il affiche "Detected Barrier!" puis attend une seconde (pour √©viter les messages r√©p√©titifs). La structure ``try-except`` est utilis√©e pour g√©rer un KeyboardInterrupt pour une sortie propre.

   .. code-block:: python

      try:
         # Continuously monitor for obstacles
         while True:
            if obstacle_sensor.is_pressed:  # Check if the sensor is triggered
                  print("Detected Barrier!")  # Print a message when an obstacle is detected
                  time.sleep(1)  # Delay for 1 second to avoid repetitive messages

      except KeyboardInterrupt:
         # Handle KeyboardInterrupt (Ctrl+C) for a clean and safe exit
         pass

