 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.1_py_pi5:

2.1.1 Bouton
=================

Introduction
--------------------

Dans ce projet, nous allons apprendre √† allumer ou √©teindre une LED en utilisant un bouton.

Composants n√©cessaires
--------------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../python_pi5/img/2.1.1_Button_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment avec les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

Sch√©ma de montage
---------------------

Utilisez un bouton normalement ouvert comme entr√©e du Raspberry Pi, la connexion est montr√©e dans le sch√©ma ci-dessous. Lorsque le bouton est press√©, le GPIO18 passera √† un niveau haut (3,3V). Nous pouvons d√©tecter l'√©tat du GPIO18 par programmation. C'est-√†-dire, si le GPIO18 passe √† un niveau haut, cela signifie que le bouton est press√©. Vous pouvez ex√©cuter le code correspondant lorsque le bouton est press√©, et alors la LED s'allumera.

.. note::
    La broche la plus longue de la LED est l'anode et la plus courte est la cathode.

.. image:: ../python_pi5/img/2.1.1_Button_schematic_1.png


.. image:: ../python_pi5/img/2.1.1_Button_schematic_2.png

Proc√©dures exp√©rimentales
-------------------------------

**√âtape 1** : Construisez le circuit.

.. image:: ../python_pi5/img/2.1.1_Button_circuit.png

**√âtape 2** : Ouvrez le fichier de code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**√âtape 3** : Ex√©cutez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.1_Button_zero.py

Maintenant, appuyez sur le bouton et la LED s'allumera ; rel√¢chez le bouton et la LED s'√©teindra.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Import LED and Button classes from gpiozero
   from signal import pause  # Import pause function from signal module

   # Initialize an LED object on GPIO pin 17
   led = LED(17)
   # Initialize a Button object on GPIO pin 18
   button = Button(18)

   # Link the button's "when_pressed" event to the LED's on() method
   button.when_pressed = led.on
   # Link the button's "when_released" event to the LED's off() method
   button.when_released = led.off

   # Run an event loop that waits for button events and keeps the script running
   pause()


**Explication du code**

#. Le script est √©crit en Python3 et il importe les classes ``LED`` et ``Button`` de la biblioth√®que ``gpiozero``, ainsi que la fonction ``pause`` du module ``signal``.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Import LED and Button classes from gpiozero
       from signal import pause  # Import pause function from signal module

#. Initialise un objet ``LED`` sur la broche GPIO 17 et un objet ``Button`` sur la broche GPIO 18.

   .. code-block:: python

       # Initialize an LED object on GPIO pin 17
       led = LED(17)
       # Initialize a Button object on GPIO pin 18
       button = Button(18)

#. Configure des gestionnaires d'√©v√©nements pour que la LED s'allume lorsque le bouton est enfonc√© et s'√©teigne lorsque le bouton est rel√¢ch√©.

   .. code-block:: python

       # Link the button's "when_pressed" event to the LED's on() method
       button.when_pressed = led.on
       # Link the button's "when_released" event to the LED's off() method
       button.when_released = led.off

#. Cela permet de maintenir le script en cours d'ex√©cution dans une boucle d'√©v√©nements, en attente des √©v√©nements de pression et de rel√¢chement du bouton.

   .. code-block:: python
       
       # Run an event loop that waits for button events and keeps the script running
       pause()


