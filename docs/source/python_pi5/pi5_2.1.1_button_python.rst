.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _2.1.1_py_pi5:

2.1.1 Taster
========================

Einleitung
--------------

In diesem Projekt lernen wir, wie man eine LED mit einem Taster ein- oder ausschaltet.

Ben√∂tigte Komponenten
-----------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/2.1.1_Button_list.png

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - IN DIESEM KIT ENTHALTENE TEILE
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen sie auch separat √ºber die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

Schaltplan
------------------

Wir verwenden einen normalerweise offenen Taster als Eingang des Raspberry Pi. Die Verbindung ist im folgenden Schaltplan dargestellt. Wenn der Taster gedr√ºckt wird, wechselt GPIO18 auf High-Level (3,3V). Wir k√∂nnen den Zustand von GPIO18 durch Programmierung erkennen. Das hei√üt, wenn GPIO18 auf High-Level wechselt, bedeutet dies, dass der Taster gedr√ºckt wurde. Sie k√∂nnen den entsprechenden Code ausf√ºhren, wenn der Taster gedr√ºckt wird, und dann leuchtet die LED auf.

.. note::
    Der l√§ngere Pin der LED ist die Anode und der k√ºrzere ist
    die Kathode.

.. image:: ../python_pi5/img/2.1.1_Button_schematic_1.png


.. image:: ../python_pi5/img/2.1.1_Button_schematic_2.png


Experimentelle Verfahren
--------------------------------

**Schritt 1**: Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/2.1.1_Button_circuit.png

**Schritt 2**: √ñffnen Sie die Code-Datei.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/python-pi5

**Schritt 3**: F√ºhren Sie den Code aus.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo python3 2.1.1_Button_zero.py

Jetzt, wenn Sie den Taster dr√ºcken, leuchtet die LED auf; wenn Sie den Taster loslassen, geht die LED aus.

.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::

    Sie k√∂nnen den unten stehenden Code **modifizieren/zur√ºcksetzen/kopieren/ausf√ºhren/stoppen**. Aber zuvor m√ºssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nachdem Sie den Code modifiziert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button  # Import LED and Button classes from gpiozero
   from signal import pause  # Import pause function from signal module

   # Initialize an LED object on GPIO pin 17
   led = LED(17)
   # Initialize a Button object on GPIO pin 18
   button = Button(18)

   # Link the button's "when_pressed" event to the LED's on() method
   button.when_pressed = led.on
   # Link the button's "when_released" event to the LED's off() method
   button.when_released = led.off

   # Run an event loop that waits for button events and keeps the script running
   pause()


**Code-Erkl√§rung**

#. Das Skript ist in Python3 geschrieben und importiert die Klassen ``LED`` und ``Button`` aus der Bibliothek ``gpiozero`` sowie ``pause`` aus dem ``signal``-Modul.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button  # Import LED and Button classes from gpiozero
       from signal import pause  # Import pause function from signal module

#. Initialisiert ein ``LED``-Objekt am GPIO-Pin 17 und ein ``Button``-Objekt am GPIO-Pin 18.

   .. code-block:: python

       # Initialize an LED object on GPIO pin 17
       led = LED(17)
       # Initialize a Button object on GPIO pin 18
       button = Button(18)

#. Richtet Ereignisbehandler ein, sodass die LED einschaltet, wenn der Taster gedr√ºckt wird, und ausschaltet, wenn der Taster losgelassen wird.

   .. code-block:: python

       # Link the button's "when_pressed" event to the LED's on() method
       button.when_pressed = led.on
       # Link the button's "when_released" event to the LED's off() method
       button.when_released = led.off

#. Dies h√§lt das Skript in einer Ereignisschleife am Laufen, die auf die Tastendruck- und Loslassereignisse wartet.

   .. code-block:: python
       
       # Run an event loop that waits for button events and keeps the script running
       pause()



