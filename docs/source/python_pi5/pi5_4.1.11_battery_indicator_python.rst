.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _4.1.11_py_pi5:

4.1.8 Batterieanzeige
===================================

Einf√ºhrung
--------------

In diesem Projekt werden wir eine Batterieanzeige bauen, die den Batteriestatus visuell auf dem LED-Balkendiagramm anzeigt.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

.. image:: ../python_pi5/img/4.1.11_battery_indicator_list.png
    :align: center

Es ist definitiv praktisch, ein komplettes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_bar_graph`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-

Schaltplan
-------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO25       Pin 22   6        25
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       20
GPIO21       Pin 40   29       21
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
GPIO19       Pin 35   24       19
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.11_battery_indicator_schematic.png
   :align: center

Experimentelle Verfahren
-----------------------------------

**Schritt 1:** Bauen Sie den Schaltkreis auf.

.. image:: ../python_pi5/img/4.1.11_battery_indicator_circuit.png

**Schritt 2:** Gehen Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 3:** F√ºhren Sie die ausf√ºhrbare Datei aus.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.11_BatteryIndicator_zero.py

Nachdem das Programm ausgef√ºhrt wurde, geben Sie dem 3. Pin des ADC0834 und dem GND jeweils ein Anschlusskabel und f√ºhren Sie diese dann separat an die beiden Pole einer Batterie. Sie k√∂nnen sehen, wie die entsprechende LED auf dem LED-Balkendiagramm aufleuchtet, um den Ladestand anzuzeigen (Messbereich: 0-5V).

.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::
    Sie k√∂nnen den untenstehenden Code **Modifizieren/Zur√ºcksetzen/Kopieren/Ausf√ºhren/Stoppen**. Aber zuerst m√ºssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nach der Modifikation des Codes k√∂nnen Sie ihn direkt ausf√ºhren, um das Ergebnis zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   import ADC0834
   import time

   # List of GPIO pins to which LEDs are connected
   ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]
   # Initialize LED objects for each pin in the list
   leds = [LED(pin) for pin in ledPins]

   # Setup ADC0834 module
   ADC0834.setup()

   def LedBarGraph(value):
       # Turn off all LEDs
       for i in range(10):
           leds[i].off()
       # Turn on LEDs up to the specified value
       for i in range(value):
           leds[i].on()

   try:
       # Main loop to continuously update LED bar graph
       while True:
           # Read analog value from ADC0834
           analogVal = ADC0834.getResult()
           # Convert analog value to LED bar graph level
           LedBarGraph(int(analogVal/25))
   except KeyboardInterrupt: 
       # Turn off all LEDs when program is interrupted
       for i in range(10):
           leds[i].off()

**Code-Erkl√§rung**

#. Dieser Abschnitt importiert die notwendigen Bibliotheken. ``gpiozero`` wird zur Steuerung der LEDs verwendet, ``ADC0834`` zur Schnittstelle mit dem ADC-Modul und ``time`` f√ºr zeitbezogene Operationen.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED
       import ADC0834
       import time

#. Definiert die GPIO-Pins, an die die LEDs angeschlossen sind, und initialisiert ein Array von LED-Objekten f√ºr jeden Pin. Dies erm√∂glicht eine einfache Steuerung jeder LED im Array.

   .. code-block:: python

       # List of GPIO pins to which LEDs are connected
       ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]
       # Initialize LED objects for each pin in the list
       leds = [LED(pin) for pin in ledPins]

#. Initialisiert das ADC0834-Modul f√ºr die Analog-Digital-Umwandlung.

   .. code-block:: python

       # Setup ADC0834 module
       ADC0834.setup()

#. Diese Funktion schaltet alle LEDs aus und schaltet dann eine Anzahl von LEDs basierend auf dem Eingabewert ein, wodurch effektiv eine Balkendiagrammdarstellung erzeugt wird.

   .. code-block:: python

       def LedBarGraph(value):
           # Turn off all LEDs
           for i in range(10):
               leds[i].off()
           # Turn on LEDs up to the specified value
           for i in range(value):
               leds[i].on()

#. Liest kontinuierlich den analogen Wert vom ADC0834 und aktualisiert das LED-Balkendiagramm basierend auf diesem Wert. Der analoge Wert wird auf einen Bereich von 0-10 f√ºr die 10 LEDs skaliert.

   .. code-block:: python

       try:
           # Main loop to continuously update LED bar graph
           while True:
               # Read analog value from ADC0834
               analogVal = ADC0834.getResult()
               # Convert analog value to LED bar graph level
               LedBarGraph(int(analogVal/25))

#. Stellt sicher, dass alle LEDs ausgeschaltet werden, wenn das Programm unterbrochen wird (z.B. durch Dr√ºcken von Ctrl+C).

   .. code-block:: python

       except KeyboardInterrupt: 
           # Turn off all LEDs when program is interrupted
           for i in range(10):
               leds[i].off()