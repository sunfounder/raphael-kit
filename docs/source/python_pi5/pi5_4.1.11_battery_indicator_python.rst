.. note::

    Ciao, benvenuto nella community di SunFounder per gli appassionati di Raspberry Pi, Arduino e ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **PerchÃ© unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e affronta sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime esclusive.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri ultimi prodotti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni durante le festivitÃ .

    ðŸ‘‰ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _4.1.11_py_pi5:

4.1.8 Indicatore di Batteria
=====================================

Introduzione
----------------

In questo progetto, realizzeremo un dispositivo indicatore di batteria che
puÃ² visualizzare visivamente il livello di carica della batteria sul Bargraph LED.

Componenti Necessari
------------------------------

In questo progetto, ci servono i seguenti componenti.

.. image:: ../python_pi5/img/4.1.11_battery_indicator_list.png
    :align: center

Ãˆ sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - ELEMENTI INCLUSI NEL KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistare i componenti separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK D'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_bar_graph`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-

Schema Elettrico
---------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO18       Pin 12   1        18
GPIO27       Pin 13   2        27
GPIO25       Pin 22   6        25
GPIO12       Pin 32   26       12
GPIO16       Pin 36   27       16
GPIO20       Pin 38   28       20
GPIO21       Pin 40   29       21
GPIO5        Pin 29   21       5
GPIO6        Pin 31   22       6
GPIO13       Pin 33   23       13
GPIO19       Pin 35   24       19
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.11_battery_indicator_schematic.png
   :align: center

Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/4.1.11_battery_indicator_circuit.png

**Passo 2:** Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.11_BatteryIndicator_zero.py

Dopo l'esecuzione del programma, collega separatamente un cavo di uscita 
al 3Â° pin di ADC0834 e al GND, e poi collegali ai due poli di una batteria. 
Vedrai che il corrispondente LED sul Bargraph LED si accenderÃ  per visualizzare 
il livello di potenza (intervallo di misurazione: 0-5V).

.. warning::

    Se viene visualizzato l'errore ``RuntimeError: Cannot determine SOC peripheral base address``, fare riferimento a :ref:`faq_soc`. 

**Code**

.. note::
    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima devi accedere al percorso del codice sorgente come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED
   import ADC0834
   import time

   # Elenco dei pin GPIO a cui sono collegati i LED
   ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]
   # Inizializza gli oggetti LED per ogni pin nella lista
   leds = [LED(pin) per pin in ledPins]

   # Configura il modulo ADC0834
   ADC0834.setup()

   def LedBarGraph(value):
       # Spegni tutti i LED
       for i in range(10):
           leds[i].off()
       # Accendi i LED fino al valore specificato
       for i in range(value):
           leds[i].on()

   try:
       # Ciclo principale per aggiornare continuamente il Bargraph LED
       while True:
           # Leggi il valore analogico da ADC0834
           analogVal = ADC0834.getResult()
           # Converti il valore analogico in livello del Bargraph LED
           LedBarGraph(int(analogVal/25))
   except KeyboardInterrupt: 
       # Spegni tutti i LED quando il programma viene interrotto
       for i in range(10):
           leds[i].off()




**Spiegazione del Codice**

#. Questa sezione importa le librerie necessarie. ``gpiozero`` serve per controllare i LED, ``ADC0834`` per interfacciarsi con il modulo ADC e ``time`` per le operazioni legate al tempo.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED
       import ADC0834
       import time

#. Definisce i pin GPIO a cui sono collegati i LED e inizializza un array di oggetti LED per ciascun pin. Questo consente un facile controllo di ciascun LED nell'array.

   .. code-block:: python

       # Elenco dei pin GPIO a cui sono collegati i LED
       ledPins = [25, 12, 16, 20, 21, 5, 6, 13, 19, 26]
       # Inizializza gli oggetti LED per ogni pin nella lista
       leds = [LED(pin) per pin in ledPins]

#. Inizializza il modulo ADC0834 per la conversione analogico-digitale.

   .. code-block:: python

       # Configura il modulo ADC0834
       ADC0834.setup()

#. Questa funzione spegne tutti i LED e poi accende un numero di LED in base al valore di input, creando efficacemente una rappresentazione grafica a barre.

   .. code-block:: python

       def LedBarGraph(value):
           # Spegni tutti i LED
           for i in range(10):
               leds[i].off()
           # Accendi i LED fino al valore specificato
           for i in range(value):
               leds[i].on()

#. Legge continuamente il valore analogico da ADC0834 e aggiorna il Bargraph LED in base a questo valore. Il valore analogico viene ridimensionato su una scala da 0 a 10 per i 10 LED.

   .. code-block:: python

       try:
           # Ciclo principale per aggiornare continuamente il Bargraph LED
           while True:
               # Leggi il valore analogico da ADC0834
               analogVal = ADC0834.getResult()
               # Converti il valore analogico in livello del Bargraph LED
               LedBarGraph(int(analogVal/25))

#. Assicura che tutti i LED siano spenti quando il programma viene interrotto (ad esempio, premendo Ctrl+C).

   .. code-block:: python

       except KeyboardInterrupt: 
           # Spegni tutti i LED quando il programma viene interrotto
           for i in range(10):
               leds[i].off()
