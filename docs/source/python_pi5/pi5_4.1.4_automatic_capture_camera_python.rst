.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede anticipadamente a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _4.1.4_py_pi5:

4.1.2 C√°mara de Captura Autom√°tica
=======================================

Introducci√≥n
----------------

Cuando est√©s fuera, las peque√±as ardillas en el bosque podr√≠an visitar tu alf√©izar. ¬°Hagamos una c√°mara de captura autom√°tica para dejar fotos de estas adorables criaturas!

Componentes Necesarios
--------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../python_pi5/img/4.1.4_automatic_capture_list.png
  :width: 800
  :align: center

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - COMPONENTES EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|
    *   - :ref:`cpn_pir`
        - \-

Diagrama Esquem√°tico
---------------------

============== ====== ======== ===
Nombre T-Board f√≠sico wiringPi BCM
GPIO17         Pin 11 0        17
============== ====== ======== ===

.. image:: ../python_pi5/img/4.1.4_automatic_capture_schematic.png
   :width: 400
   :align: center

Procedimientos Experimentales
---------------------------------

Antes de este proyecto, necesitas asegurarte de completar :ref:`3.1.1_py_pi5` .

**Paso 1:** Construye el circuito.

.. image:: ../python_pi5/img/4.1.4_automatic_capture_circuit.png
  :width: 800
  :align: center

**Paso 2:** Entra en el Escritorio de Raspberry Pi. Es posible que necesites una pantalla para una mejor experiencia, consulta: `Conecta tu Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. O accede al escritorio de Raspberry Pi de forma remota, para un tutorial detallado consulta :ref:`remote_desktop`.

**Paso 3:** Abre un Terminal y accede a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Paso 4:** Ejecuta.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.4_AutomaticCaptureCamera_zero.py

Despu√©s de ejecutar el c√≥digo, el PIR detectar√° el entorno circundante y si detecta que la peque√±a ardilla pasa cerca, la c√°mara tomar√° una foto. 
El intervalo entre fotos es de 3 segundos, y el n√∫mero total de fotos tomadas se mostrar√° en la ventana de impresi√≥n.

Hay dos potenci√≥metros en el m√≥dulo PIR: uno es para ajustar la sensibilidad y el otro para ajustar la distancia de detecci√≥n. Para que el m√≥dulo PIR funcione mejor, necesitas girar ambos en sentido contrario a las agujas del reloj hasta el final.

.. image:: ../python_pi5/img/4.1.4_PIR_TTE.png
    :width: 400
    :align: center

.. note::

   Tambi√©n puedes abrir ``4.1.4_AutomaticCaptureCamera_zero.py`` en la ruta ``~/raphael-kit/python-pi5/`` con un IDE de Python, haz clic en el bot√≥n Run para ejecutar y det√©n el c√≥digo con el bot√≥n Stop.

.. warning::

    Si recibe el mensaje de error ``RuntimeError: Cannot determine SOC peripheral base address``, consulte :ref:`faq_soc`

**C√≥digo**

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, necesitas ir a la ruta del c√≥digo fuente como ``raphael-kit/python-pi5``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3  
    from picamera2 import Picamera2, Preview
    from gpiozero import MotionSensor
    import time
    import os

    # Recupera el nombre de usuario actual y su directorio de inicio
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    # Inicializa la c√°mara
    camera = Picamera2()
    camera.start()

    # Inicializa el sensor de movimiento en el pin GPIO 17
    pir = MotionSensor(17)

    try:
        i = 1  # Inicializa el contador de im√°genes
        while True:
            if pir.motion_detected:
                # Captura una imagen cuando se detecta movimiento y la guarda con un n√∫mero √∫nico
                camera.capture_file(f'{user_home}/capture%s.jpg' % i)
                print('The number is %s' % i)  # Print the image count
                time.sleep(3)  # Wait for 3 seconds before next detection
                i += 1  # Increment the image count
            else:
                print('waiting')  # Print 'waiting' when no motion is detected
                time.sleep(0.5)  # Check for motion every 0.5 seconds

    except KeyboardInterrupt:
        # Detiene la c√°mara si ocurre un KeyboardInterrupt
        camera.stop_preview()
        pass


**Explicaci√≥n del C√≥digo**

#. Importa las clases ``Picamera2`` y ``Preview`` para el control de la c√°mara, la clase ``MotionSensor`` para la detecci√≥n de movimiento, y las bibliotecas est√°ndar ``time`` y ``os`` para el manejo del tiempo y las interacciones del sistema operativo.

   .. code-block:: python

       #!/usr/bin/env python3  
       from picamera2 import Picamera2, Preview
       from gpiozero import MotionSensor
       import time
       import os

#. Recupera el nombre de usuario actual y el directorio de inicio para guardar las im√°genes capturadas.

   .. code-block:: python

       # Recupera el nombre de usuario actual y el directorio de inicio
       user = os.getlogin()
       user_home = os.path.expanduser(f'~{user}')

#. Inicializa la c√°mara y la pone en marcha.

   .. code-block:: python

       # Inicializa la c√°mara
       camera = Picamera2()
       camera.start()

#. Inicializa un sensor de movimiento PIR conectado al pin GPIO 17.

   .. code-block:: python

       # Inicializa el sensor de movimiento en el pin GPIO 17
       pir = MotionSensor(17)

#. Inicializa un contador ``i`` para rastrear el n√∫mero de im√°genes capturadas. En un bucle infinito, verifica si se detecta movimiento. Si se detecta movimiento, captura una imagen, la guarda con un nombre √∫nico basado en el contador ``i``, imprime el n√∫mero de la imagen y espera 3 segundos antes de volver a verificar el movimiento. El contador ``i`` se incrementa despu√©s de cada captura.

   .. code-block:: python

       try:
           i = 1  # Inicializa el contador de im√°genes
           while True:
               if pir.motion_detected:
                   # Captura una imagen cuando se detecta movimiento y la guarda con un n√∫mero √∫nico
                   camera.capture_file(f'{user_home}/capture%s.jpg' % i)
                   print('The number is %s' % i)  # Print the image count
                   time.sleep(3)  # Wait for 3 seconds before next detection
                   i += 1  # Increment the image count

#. Si no se detecta movimiento, imprime ``esperando`` y verifica el movimiento cada 0.5 segundos.

   .. code-block:: python

       try:
           ...

           while True:           
               ...
               
               else:
                   print('waiting')  # Print 'waiting' when no motion is detected
                   time.sleep(0.5)  # Check for motion every 0.5 seconds

#. Captura un KeyboardInterrupt (como Ctrl+C) para detener la vista previa de la c√°mara y salir del script de manera segura.

   .. code-block:: python

       except KeyboardInterrupt:
           # Detiene la c√°mara si ocurre un KeyboardInterrupt
           camera.stop_preview()
           pass

