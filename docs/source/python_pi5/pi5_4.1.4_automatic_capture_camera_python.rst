.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _4.1.4_py_pi5:

4.1.2 Automatische Erfassungskamera
=======================================

Einf√ºhrung
-----------------

Wenn Sie unterwegs sind, k√∂nnten die kleinen Eichh√∂rnchen im Wald Ihren Fenstersims besuchen. Lassen Sie uns eine automatische Erfassungskamera bauen, um Bilder dieser kleinen S√º√üen festzuhalten!

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

.. image:: ../python_pi5/img/4.1.4_automatic_capture_list.png
  :width: 800
  :align: center

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen diese auch separat √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_camera_module`
        - |link_camera_buy|
    *   - :ref:`cpn_pir`
        - \-


Schaltplan
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.4_automatic_capture_schematic.png
   :width: 400
   :align: center

Experimentelle Verfahren
------------------------------

Vor diesem Projekt sollten Sie sicherstellen, dass Sie :ref:`3.1.1_py_pi5` abgeschlossen haben.

**Schritt 1:** Bauen Sie den Schaltkreis.

.. image:: ../python_pi5/img/4.1.4_automatic_capture_circuit.png
  :width: 800
  :align: center

**Schritt 2:** Gehen Sie zum Raspberry Pi Desktop. F√ºr ein besseres Erlebnis ben√∂tigen Sie m√∂glicherweise einen Bildschirm, siehe: `Verbinden Sie Ihren Raspberry Pi <https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/3>`_. Oder greifen Sie remote auf den Raspberry Pi Desktop zu, f√ºr eine detaillierte Anleitung siehe :ref:`remote_desktop`.

**Schritt 3:** √ñffnen Sie ein Terminal und wechseln Sie in den Ordner des Codes.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Schritt 4:** Ausf√ºhren.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.4_AutomaticCaptureCamera_zero.py

Nachdem der Code ausgef√ºhrt wurde, wird der PIR die Umgebung erkennen, und wenn er das kleine Eichh√∂rnchen vorbeikommen sp√ºrt, wird die Kamera ein Foto machen.
Das Foto-Intervall betr√§gt 3 Sekunden, und die Gesamtzahl der aufgenommenen Fotos wird durch das Druckfenster angezeigt.

Es gibt zwei Potentiometer am PIR-Modul: eines zur Einstellung der Empfindlichkeit und das andere zur Einstellung der Erkennungsdistanz. Um das PIR-Modul besser zu nutzen, sollten Sie beide gegen den Uhrzeigersinn bis zum Anschlag drehen.

.. image:: ../python_pi5/img/4.1.4_PIR_TTE.png
    :width: 400
    :align: center

.. note::

   Sie k√∂nnen auch ``4.1.4_AutomaticCaptureCamera_zero.py`` im Pfad ``~/raphael-kit/python-pi5/`` mit einer Python-IDE √∂ffnen, den Ausf√ºhren-Button klicken, um es zu starten, und den Code mit dem Stop-Button beenden.


.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::
    Sie k√∂nnen den untenstehenden Code **modifizieren/zur√ºcksetzen/kopieren/ausf√ºhren/stoppen**. Bevor Sie dies tun, m√ºssen Sie zum Quellcodepfad wie ``raphael-kit/python-pi5`` gehen. Nach der √Ñnderung des Codes k√∂nnen Sie ihn direkt ausf√ºhren, um die Auswirkung zu sehen.

.. raw:: html

    <run></run>

.. code-block:: python

    #!/usr/bin/env python3  
    from picamera2 import Picamera2, Preview
    from gpiozero import MotionSensor
    import time
    import os

    # Retrieve the current user's login name and home directory
    user = os.getlogin()
    user_home = os.path.expanduser(f'~{user}')

    # Initialize the camera
    camera = Picamera2()
    camera.start()

    # Initialize the motion sensor on GPIO pin 17
    pir = MotionSensor(17)

    try:
        i = 1  # Initialize the image count
        while True:
            if pir.motion_detected:
                # Capture an image when motion is detected and save it with a unique number
                camera.capture_file(f'{user_home}/capture%s.jpg' % i)
                print('The number is %s' % i)  # Print the image count
                time.sleep(3)  # Wait for 3 seconds before next detection
                i += 1  # Increment the image count
            else:
                print('waiting')  # Print 'waiting' when no motion is detected
                time.sleep(0.5)  # Check for motion every 0.5 seconds

    except KeyboardInterrupt:
        # Stop the camera and turn off the LED if a KeyboardInterrupt occurs
        camera.stop_preview()
        pass

**Code-Erkl√§rung**

#. Importiert die Klassen ``Picamera2`` und ``Preview`` f√ºr die Kamerasteuerung, die Klasse ``MotionSensor`` f√ºr die Bewegungserkennung und die Standardbibliotheken ``time`` und ``os`` f√ºr die Zeitsteuerung und Interaktionen mit dem Betriebssystem.

   .. code-block:: python

       #!/usr/bin/env python3  
       von picamera2 import Picamera2, Preview
       von gpiozero import MotionSensor
       import time
       import os

#. Ruft den Login-Namen und das Home-Verzeichnis des aktuellen Benutzers ab, um die aufgenommenen Bilder zu speichern.

   .. code-block:: python

       # Retrieve the current user's login name and home directory
       user = os.getlogin()
       user_home = os.path.expanduser(f'~{user}')

#. Initialisiert die Kamera und startet sie.

   .. code-block:: python

       # Initialize the camera
       camera = Picamera2()
       camera.start()

#. Initialisiert einen PIR-Bewegungssensor, der mit dem GPIO-Pin 17 verbunden ist.

   .. code-block:: python

       # Initialize the motion sensor on GPIO pin 17
       pir = MotionSensor(17)

#. Initialisiert einen Z√§hler ``i``, um die Anzahl der aufgenommenen Bilder zu verfolgen. In einer Endlosschleife wird √ºberpr√ºft, ob eine Bewegung erkannt wurde. Wenn eine Bewegung erkannt wird, wird ein Bild aufgenommen, dieses mit einem einzigartigen Namen basierend auf dem Z√§hler ``i`` gespeichert, die Bildnummer ausgedruckt und 3 Sekunden gewartet, bevor erneut auf Bewegung gepr√ºft wird. Der Z√§hler ``i`` wird nach jeder Aufnahme erh√∂ht.

   .. code-block:: python

       try:
           i = 1  # Initialize the image count
           while True:
               if pir.motion_detected:
                   # Capture an image when motion is detected and save it with a unique number
                   camera.capture_file(f'{user_home}/capture%s.jpg' % i)
                   print('The number is %s' % i)  # Print the image count
                   time.sleep(3)  # Wait for 3 seconds before next detection
                   i += 1  # Increment the image count

#. Wenn keine Bewegung erkannt wird, wird ``warte`` ausgedruckt und alle 0,5 Sekunden erneut auf Bewegung gepr√ºft.

   .. code-block:: python

       try:
           ...

           while True:           
               ...
               
               else:
                   print('waiting')  # Print 'waiting' when no motion is detected
                   time.sleep(0.5)  # Check for motion every 0.5 seconds

#. F√§ngt ein KeyboardInterrupt (wie Ctrl+C) ab, um die Kameravorschau zu stoppen und das Skript ordentlich zu beenden.

   .. code-block:: python

       except KeyboardInterrupt:
           # Stop the camera and turn off the LED if a KeyboardInterrupt occurs
           camera.stop_preview()
           pass




