.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci il mondo di Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Tecnico Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni durante le festivit√†.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _1.3.2_py_pi5:

1.3.2 Servo
===============

Introduzione
-----------------

In questo progetto, impareremo a far ruotare un servomotore.

Componenti Necessari
--------------------------------

Per questo progetto, avremo bisogno dei seguenti componenti. 

.. image:: ../python_pi5/img/1.3.2_servo_list.png

√à decisamente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK D'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|

Schema Elettrico
----------------------

.. image:: ../img/image337.png


Procedure Sperimentali
--------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image125.png

**Passo 2:** Accedi alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 1.3.2_Servo_zero.py

Dopo l'esecuzione del programma, il servomotore ruoter√† da 0 gradi a 90 fino a 180 gradi, e poi da 180 gradi a 90 fino a 0 gradi, in un ciclo continuo.

<<<<<<< HEAD
**Codice**
=======
.. warning::

    If there is an error prompt  ``RuntimeError: Cannot determine SOC peripheral base address``, please refer to :ref:`faq_soc` 

**Code**
>>>>>>> 387505b31ef24b78d49967f4b4dcfb048c8f48cb

.. note::

    Puoi **Modificare/Resettare/Copiare/Eseguire/Fermare** il codice qui sotto. Ma prima, devi andare nella directory del codice come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Servo
   from time import sleep

   # Imposta il numero di pin GPIO a cui √® collegato il servomotore
   myGPIO = 18

   # Definisci un fattore di correzione per regolare la larghezza degli impulsi del servo
   myCorrection = 0.45
   maxPW = (2.0 + myCorrection) / 1000  # Calcola la larghezza massima degli impulsi
   minPW = (1.0 - myCorrection) / 1000  # Calcola la larghezza minima degli impulsi

   # Inizializza l'oggetto Servo con larghezze di impulsi personalizzate
   servo = Servo(myGPIO, min_pulse_width=minPW, max_pulse_width=maxPW)

   try:
       while True:
           # Posiziona il servo al centro e attendi
           servo.mid()
           print("mid")  # Indica la posizione attuale
           sleep(0.5)    # Breve pausa di 0.5 secondi

           # Sposta il servo alla sua posizione minima e attendi
           servo.min()
           print("min")  # Indica la posizione attuale
           sleep(1)      # Mantieni la posizione per 1 secondo

           # Riporta il servo alla posizione centrale e attendi
           servo.mid()
           print("mid")  # Indica la posizione attuale
           sleep(0.5)    # Breve pausa di 0.5 secondi

           # Sposta il servo alla sua posizione massima e attendi
           servo.max()
           print("max")  # Indica la posizione attuale
           sleep(1)      # Mantieni la posizione per 1 secondo

   except KeyboardInterrupt:
       # Termina in modo sicuro lo script con un'interruzione da tastiera (Ctrl+C)
       pass
    

**Spiegazione del Codice**

#. Questi importano la classe ``Servo`` per il controllo del servo e la funzione ``sleep`` per i ritardi temporali.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Servo
       from time import sleep

#. Imposta il numero di pin GPIO 18 per collegare il servomotore.

   .. code-block:: python

       # Imposta il numero di pin GPIO a cui √® collegato il servomotore
       myGPIO = 18

#. Queste linee definiscono un fattore di correzione e lo utilizzano per calcolare la larghezza massima e minima degli impulsi per il servo, regolando la gamma di movimento.

   .. code-block:: python

       # Definisci un fattore di correzione per regolare la larghezza degli impulsi del servo
       myCorrection = 0.45
       maxPW = (2.0 + myCorrection) / 1000  # Calcola la larghezza massima degli impulsi
       minPW = (1.0 - myCorrection) / 1000  # Calcola la larghezza minima degli impulsi

#. Inizializza l'oggetto Servo con il pin GPIO specificato e larghezze di impulsi personalizzate.

   .. code-block:: python

       # Inizializza l'oggetto Servo con larghezze di impulsi personalizzate
       servo = Servo(myGPIO, min_pulse_width=minPW, max_pulse_width=maxPW)

#. Il blocco ``try`` contiene un ciclo ``while True`` per muovere continuamente il servo. Il servo viene posizionato a met√†, min e max punti, con ciascuna posizione stampata e mantenuta per una durata specificata.

   .. code-block:: python

       try:
           while True:
               # Posiziona il servo al centro e attendi
               servo.mid()
               print("mid")  # Indica la posizione attuale
               sleep(0.5)    # Breve pausa di 0.5 secondi

               # Sposta il servo alla sua posizione minima e attendi
               servo.min()
               print("min")  # Indica la posizione attuale
               sleep(1)      # Mantieni la posizione per 1 secondo

               # Riporta il servo alla posizione centrale e attendi
               servo.mid()
               print("mid")  # Indica la posizione attuale
               sleep(0.5)    # Breve pausa di 0.5 secondi

               # Sposta il servo alla sua posizione massima e attendi
               servo.max()
               print("max")  # Indica la posizione attuale
               sleep(1)      # Mantieni la posizione per 1 secondo

       except KeyboardInterrupt:
           # Termina in modo sicuro lo script con un'interruzione da tastiera (Ctrl+C)
           pass

