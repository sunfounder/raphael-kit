 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.6_py:

1.1.6 Matrice de Points LED
==============================

Introduction
---------------

Comme son nom l'indique, une matrice de points LED est une matrice compos√©e de LEDs.
L'allumage et l'extinction des LEDs forment diff√©rents caract√®res
et motifs.

Composants N√©cessaires
----------------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../img/list_dot.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|

Sch√©ma de C√¢blage
--------------------

============ ======== ======== =====
Nom T-Board  Physique wiringPi BCM
SPIMOSI      Pin 19   12       MOSI
SPICE0       Pin 24   10       CE0
SPISCLK      Pin 23   14       SCLK
============ ======== ======== =====

.. image:: ../img/schematic_dot.png

Proc√©dures Exp√©rimentales
------------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/1.1.6fritzing.png

**√âtape 2 :** Activez le SPI avant de commencer l'exp√©rience, consultez :ref:`spi_configuration` pour plus de d√©tails. 

**√âtape 3 :** Installer le module :ref:`Luma.LED_Matrix`.

**√âtape 4 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit//python-pi5

**√âtape 5 :** Ex√©cuter le script Python ``1.1.6_LedMatrix.py`` en utilisant l'interpr√©teur Python de l'environnement virtuel ``my_env``.

.. raw:: html

   <run></run>

.. code-block::

    sudo ~/my_env/bin/python3 1.1.6_LedMatrix.py


Apr√®s l'ex√©cution du code, la matrice LED affichera un rectangle pendant deux secondes, puis la lettre 'A' pendant deux secondes, et enfin d√©filera pour afficher le texte "Hello, Nice to meet you!"

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   from luma.core.interface.serial import spi, noop
   from luma.core.render import canvas
   from luma.core.virtual import viewport
   from luma.led_matrix.device import max7219
   from luma.core.legacy import text
   from luma.core.legacy.font import proportional, CP437_FONT, LCD_FONT
   import time

   serial = spi(port=0, device=0, gpio=noop())
   device = max7219(serial, rotate=1)
   virtual = viewport(device, width=200, height=400)

   def displayRectangle():
      with canvas(device) as draw:
         draw.rectangle(device.bounding_box, outline="white", fill="black")

   def displayLetter():
      with canvas(device) as draw:
         text(draw, (0, 0), "A", fill="white", font=proportional(CP437_FONT))

   def scrollToDisplayText():
      with canvas(virtual) as draw:
         text(draw, (0, 0), "Hello, Nice to meet you!", fill="white", font=proportional(CP437_FONT))

      for offset in range(150):
         virtual.set_position((offset,0))
         time.sleep(0.1)

   def main():
      while True:
         displayRectangle()
         time.sleep(2)
         displayLetter()
         time.sleep(2)
         scrollToDisplayText()

   def destroy():
      pass

   if __name__ == '__main__':
      try:
         main()
      except KeyboardInterrupt:
         destroy()

**Explication du Code**

.. code-block:: python

    from luma.core.interface.serial import spi, noop
    from luma.core.render import canvas
    from luma.core.virtual import viewport
    from luma.led_matrix.device import max7219
    from luma.core.legacy import text
    from luma.core.legacy.font import proportional, CP437_FONT, LCD_FONT
    import time

Importer les biblioth√®ques pertinentes, dont ``luma.core`` est une biblioth√®que de composants qui fournit un canvas compatible Pillow pour Python 3, ainsi que d'autres primitives de dessin et fonctionnalit√©s de rendu de texte prenant en charge les petits √©crans sur Raspberry Pi et autres ordinateurs monocartes.
Vous pouvez visiter `https://luma-core.readthedocs.io/en/latest/intro.html <https://luma-core.readthedocs.io/en/latest/intro.html>`_ pour en savoir plus.


.. code-block:: python

    serial = spi(port=0, device=0, gpio=noop())
    device = max7219(serial, rotate=1)

Initialiser la classe ``luma.led_matrix.device.max7219``.

.. note::

    Si vous souhaitez modifier la direction d'affichage de la matrice LED, vous pouvez le faire en modifiant la valeur de rotate, o√π 0 signifie aucune rotation, 1 signifie rotation de 90¬∞ dans le sens des aiguilles d'une montre, 2 signifie rotation de 180¬∞, et 3 signifie rotation de 270¬∞ dans le sens des aiguilles d'une montre.

.. code-block:: python

    def displayRectangle():
        with canvas(device) as draw:
            draw.rectangle(device.bounding_box, outline="white", fill="black")

Afficher un rectangle creux dans la zone de bord de la matrice LED et modifier la valeur de ``fill`` en ``white`` pour afficher un rectangle plein.


.. code-block:: python

    def displayLetter():
        with canvas(device) as draw:
            text(draw, (0, 0), "A", fill="white", font=proportional(CP437_FONT))

Un "A" est affich√© sur la coordonn√©e (0, 0) de la matrice LED, o√π ``CP437_FONT`` est une police adapt√©e aux √©crans de matrice √† points 8*8.

.. code-block:: python

    virtual = viewport(device, width=200, height=400)

Il n'y a pas moyen d'afficher une ligne de texte sur une seule matrice LED 8x8. Nous devons utiliser la m√©thode ``luma.core.virtual.viewport`` pour que le texte puisse d√©filer √† travers la fen√™tre virtuelle.

.. code-block:: python

    def scrollToDisplayText():
        with canvas(virtual) as draw:
            text(draw, (0, 0), "Hello, Nice to meet you!", fill="white", font=proportional(CP437_FONT))

        for offset in range(150):
            virtual.set_position((offset,0))
            time.sleep(0.1)

``scrollToDisplayText()`` impl√©mente "Hello, Nice to meet you!" comme texte d√©filant sur la matrice LED.

D'abord, nous passons virtual comme argument √† la fonction ``canvas()`` afin que nous puissions utiliser la fen√™tre virtuelle comme fen√™tre d'affichage actuelle. Ensuite, la fonction ``text()`` affiche "Hello, Nice to meet you!" sur la matrice LED.

En utilisant la fonction de boucle for, nous d√©pla√ßons la fen√™tre virtuelle dans la direction X afin que nous puissions voir le texte "Hello, Nice to meet you!" d√©filer.


Image du Ph√©nom√®ne
-----------------------

.. image:: ../img/1.1.6led_dot_matrix.JPG
