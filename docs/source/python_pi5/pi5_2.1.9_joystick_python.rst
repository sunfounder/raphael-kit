.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.1.9_py_pi5:

2.1.9 ジョイスティック
=====================================

はじめに
------------

このプロジェクトでは、ジョイスティックの動作を学びます。ジョイスティックを操作し、その結果を画面に表示します。

必要な部品
------------------------------

このプロジェクトには、次のコンポーネントが必要です。 

.. image:: ../python_pi5/img/2.1.9_joystick_list.png

一式を購入するのが便利です、こちらがリンクです： 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前	
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから別々に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_joystick`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-

回路図
-----------------

ジョイスティックのデータを読み取る際、軸ごとにいくつかの違いがあります。X軸およびY軸のデータはアナログで、アナログ値をデジタル値に変換するにはADC0834を使用する必要があります。Z軸のデータはデジタルですので、GPIOを直接読み取ることもできますし、ADCを使用しても読み取ることができます。

.. image:: ../python_pi5/img/2.1.9_joystick_schematic_1.png


.. image:: ../python_pi5/img/2.1.9_joystick_schematic_2.png


実験手順
-----------------------

**ステップ 1:** 回路を組み立てます。

.. image:: ../python_pi5/img/2.1.9_Joystick_circuit.png

**ステップ 2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**ステップ 3:** 実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.6_Joystick_zero.py

コードを実行した後、ジョイスティックを動かし、対応するx、y、Btnの値が画面に表示されます。

.. warning::

    エラー メッセージ ``RuntimeError: Cannot determine SOC peripheral base address`` が表示された場合は、 :ref:`faq_soc` を参照してください。

**コード**

.. note::

    以下のコードを **変更/リセット/コピー/実行/停止** することができます。ただし、その前に ``raphael-kit/python-pi5`` のソースコードパスに移動する必要があります。コードを変更した後、効果を確認するために直接実行できます。


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Button
   import ADC0834
   import time

   # Initialize the button connected to GPIO pin 22
   BtnPin = Button(22)

   # Setup the ADC0834 ADC
   ADC0834.setup()

   try:
       # Main loop to read and print ADC values and button state
       while True:
           # Read X and Y values from ADC channels 0 and 1
           x_val = ADC0834.getResult(0)
           y_val = ADC0834.getResult(1)

           # Read the state of the button (pressed or not)
           Btn_val = BtnPin.value

           # Print the X, Y, and button values
           print('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))

           # Delay of 0.2 seconds before the next read
           time.sleep(0.2)

   # Gracefully handle script termination (e.g., via KeyboardInterrupt)
   except KeyboardInterrupt: 
       pass



**コードの説明**

1. このセクションでは、 ``gpiozero`` ライブラリから ``Button`` クラスをインポートして、GPIOピンに接続されたボタンを管理します。また、ADC0834 ADC（アナログ-デジタルコンバータ）モジュールとのインタフェースのために ``ADC0834`` ライブラリもインポートします。

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Button
       import ADC0834
       import time

2. GPIOピン22に接続されたボタンを初期化し、ADC0834モジュールを使用するためのセットアップを行います。

   .. code-block:: python

       # Initialize the button connected to GPIO pin 22
       BtnPin = Button(22)

       # Setup the ADC0834 ADC
       ADC0834.setup()

3. ジョイスティックのVRXおよびVRY接続はそれぞれADC0834のCH0およびCH1に接続されています。これにより、CH0およびCH1から値を読み取ることが容易になり、それらの値は ``x_val`` および ``y_val`` 変数に保存されます。さらに、ジョイスティックのSW値が読み取られ、 ``Btn_val`` 変数に割り当てられます。取得した  ``x_val``、 ``y_val``、および ``Btn_val`` の値は、 ``print()`` 関数を使用して表示されます。

   .. code-block:: python

       try:
           # Main loop to read and print ADC values and button state
           while True:
               # Read X and Y values from ADC channels 0 and 1
               x_val = ADC0834.getResult(0)
               y_val = ADC0834.getResult(1)

               # Read the state of the button (pressed or not)
               Btn_val = BtnPin.value

               # Print the X, Y, and button values
               print('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))

               # Delay of 0.2 seconds before the next read
               time.sleep(0.2)

       # Gracefully handle script termination (e.g., via KeyboardInterrupt)
       except KeyboardInterrupt: 
           pass
