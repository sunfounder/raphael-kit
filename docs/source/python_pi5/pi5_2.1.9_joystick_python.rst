 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.1.9_py_pi5:

2.1.9 Joystick
=================

Introduction
---------------

Dans ce projet, nous allons apprendre comment fonctionne un joystick. Nous manipulons le 
joystick et affichons les r√©sultats √† l'√©cran.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/2.1.9_joystick_list.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_joystick`
        - \-
    *   - :ref:`cpn_adc0834`
        - \-

Sch√©ma
-----------

Lors de la lecture des donn√©es du joystick, il y a des diff√©rences entre les 
axes : les donn√©es des axes X et Y sont analogiques, il est donc n√©cessaire 
d'utiliser l'ADC0834 pour convertir les valeurs analogiques en valeurs num√©riques. 
Les donn√©es de l'axe Z sont num√©riques, vous pouvez donc utiliser directement le GPIO 
pour les lire, ou utiliser l'ADC.

.. image:: ../python_pi5/img/2.1.9_joystick_schematic_1.png


.. image:: ../python_pi5/img/2.1.9_joystick_schematic_2.png


Proc√©dures exp√©rimentales
-------------------------

**√âtape 1 :** Construisez le circuit.

.. image:: ../python_pi5/img/2.1.9_Joystick_circuit.png

**√âtape 2 :** Allez dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.1.9_Joystick_zero.py

Apr√®s l'ex√©cution du code, tournez le joystick, puis les valeurs correspondantes 
de x, y, Btn s'affichent √† l'√©cran.

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::

    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Button
   import ADC0834
   import time

   # Initialize the button connected to GPIO pin 22
   BtnPin = Button(22)

   # Setup the ADC0834 ADC
   ADC0834.setup()

   try:
       # Main loop to read and print ADC values and button state
       while True:
           # Read X and Y values from ADC channels 0 and 1
           x_val = ADC0834.getResult(0)
           y_val = ADC0834.getResult(1)

           # Read the state of the button (pressed or not)
           Btn_val = BtnPin.value

           # Print the X, Y, and button values
           print('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))

           # Delay of 0.2 seconds before the next read
           time.sleep(0.2)

   # Gracefully handle script termination (e.g., via KeyboardInterrupt)
   except KeyboardInterrupt: 
       pass


**Explication du code**

#. Cette section importe la classe Button de la biblioth√®que ``gpiozero`` pour g√©rer un bouton connect√© √† une broche GPIO. Elle importe √©galement la biblioth√®que ``ADC0834`` pour l'interface avec le module ADC0834 (convertisseur analogique-num√©rique).

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Button
       import ADC0834
       import time

#. Initialise un bouton connect√© √† la broche GPIO 22 et configure le module ADC0834 pour son utilisation.

   .. code-block:: python

       # Initialize the button connected to GPIO pin 22
       BtnPin = Button(22)

       # Setup the ADC0834 ADC
       ADC0834.setup()

#. Les connexions VRX et VRY du joystick sont reli√©es √† CH0 et CH1 de l'ADC0834, respectivement. Cette configuration permet de lire les valeurs de CH0 et CH1, qui sont ensuite enregistr√©es dans les variables ``x_val`` et ``y_val``. De plus, la valeur SW du joystick est lue et attribu√©e √† la variable ``Btn_val``. Les valeurs r√©cup√©r√©es de ``x_val``, ``y_val`` et ``Btn_val`` sont ensuite affich√©es √† l'aide de la fonction ``print()``.

   .. code-block:: python

       try:
           # Main loop to read and print ADC values and button state
           while True:
               # Read X and Y values from ADC channels 0 and 1
               x_val = ADC0834.getResult(0)
               y_val = ADC0834.getResult(1)

               # Read the state of the button (pressed or not)
               Btn_val = BtnPin.value

               # Print the X, Y, and button values
               print('X: %d  Y: %d  Btn: %d' % (x_val, y_val, Btn_val))

               # Delay of 0.2 seconds before the next read
               time.sleep(0.2)

       # Gracefully handle script termination (e.g., via KeyboardInterrupt)
       except KeyboardInterrupt: 
           pass







