.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _2.2.6_py_pi5:

2.2.6 Geschwindigkeitssensormodul
===================================================

Einf√ºhrung
------------------

In diesem Projekt werden wir den Einsatz des Geschwindigkeitssensormoduls kennenlernen. Ein Geschwindigkeitssensormodul ist eine Art Tachometer, der zur Messung der Geschwindigkeit eines rotierenden Objekts wie eines Motors verwendet wird.

Ben√∂tigte Komponenten
------------------------------

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

.. image:: ../python_pi5/img/2.2.6_photo_interrrupter_list.png
    :width: 700
    :align: center

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM SET
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Sie k√∂nnen diese auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_speed_sensor`
        - \-

Schaltplan
-----------------------

.. image:: ../python_pi5/img/2.2.6_photo_interrrupter_schematic.png
    :width: 400
    :align: center

Experimentelle Verfahren
------------------------------

**Schritt 1:** Baue die Schaltung.

.. image:: ../python_pi5/img/2.2.6_photo_interrrupter_circuit.png
    :width: 700
    :align: center


**Schritt 2:** Wechsle das Verzeichnis.

.. raw:: html

   <run></run>

.. code-block::
    
    cd ~/raphael-kit/python-pi5

**Schritt 3:** Ausf√ºhren.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 2.2.6_speed_sensor_module_zero.py

Nachdem der Code ausgef√ºhrt wurde, leuchtet die gr√ºne LED. Wenn Sie ein Hindernis in die L√ºcke des Geschwindigkeitssensormoduls platzieren, wird "Light was blocked" auf dem Bildschirm gedruckt und die rote LED leuchtet auf.
Entfernen Sie das Hindernis und die gr√ºne LED leuchtet wieder auf.

.. warning::

    Wenn die Fehlermeldung ``RuntimeError: Cannot determine SOC peripheral base address`` angezeigt wird, lesen Sie bitte :ref:`faq_soc`

**Code**

.. note::

    Sie k√∂nnen den untenstehenden Code **modifizieren/zur√ºcksetzen/kopieren/ausf√ºhren/stoppen**. Bevor Sie das tun, m√ºssen Sie jedoch zum Quellcodepfad wie ``raphael-kit/python-pi5`` wechseln. Nachdem Sie den Code modifiziert haben, k√∂nnen Sie ihn direkt ausf√ºhren, um den Effekt zu sehen.


.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import LED, Button
   from signal import pause

   # Initialize GPIO pins for the speed sensor and LEDs using GPIO Zero library
   speed_sensor = Button(17, pull_up=False)  # Speed sensor connected to GPIO pin 17 without pull-up
   green_led = LED(27)                      # Green LED connected to GPIO pin 27
   red_led = LED(22)                        # Red LED connected to GPIO pin 22

   def update_leds():
       """
       Update the state of LEDs based on the speed sensor.
       - If the sensor is pressed (triggered), the red LED is turned on and a message is printed.
       - If the sensor is released (not triggered), the green LED is turned on.
       """
       if speed_sensor.is_pressed:
           green_led.off()  # Turn off green LED
           red_led.on()     # Turn on red LED
           print('Light was blocked')  # Print message indicating sensor is triggered
       else:
           green_led.on()   # Turn on green LED
           red_led.off()    # Turn off red LED

   try:
       # Main loop to continuously check sensor state
       while True:
           # Update LEDs based on sensor state changes
           speed_sensor.when_pressed = update_leds   # Update LEDs when sensor is pressed
           speed_sensor.when_released = update_leds  # Update LEDs when sensor is released

   except KeyboardInterrupt:
       # Handle KeyboardInterrupt (Ctrl+C) for a graceful script termination
       pass


**Code-Erkl√§rung**

#. Die ``gpiozero`` Bibliothek wird importiert, um ihre ``LED`` und ``Button`` Klassen f√ºr die Interaktion mit den GPIO-Pins zu nutzen. Die ``signal`` Bibliothek wird f√ºr die ``pause`` Funktion importiert, die verwendet wird, um das Skript am Laufen zu halten.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, Button
       from signal import pause

#. speed_sensor wird als ``Button`` an GPIO Pin 17 gesetzt. Der Parameter ``pull_up=False`` gibt an, dass der interne Pull-up-Widerstand nicht verwendet wird. ``green_led`` und ``red_led`` werden als ``LED`` Objekte initialisiert, die mit den GPIO Pins 27 und 22 verbunden sind.

   .. code-block:: python

       # Initialize GPIO pins for the speed sensor and LEDs using GPIO Zero library
       speed_sensor = Button(17, pull_up=False)  # Speed sensor connected to GPIO pin 17 without pull-up
       green_led = LED(27)                      # Green LED connected to GPIO pin 27
       red_led = LED(22)                        # Red LED connected to GPIO pin 22

#. Die Funktion ``update_leds`` √ºberpr√ºft den Zustand des Geschwindigkeitssensors. Wenn der Sensor ausgel√∂st wird (aktiviert), schaltet sie die gr√ºne LED aus, die rote LED ein und gibt eine Nachricht aus. Wenn der Sensor freigegeben wird, macht sie das Gegenteil.

   .. code-block:: python

       def update_leds():
           """
           Update the state of LEDs based on the speed sensor.
           - If the sensor is pressed (triggered), the red LED is turned on and a message is printed.
           - If the sensor is released (not triggered), the green LED is turned on.
           """
           if speed_sensor.is_pressed:
               green_led.off()  # Turn off green LED
               red_led.on()     # Turn on red LED
               print('Light was blocked')  # Print message indicating sensor is triggered
           else:
               green_led.on()   # Turn on green LED
               red_led.off()    # Turn off red LED

#. Die Hauptschleife √ºberpr√ºft kontinuierlich den Zustand des Geschwindigkeitssensors. Die Attribute ``when_pressed`` und ``when_released`` sind Ereignishandler, die die Funktion ``update_leds`` aufrufen, wenn sich der Sensorzustand √§ndert. Der try-except-Block dient zur Behandlung eines KeyboardInterrupt f√ºr einen eleganten Ausstieg.

   .. code-block:: python

       try:
           # Main loop to continuously check sensor state
           while True:
               # Update LEDs based on sensor state changes
               speed_sensor.when_pressed = update_leds   # Update LEDs when sensor is pressed
               speed_sensor.when_released = update_leds  # Update LEDs when sensor is released

       except KeyboardInterrupt:
           # Handle KeyboardInterrupt (Ctrl+C) for a graceful script termination
           pass





