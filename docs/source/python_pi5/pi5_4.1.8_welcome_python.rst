 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.8_py_pi5:

4.1.5 Bienvenue
=====================================

Introduction
-------------

Dans ce projet, nous utiliserons un capteur PIR pour d√©tecter le mouvement 
des pi√©tons et utiliserons des servos, une LED et un buzzer pour simuler le 
fonctionnement de la porte automatique d'un magasin de proximit√©. Lorsque 
le pi√©ton appara√Æt dans la zone de d√©tection du PIR, la lumi√®re indicatrice
 s'allume, la porte s'ouvre et le buzzer joue une sonnerie d'ouverture.

Composants n√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants.

.. image:: ../python_pi5/img/4.1.8_welcome_list.png
    :width: 800
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_pir`
        - \-
    *   - :ref:`cpn_servo`
        - |link_servo_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

Sch√©ma
--------------------

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO18       Pin 12   1        18
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.8_welcome_schematic.png
   :align: center

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/4.1.8_welcome_circuit.png
    :align: center

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.8_Welcome_zero.py

Apr√®s l'ex√©cution du code, si le capteur PIR d√©tecte le passage de quelqu'un, 
la porte s'ouvrira automatiquement (simul√©e par le servo), allumera l'indicateur 
et jouera la musique de la sonnette. Apr√®s que la musique de la sonnette soit jou√©e, 
le syst√®me fermera automatiquement la porte et √©teindra la lumi√®re indicatrice, 
en attendant que quelqu'un passe √† nouveau.

Il y a deux potentiom√®tres sur le module PIR : l'un pour ajuster la sensibilit√© 
et l'autre pour r√©gler la distance de d√©tection. Pour que le module PIR fonctionne 
mieux, vous devez les tourner tous les deux √† fond dans le sens antihoraire.

.. image:: ../python_pi5/img/4.1.8_PIR_TTE.png
    :width: 400
    :align: center

.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3

   from gpiozero import LED, MotionSensor, Servo, TonalBuzzer
   import time

   # GPIO pin setup for LED, motion sensor (PIR), and buzzer
   ledPin = LED(6)
   pirPin = MotionSensor(21)
   buzPin = TonalBuzzer(27)

   # Servo motor pulse width correction factor and calculation
   myCorrection = 0.45
   maxPW = (2.0 + myCorrection) / 1000  # Maximum pulse width
   minPW = (1.0 - myCorrection) / 1000  # Minimum pulse width

   # Initialize servo with custom pulse widths
   servoPin = Servo(25, min_pulse_width=minPW, max_pulse_width=maxPW)

   # Musical tune for buzzer, with notes and durations
   tune = [('C#4', 0.2), ('D4', 0.2), (None, 0.2),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.6),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.6),
           ('Eb4', 0.2), ('E4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('C4', 0.2), ('B4', 0.2), (None, 0.2),
           ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
           ('B4', 0.2), ('Bb4', 0.5), (None, 0.6),
           ('A4', 0.2), ('G4', 0.2), ('E4', 0.2), 
           ('D4', 0.2), ('E4', 0.2)]

   def setAngle(angle):
       """
       Move the servo to a specified angle.
       :param angle: Angle in degrees (0-180).
       """
       value = float(angle / 180)  # Convert angle to servo value
       servoPin.value = value      # Set servo position
       time.sleep(0.001)           # Short delay for servo movement

   def doorbell():
       """
       Play a musical tune using the buzzer.
       """
       for note, duration in tune:
           buzPin.play(note)       # Play the note
           time.sleep(float(duration))  # Duration of the note
       buzPin.stop()               # Stop buzzer after playing the tune

   def closedoor():
       # Turn off LED and move servo to close door
       ledPin.off()
       for i in range(180, -1, -1):
           setAngle(i)             # Move servo from 180 to 0 degrees
           time.sleep(0.001)       # Short delay for smooth movement
       time.sleep(1)               # Wait after closing door

   def opendoor():
       # Turn on LED, open door (move servo), play tune, close door
       ledPin.on()
       for i in range(0, 181):
           setAngle(i)             # Move servo from 0 to 180 degrees
           time.sleep(0.001)       # Short delay for smooth movement
       time.sleep(1)               # Wait before playing the tune
       doorbell()                  # Play the doorbell tune
       closedoor()                 # Close the door after the tune

   def loop():
       # Main loop to check for motion and operate door
       while True:
           if pirPin.motion_detected:
               opendoor()               # Open door if motion detected
           time.sleep(0.1)              # Short delay in loop

   try:
       loop()
   except KeyboardInterrupt:
       # Clean up GPIO on user interrupt (e.g., Ctrl+C)
       buzPin.stop()
       ledPin.off()


**Explication du Code**

#. Le script commence par importer les modules n√©cessaires. La biblioth√®que ``gpiozero`` est utilis√©e pour interfacer avec la LED, le capteur de mouvement, le moteur servo et le buzzer tonal. Le module ``time`` est utilis√© pour g√©rer les fonctions li√©es au temps.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import LED, MotionSensor, Servo, TonalBuzzer
       import time

#. Initialise la LED, le capteur de mouvement PIR et le buzzer tonal sur leurs broches GPIO respectives.

   .. code-block:: python

       # GPIO pin setup for LED, motion sensor (PIR), and buzzer
       ledPin = LED(6)
       pirPin = MotionSensor(21)
       buzPin = TonalBuzzer(27)

#. Calcule les largeurs d'impulsion maximales et minimales pour le moteur servo, en incorporant un facteur de correction pour un r√©glage fin.

   .. code-block:: python

       # Servo motor pulse width correction factor and calculation
       myCorrection = 0.45
       maxPW = (2.0 + myCorrection) / 1000  # Maximum pulse width
       minPW = (1.0 - myCorrection) / 1000  # Minimum pulse width

#. Initialise le moteur servo sur la broche GPIO 25 avec les largeurs d'impulsion personnalis√©es pour un positionnement pr√©cis.

   .. code-block:: python

       # Initialize servo with custom pulse widths
       servoPin = Servo(25, min_pulse_width=minPW, max_pulse_width=maxPW)

#. La m√©lodie est d√©finie comme une s√©quence de notes (fr√©quence) et de dur√©es (secondes).

   .. code-block:: python

       # Musical tune for buzzer, with notes and durations
       tune = [('C#4', 0.2), ('D4', 0.2), (None, 0.2),
               ('Eb4', 0.2), ('E4', 0.2), (None, 0.6),
               ('F#4', 0.2), ('G4', 0.2), (None, 0.6),
               ('Eb4', 0.2), ('E4', 0.2), (None, 0.2),
               ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
               ('C4', 0.2), ('B4', 0.2), (None, 0.2),
               ('F#4', 0.2), ('G4', 0.2), (None, 0.2),
               ('B4', 0.2), ('Bb4', 0.5), (None, 0.6),
               ('A4', 0.2), ('G4', 0.2), ('E4', 0.2), 
               ('D4', 0.2), ('E4', 0.2)]

#. Fonction pour d√©placer le servo √† un angle sp√©cifi√©. Convertit l'angle en une valeur comprise entre 0 et 1 pour le servo.

   .. code-block:: python

       def setAngle(angle):
           """
           D√©placer le servo √† un angle sp√©cifi√©.
           :param angle: Angle en degr√©s (0-180).
           """
           value = float(angle / 180)  # Convert angle to servo value
           servoPin.value = value      # Set servo position
           time.sleep(0.001)           # Short delay for servo movement

#. Fonction pour jouer une m√©lodie musicale avec le buzzer. Parcourt la liste ``tune``, en jouant chaque note pour sa dur√©e sp√©cifi√©e.

   .. code-block:: python

       def doorbell():
           """
           Play a musical tune using the buzzer.
           """
           for note, duration in tune:
               buzPin.play(note)       # Play the note
               time.sleep(float(duration))  # Duration of the note
           buzPin.stop()               # Stop buzzer after playing the tune

#. Fonctions pour ouvrir et fermer la porte √† l'aide du moteur servo. La fonction ``opendoor`` allume la LED, ouvre la porte, joue la m√©lodie, puis ferme la porte.

   .. code-block:: python

       def closedoor():
           # Turn off LED and move servo to close door
           ledPin.off()
           for i in range(180, -1, -1):
               setAngle(i)             # Move servo from 180 to 0 degrees
               time.sleep(0.001)       # Short delay for smooth movement
           time.sleep(1)               # Wait after closing door

       def opendoor():
           # Turn on LED, open door (move servo), play tune, close door
           ledPin.on()
           for i in range(0, 181):
               setAngle(i)             # Move servo from 0 to 180 degrees
               time.sleep(0.001)       # Short delay for smooth movement
           time.sleep(1)               # Wait before playing the tune
           doorbell()                  # Play the doorbell tune
           closedoor()                 # Close the door after the tune

#. Boucle principale qui v√©rifie constamment la d√©tection de mouvement. Lorsqu'un mouvement est d√©tect√©, elle d√©clenche la fonction ``opendoor``.

   .. code-block:: python

       def loop():
           # Main loop to check for motion and operate door
           while True:
               if pirPin.motion_detected:
                   opendoor()               # Open door if motion detected
               time.sleep(0.1)              # Short delay in loop

#. Ex√©cute la boucle principale et s'assure que le script peut √™tre arr√™t√© avec une commande clavier (Ctrl+C), en √©teignant le buzzer et la LED pour une sortie propre.

   .. code-block:: python

       try:
           loop()
       except KeyboardInterrupt:
           # Clean up GPIO on user interrupt (e.g., Ctrl+C)
           buzPin.stop()
           ledPin.off()

