.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _4.1.6_py_pi5:

4.1.3 Syst√®me d'alarme √† induction magn√©tique
==================================================

Introduction
------------------

Lorsque vous poss√©dez un vase pr√©cieux, vous pouvez cr√©er un syst√®me d'alarme √† induction magn√©tique pour le prot√©ger. Peu importe qui le d√©place, vous entendrez l'alarme imm√©diatement.

Composants n√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants :

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_list.png
  :width: 800
  :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|

Sch√©ma
-----------

============ ======== ======== ===
Nom T-Board  Physique wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_schematic.png
   :align: center

Proc√©dures Exp√©rimentales
--------------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_circuit.png
  :width: 800
  :align: center

**√âtape 2 :** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**√âtape 3 :** Ex√©cutez le programme.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.6_MagneticAlarmSystem_zero.py

Si l'interrupteur √† lames est influenc√© par l'aimant (par exemple, l'interrupteur √† lames est plac√© sur la base et l'aimant est plac√© dans le vase), l'objet est en s√©curit√©. √Ä ce moment-l√†, l'interrupteur √† lames est en √©tat ferm√©, et le buzzer reste silencieux. 
Apr√®s avoir retir√© l'aimant (par exemple, si le vase est vol√©), l'interrupteur √† lames n'est plus affect√© par le magn√©tisme, l'interrupteur s'ouvre et le buzzer √©met une alarme.
.. warning::

    Si vous recevez le message d'erreur ``RuntimeError: Cannot determine SOC peripheral base address``, veuillez consulter :ref:`faq_soc`

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au chemin du code source comme ``raphael-kit/python-pi5``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Buzzer, Button
   import time

   # Initialize the buzzer on GPIO pin 27
   buzzer = Buzzer(27)
   # Initialize the reed switch on GPIO pin 17 with pull-up resistor enabled
   reed_switch = Button(17, pull_up=True)

   try:
       while True:
           # Check if the reed switch is pressed
           if reed_switch.is_pressed:
               # Turn off the buzzer if reed switch is pressed
               buzzer.off()
           else:
               # If reed switch is not pressed, beep the buzzer
               buzzer.on()
               time.sleep(0.1)  # Buzzer on for 0.1 seconds
               buzzer.off()
               time.sleep(0.1)  # Buzzer off for 0.1 seconds

   except KeyboardInterrupt:
       # Turn off the buzzer when the program is interrupted (e.g., keyboard interrupt)
       buzzer.off()
       pass


**Explication du Code**

#. Cette ligne importe les classes n√©cessaires ``Buzzer`` et ``Button`` de la biblioth√®que ``gpiozero`` ainsi que le module ``time`` de la biblioth√®que standard de Python.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Buzzer, Button
       import time

#. L'objet ``Buzzer`` est reli√© √† la broche GPIO 27, et un ``Button`` (agissant comme un interrupteur √† lames) est connect√© √† la broche GPIO 17 avec l'argument ``pull_up=True``, activant ainsi la r√©sistance pull-up interne.

   .. code-block:: python

       # Initialize the buzzer on GPIO pin 27
       buzzer = Buzzer(27)
       # Initialize the reed switch on GPIO pin 17 with pull-up resistor enabled
       reed_switch = Button(17, pull_up=True)

#. Le bloc ``try`` contient une boucle infinie (``while True``) v√©rifiant l'√©tat de l'interrupteur √† lames. Si l'interrupteur est activ√© (``is_pressed``), le buzzer est √©teint. Sinon, le buzzer √©met un bip (0,1 seconde allum√©, 0,1 seconde √©teint).

   .. code-block:: python

       try:
           while True:
               # Check if the reed switch is pressed
               if reed_switch.is_pressed:
                   # Turn off the buzzer if reed switch is pressed
                   buzzer.off()
               else:
                   # If reed switch is not pressed, beep the buzzer
                   buzzer.on()
                   time.sleep(0.1)  # Buzzer on for 0.1 seconds
                   buzzer.off()
                   time.sleep(0.1)  # Buzzer off for 0.1 seconds

#. Le bloc ``except`` g√®re une interruption clavier (comme Ctrl+C dans le terminal) pour √©teindre le buzzer en toute s√©curit√©.

   .. code-block:: python

       except KeyboardInterrupt:
           # Turn off the buzzer when the program is interrupted (e.g., keyboard interrupt)
           buzzer.off()
           pass
