.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© Unirsi?**

    - **Supporto Tecnico Esperto**: Risolvi i problemi post-vendita e affronta le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni festive.

    üëâ Sei pronto a esplorare e creare con noi? Clicca [|link_sf_facebook|] e unisciti oggi stesso!

.. _4.1.6_py_pi5:

4.1.3 Sistema di Allarme a Induzione Magnetica
====================================================

Introduzione
-----------------

Hai un vaso prezioso? Puoi realizzare un sistema di allarme a induzione magnetica per proteggerlo: chiunque lo sposti, sentirai subito l'allarme.

Componenti Necessari
-------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_list.png
  :width: 800
  :align: center

√à decisamente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_reed_switch`
        - |link_reed_switch_buy|


Diagramma Schematica
-----------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
============ ======== ======== ===

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_schematic.png
   :align: center

Procedure Sperimentali
-------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../python_pi5/img/4.1.6_magneticalarmsystem_circuit.png
  :width: 800
  :align: center

**Passo 2:** Vai nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/python-pi5

**Passo 3:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

    sudo python3 4.1.6_MagneticAlarmSystem_zero.py

Se l'interruttore reed √® influenzato dal magnete (ad esempio, se l'interruttore reed √® posizionato sulla base e il magnete nel vaso), l'oggetto √® al sicuro. In questo momento, l'interruttore reed √® chiuso e il buzzer rimane silenzioso.
Quando il magnete viene rimosso (ad esempio, se il vaso viene rubato), l'interruttore reed non √® pi√π influenzato dal magnetismo, si apre e il buzzer suona l'allarme.

<<<<<<< HEAD
**Codice**
=======
.. warning::

    If there is an error prompt  ``RuntimeError: Cannot determine SOC peripheral base address``, please refer to :ref:`faq_soc` 

**Code**
>>>>>>> 387505b31ef24b78d49967f4b4dcfb048c8f48cb

.. note::
    Puoi **Modificare/Reimpostare/Copiare/Eseguire/Interrompere** il codice sottostante. Ma prima di farlo, devi andare nel percorso del codice sorgente come ``raphael-kit/python-pi5``. Dopo aver modificato il codice, puoi eseguirlo direttamente per vedere l'effetto.

.. raw:: html

    <run></run>

.. code-block:: python

   #!/usr/bin/env python3
   from gpiozero import Buzzer, Button
   import time

   # Inizializza il buzzer sul pin GPIO 27
   buzzer = Buzzer(27)
   # Inizializza l'interruttore reed sul pin GPIO 17 con il resistore pull-up abilitato
   reed_switch = Button(17, pull_up=True)

   try:
       while True:
           # Verifica se l'interruttore reed √® premuto
           if reed_switch.is_pressed:
               # Spegni il buzzer se l'interruttore reed √® premuto
               buzzer.off()
           else:
               # Se l'interruttore reed non √® premuto, attiva il buzzer
               buzzer.on()
               time.sleep(0.1)  # Buzzer acceso per 0.1 secondi
               buzzer.off()
               time.sleep(0.1)  # Buzzer spento per 0.1 secondi

   except KeyboardInterrupt:
       # Spegni il buzzer quando il programma viene interrotto (ad esempio, con un'interruzione da tastiera)
       buzzer.off()
       pass


**Spiegazione del Codice**

#. Importa le classi necessarie ``Buzzer`` e ``Button`` dalla libreria ``gpiozero``, e il modulo ``time`` dalla libreria standard di Python.

   .. code-block:: python

       #!/usr/bin/env python3
       from gpiozero import Buzzer, Button
       import time

#. L'oggetto ``Buzzer`` √® collegato al pin GPIO 27, e un ``Button`` (che funge da interruttore reed) √® collegato al pin GPIO 17 con l'argomento ``pull_up=True``, abilitando il resistore pull-up interno.

   .. code-block:: python

       # Inizializza il buzzer sul pin GPIO 27
       buzzer = Buzzer(27)
       # Inizializza l'interruttore reed sul pin GPIO 17 con il resistore pull-up abilitato
       reed_switch = Button(17, pull_up=True)

#. Il blocco ``try`` contiene un ciclo infinito (``while True``) che verifica lo stato dell'interruttore reed. Se √® premuto (``is_pressed``), il buzzer viene spento. Altrimenti, il buzzer emette un suono intermittente (0.1 secondi acceso, 0.1 secondi spento).

   .. code-block:: python

       try:
           while True:
               # Verifica se l'interruttore reed √® premuto
               if reed_switch.is_pressed:
                   # Spegni il buzzer se l'interruttore reed √® premuto
                   buzzer.off()
               else:
                   # Se l'interruttore reed non √® premuto, attiva il buzzer
                   buzzer.on()
                   time.sleep(0.1)  # Buzzer acceso per 0.1 secondi
                   buzzer.off()
                   time.sleep(0.1)  # Buzzer spento per 0.1 secondi

#. Il blocco ``except`` gestisce un'interruzione da tastiera (come Ctrl+C) per spegnere il buzzer in sicurezza.

   .. code-block:: python

       except KeyboardInterrupt:
             # Turn off the buzzer when the program is interrupted (e.g., keyboard interrupt)
           buzzer.off()
           pass        
