.. note::

    Â¡Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. SumÃ©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **Â¿Por quÃ© unirse?**

    - **Soporte Experto**: Resuelve problemas postventa y desafÃ­os tÃ©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: ObtÃ©n acceso anticipado a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos mÃ¡s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones festivas.

    ðŸ‘‰ Â¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y Ãºnete hoy mismo!

.. _3.1.1_c_pi5:

3.1.1 Dispositivo de Conteo
============================

IntroducciÃ³n
---------------

AquÃ­ crearemos un sistema contador que muestra nÃºmeros, compuesto por un sensor 
PIR y una pantalla de 4 dÃ­gitos. Cuando el PIR detecta que alguien pasa, el nÃºmero 
en la pantalla de 4 dÃ­gitos aumentarÃ¡ en 1. Puedes usar este contador para contar 
el nÃºmero de personas que pasan por un pasillo.




Componentes Necesarios
--------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/list_Counting_Device1.png
    :align: center

.. image:: ../img/list_Counting_Device2.png
    :align: center

Es definitivamente conveniente comprar un kit completo, aquÃ­ estÃ¡ el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

TambiÃ©n puedes comprarlos por separado desde los enlaces a continuaciÃ³n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCIÃ“N DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_4_digit`
        - \-
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_pir`
        - \-

Diagrama EsquemÃ¡tico
-------------------------

============ ======== ======== ===
T-Board Name physical wiringPi BCM
GPIO17       Pin 11   0        17
GPIO27       Pin 13   2        27
GPIO22       Pin 15   3        22
SPIMOSI      Pin 19   12       10
GPIO18       Pin 12   1        18
GPIO23       Pin 16   4        23
GPIO24       Pin 18   5        24
GPIO26       Pin 37   25       26
============ ======== ======== ===

.. image:: ../img/Schematic_three_one1.png
   :align: center

Procedimientos Experimentales
--------------------------------

**Paso 1**: Construye el circuito.

.. image:: ../img/image235.png

**Paso 2**: Ve a la carpeta del cÃ³digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.1/

**Paso 3**: Compila el cÃ³digo.

.. raw:: html

   <run></run>

.. code-block:: 

    gcc 3.1.1_CountingDevice.c -lwiringPi

**Paso 4**: Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./a.out

DespuÃ©s de ejecutar el cÃ³digo, cuando el PIR detecte que alguien estÃ¡ pasando, 
el nÃºmero en la pantalla de 4 dÃ­gitos aumentarÃ¡ en 1.

Hay dos potenciÃ³metros en el mÃ³dulo PIR: uno es para ajustar la sensibilidad y el otro 
para ajustar la distancia de detecciÃ³n. Para que el mÃ³dulo PIR funcione mejor, debes 
girar ambos en sentido antihorario hasta el final.

.. image:: ../img/PIR_TTE.png
    :width: 400
    :align: center

.. note::

    Si no funciona despuÃ©s de ejecutar el cÃ³digo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", por favor consulta :ref:`install_wiringpi`.

**ExplicaciÃ³n del CÃ³digo**

.. code-block:: c

    voidÂ display()
    {
    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(0);
    Â Â Â Â hc595_shift(number[counterÂ %Â 10]);

    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(1);
    Â Â Â Â hc595_shift(number[counterÂ %Â 100Â /Â 10]);

    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(2);
    Â Â Â Â hc595_shift(number[counterÂ %Â 1000Â /Â 100]);
    Â 
    Â Â Â Â clearDisplay();
    Â Â Â Â pickDigit(3);
    Â Â Â Â hc595_shift(number[counterÂ %Â 10000Â /Â 1000]);
    }

Primero, inicia la pantalla de cuatro segmentos y escribe el nÃºmero de un solo dÃ­gito.
Luego, inicia la pantalla del tercer segmento y escribe el dÃ­gito de las decenas; despuÃ©s 
de eso, inicia la segunda y la primera pantalla de segmentos respectivamente y escribe los 
dÃ­gitos de las centenas y millares respectivamente. Debido a que la velocidad de actualizaciÃ³n 
es muy rÃ¡pida, vemos una pantalla completa de cuatro dÃ­gitos.

.. code-block:: c

    voidÂ loop(){
    Â Â Â Â intÂ currentStateÂ =0;
    Â Â Â Â intÂ lastState=0;
    Â Â Â Â while(1){
    Â Â Â Â Â Â Â Â display();
    Â Â Â Â Â Â Â Â currentState=digitalRead(sensorPin);
    Â Â Â Â Â Â Â Â if((currentState==0)&&(lastState==1)){
    Â Â Â Â Â Â Â Â Â Â Â Â counterÂ +=1;
    Â Â Â Â Â Â Â Â }
    Â Â Â Â Â Â Â Â lastState=currentState;
    Â Â Â Â }
    }

Esta es la funciÃ³n principal: muestra el nÃºmero en la pantalla de segmentos de 4 
dÃ­gitos y lee el valor del PIR. Cuando el PIR detecta que alguien pasa, el nÃºmero 
en la pantalla de 4 dÃ­gitos aumentarÃ¡ en 1.

Imagen del FenÃ³meno
-------------------------

.. image:: ../img/image236.jpeg
   :align: center
