 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.6_c_pi5:

2.2.6 Module de Capteur de Vitesse
======================================

Introduction
------------------

Dans ce projet, nous allons apprendre √† utiliser le module de capteur de vitesse. Un module de capteur de vitesse est un type de tachym√®tre utilis√© pour mesurer la vitesse d'un objet en rotation, comme un moteur.

Composants N√©cessaires
------------------------------

Pour ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/2.2.6component.png
    :width: 700
    :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_speed_sensor`
        - \-

Sch√©ma de Circuit
-----------------------

.. image:: ../img/2.2.6circuit.png
    :width: 400
    :align: center

Proc√©dures Exp√©rimentales
------------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/2.2.6fritzing.png
    :width: 700
    :align: center

**√âtape 2 :** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::
    
    cd ~/raphael-kit/c/2.2.6/

**√âtape 3 :** Compiler.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.6_speed_sensor_module.c -lwiringPi

**√âtape 4 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, la LED verte s'allumera. Si vous placez un obstacle 
dans l'espace du module de capteur de vitesse, le message "light blocked" 
sera affich√© √† l'√©cran et la LED rouge s'allumera. Retirez l'obstacle et la LED verte s'allumera √† nouveau.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : "wiringPi.h: No such file or directory", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define speedPin        0  
    #define Gpin        2
    #define Rpin        3

    void LED(int color)
    {
        pinMode(Gpin, OUTPUT);
        pinMode(Rpin, OUTPUT);
        if (color == 0){
            digitalWrite(Rpin, HIGH);
            digitalWrite(Gpin, LOW);
        }
        else if (color == 1){
            digitalWrite(Rpin, LOW);
            digitalWrite(Gpin, HIGH);
        }
    }

    void Print(int x){
        if ( x == 0 ){
            printf("Light was blocked\n");
        }
    }

    int main(void){

        if(wiringPiSetup() == -1){ //when initialize wiring failed,print messageto screen
            printf("setup wiringPi failed !");
            return 1; 
        }

        pinMode(speedPin, INPUT);
        int temp;
        while(1){
            //Reverse the input of speedPin
            if ( digitalRead(speedPin) == 0 ){  
                temp = 1;
            }
            if ( digitalRead(speedPin) == 1 ){
                temp = 0;
            }

            LED(temp);
            Print(temp);
        }
        return 0;
    }

**Explication du Code**

.. code-block:: c

    void LED(int color)
    {
        pinMode(Gpin, OUTPUT);
        pinMode(Rpin, OUTPUT);
        if (color == 0){
            digitalWrite(Rpin, HIGH);
            digitalWrite(Gpin, LOW);
        }
        else if (color == 1){
            digitalWrite(Rpin, LOW);
            digitalWrite(Gpin, HIGH);
        }
    }    

D√©finissez une fonction ``LED()`` pour contr√¥ler les 2 LED, le param√®tre de cette fonction est ``color``.

Lorsque ``color`` est 0, d√©finissez ``Rpin`` sur ``HIGH`` (allumer la LED rouge) et ``Gpin`` sur ``LOW`` (√©teindre la LED verte); lorsque ``color`` est 1, allumez alors la LED verte et √©teignez la LED rouge.


.. code-block:: c

    while(1){
        //Reverse the input of speedPin
        if ( digitalRead(speedPin) == 0 ){  
            temp = 1;
        }
        if ( digitalRead(speedPin) == 1 ){
            temp = 0;
        }

        LED(temp);
        Print(temp);
    }

Lorsque vous placez un obstacle dans l'espace du module de capteur de vitesse, ``speedPin`` est √† un niveau bas (0), alors appelez la fonction ``LED(1)`` pour allumer la LED verte et "Light was blocked!" est affich√©.


**Image du Ph√©nom√®ne**
-----------------------

.. image:: ../img/2.2.6photo_interrrupter.JPG
   :width: 500
   :align: center