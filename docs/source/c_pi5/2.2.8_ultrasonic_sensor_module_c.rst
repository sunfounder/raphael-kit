 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.8_c_pi5:

2.2.8 Module de Capteur Ultrasonique
=========================================

Introduction
---------------

Le capteur ultrasonique utilise des ultrasons pour d√©tecter avec pr√©cision des objets et mesurer des distances. Il √©met des ondes ultrasonores et les convertit en signaux √©lectroniques.

Composants N√©cessaires
-------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_2.2.5.png

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    * - Nom
      - ARTICLES DANS CE KIT
      - LIEN
    * - Kit Raphael
      - 337
      - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    * - INTRODUCTION DES COMPOSANTS
      - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
      - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
      - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
      - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
      - |link_ultrasonic_buy|

Sch√©ma de C√¢blage
-----------------

.. image:: ../img/image329.png


Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image220.png

**√âtape 2 :** Aller dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.2.8/

**√âtape 3 :** Compiler le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.8_Ultrasonic.c -lwiringPi

**√âtape 4 :** Ex√©cuter le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Lorsque le code est ex√©cut√©, le module capteur ultrasonique d√©tecte la distance entre
l'obstacle devant lui et le module lui-m√™me, puis la valeur de la distance sera affich√©e √† l'√©cran.
.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a un message d'erreur : "wiringPi.h: No such file or directory", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <sys/time.h>

    #define Trig    4
    #define Echo    5

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

    float disMeasure(void)
    {
        struct timeval tv1;
        struct timeval tv2;
        long time1, time2;
    float dis;

        digitalWrite(Trig, LOW);
        delayMicroseconds(2);

        digitalWrite(Trig, HIGH);
        delayMicroseconds(10);      
        digitalWrite(Trig, LOW);
                                    
        while(!(digitalRead(Echo) == 1));   
        gettimeofday(&tv1, NULL);           

        while(!(digitalRead(Echo) == 0));   
        gettimeofday(&tv2, NULL);           

        time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;   
        time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

        dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

        return dis;
    }

    int main(void)
    {
        float dis;
        if(wiringPiSetup() == -1){ //when initialize wiring failed,print message to screen
            printf("setup wiringPi failed !");
            return 1;
        }

        ultraInit();
        
        while(1){
            dis = disMeasure();
            printf("%0.2f cm\n\n",dis);
            delay(300);
        }

        return 0;
    }

**Explication du Code**

.. code-block:: c

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

Initialiser la broche ultrasonique; en m√™me temps, r√©gler Echo sur entr√©e, Trig sur sortie.

.. code-block:: c

    float disMeasure(void){};

Cette fonction est utilis√©e pour r√©aliser la fonction du capteur ultrasonique en calculant la distance de d√©tection de retour.

.. code-block:: c

    struct timeval tv1;
    struct timeval tv2;

La structure timeval est utilis√©e pour stocker l'heure actuelle. La structure compl√®te est la suivante :

.. code-block:: c

    struct timeval
    {
    __time_t tv_sec;        /* Seconds. */
    __suseconds_t tv_usec;  /* Microseconds. */
    };

Ici, tv_sec repr√©sente les secondes √©coul√©es depuis l'√©poque lors de la cr√©ation de la 
structure timeval. Tv_usec repr√©sente les microsecondes ou une fraction de secondes.

.. code-block:: c

    digitalWrite(Trig, HIGH);
    delayMicroseconds(10);     
    digitalWrite(Trig, LOW);

Une impulsion ultrasonique de 10us est envoy√©e.

.. code-block:: c

    while(!(digitalRead(Echo) == 1));
    gettimeofday(&tv1, NULL);

Cette boucle vide est utilis√©e pour s'assurer que lorsqu'un signal 
de d√©clenchement est envoy√©, il n'y a pas de signal d'√©cho interf√©rent, 
puis obtenir l'heure actuelle.

.. code-block:: c

    while(!(digitalRead(Echo) == 0)); 
    gettimeofday(&tv2, NULL);

Cette boucle vide est utilis√©e pour s'assurer que l'√©tape suivante n'est pas 
ex√©cut√©e tant que le signal d'√©cho n'est pas re√ßu, puis obtenir l'heure actuelle.

.. code-block:: c

    time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;
    time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

Convertir le temps stock√© par la structure timeval en temps total en microsecondes.

.. code-block:: c

    dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

La distance est calcul√©e par l'intervalle de temps et la vitesse de propagation du 
son. La vitesse du son dans l'air : 34000 cm/s.

Image du Ph√©nom√®ne
------------------

.. image:: ../img/image221.jpeg