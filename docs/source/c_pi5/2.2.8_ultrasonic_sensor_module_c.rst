.. note::

    こんにちは、SunFounderのRaspberry Pi & Arduino & ESP32愛好家コミュニティへようこそ！Facebook上でRaspberry Pi、Arduino、ESP32についてもっと深く掘り下げ、他の愛好家と交流しましょう。

    **参加する理由は？**

    - **エキスパートサポート**：コミュニティやチームの助けを借りて、販売後の問題や技術的な課題を解決します。
    - **学び＆共有**：ヒントやチュートリアルを交換してスキルを向上させましょう。
    - **独占的なプレビュー**：新製品の発表や先行プレビューに早期アクセスしましょう。
    - **特別割引**：最新製品の独占割引をお楽しみください。
    - **祭りのプロモーションとギフト**：ギフトや祝日のプロモーションに参加しましょう。

    👉 私たちと一緒に探索し、創造する準備はできていますか？[|link_sf_facebook|]をクリックして今すぐ参加しましょう！

.. _2.2.8_c_pi5:

2.2.8 超音波センサモジュール
====================================

はじめに
--------------

超音波センサは、オブジェクトの検出や距離の測定に超音波を使用して正確に行います。超音波波を送信し、それを電子信号に変換します。

必要な部品
------------------------------

このプロジェクトでは、以下の部品が必要です。

.. image:: ../img/list_2.2.5.png

キット全体を購入するのは確かに便利です。こちらがリンクです：

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - 名前
        - このキットのアイテム
        - リンク
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

以下のリンクから個別に購入することもできます。

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - コンポーネントの紹介
        - 購入リンク

    *   - :ref:`cpn_gpio_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic_sensor`
        - |link_ultrasonic_buy|

回路図
-----------------

.. image:: ../img/image329.png


実験手順
-----------------------

**ステップ1:** 回路を組み立てます。

.. image:: ../img/image220.png

**ステップ2:** コードのフォルダに移動します。

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.2.8/

**ステップ3:** コードをコンパイルします。

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.8_Ultrasonic.c -lwiringPi

**ステップ4:** 実行可能ファイルを実行します。

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

コードを実行すると、超音波センサモジュールは前方の障害物とモジュール自体との距離を検出し、その距離値が画面に表示されます。

.. note::

    実行後に動作しない、またはエラープロンプト「wiringPi.h: No such file or directory」が表示される場合は、 :ref:`install_wiringpi` を参照してください。

**コード**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #include <sys/time.h>

    #define Trig    4
    #define Echo    5

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

    float disMeasure(void)
    {
        struct timeval tv1;
        struct timeval tv2;
        long time1, time2;
    float dis;

        digitalWrite(Trig, LOW);
        delayMicroseconds(2);

        digitalWrite(Trig, HIGH);
        delayMicroseconds(10);      
        digitalWrite(Trig, LOW);
                                    
        while(!(digitalRead(Echo) == 1));   
        gettimeofday(&tv1, NULL);           

        while(!(digitalRead(Echo) == 0));   
        gettimeofday(&tv2, NULL);           

        time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;   
        time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

        dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

        return dis;
    }

    int main(void)
    {
        float dis;
        if(wiringPiSetup() == -1){ //when initialize wiring failed,print message to screen
            printf("setup wiringPi failed !");
            return 1;
        }

        ultraInit();
        
        while(1){
            dis = disMeasure();
            printf("%0.2f cm\n\n",dis);
            delay(300);
        }

        return 0;
    }

**コード説明**

.. code-block:: c

    void ultraInit(void)
    {
        pinMode(Echo, INPUT);
        pinMode(Trig, OUTPUT);
    }

超音波ピンを初期化し、同時にEchoを入力に、Trigを出力に設定します。

.. code-block:: c

    float disMeasure(void){};

この関数は、戻り検出距離を計算することで超音波センサの機能を実現するために使用されます。

.. code-block:: c

    struct timeval tv1;
    struct timeval tv2;

struct timevalは、現在の時刻を保存するために使用される構造体です。完全な構造体は以下の通りです：

.. code-block:: c

    struct timeval
    {
    __time_t tv_sec;        /* Seconds. */
    __suseconds_t tv_usec;  /* Microseconds. */
    };

ここで、tv_secはEpochがstruct timevalを作成した際の秒を表し、tv_usecはマイクロ秒または秒の一部を表します。

.. code-block:: c

    digitalWrite(Trig, HIGH);
    delayMicroseconds(10);     
    digitalWrite(Trig, LOW);

10usの超音波パルスが送信されています。

.. code-block:: c

    while(!(digitalRead(Echo) == 1));
    gettimeofday(&tv1, NULL);

この空のループは、トリガーシグナルを送信したときに干渉するエコーシグナルがないことを確認し、現在の時間を取得するために使用されます。

.. code-block:: c

    while(!(digitalRead(Echo) == 0)); 
    gettimeofday(&tv2, NULL);

この空のループは、エコーシグナルが受信されるまで次のステップが実行されないようにするため、そして現在の時間を取得するために使用されます。

.. code-block:: c

    time1 = tv1.tv_sec * 1000000 + tv1.tv_usec;
    time2  = tv2.tv_sec * 1000000 + tv2.tv_usec;

struct timevalで保存された時間を完全なマイクロ秒の時間に変換します。

.. code-block:: c

    dis = (float)(time2 - time1) / 1000000 * 34000 / 2;  

時間間隔と音の伝播速度によって距離が計算されます。空気中の音の速度：34000cm/s。

現象の画像
------------------

.. image:: ../img/image221.jpeg