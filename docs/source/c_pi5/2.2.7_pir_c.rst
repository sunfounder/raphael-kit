.. note::

    Ciao, benvenuto nella community SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Immergiti pi√π a fondo in Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime esclusive.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.7_c_pi5:

2.2.7 PIR
================

Introduzione
----------------

In questo progetto realizzeremo un dispositivo utilizzando sensori piroelettrici 
a infrarossi per il corpo umano. Quando qualcuno si avvicina al LED, il LED si 
accender√† automaticamente. Se non rileva movimento, la luce si spegner√†. Questo 
sensore di movimento a infrarossi √® un tipo di sensore in grado di rilevare gli 
infrarossi emessi da persone e animali.

Componenti necessari
------------------------

In questo progetto abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_2.2.4_pir2.png

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTE
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb_led`
        - |link_rgb_led_buy|
    *   - :ref:`cpn_pir`
        - \-

Schema elettrico
--------------------

.. image:: ../img/image327.png


Procedure sperimentali
-------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image214.png

**Passo 2:** Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.2.7/

**Passo 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.7_PIR.c -lwiringPi

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del codice, il sensore PIR rileva l'ambiente circostante e accende il LED RGB in giallo se rileva qualcuno che passa vicino. 

Ci sono due potenziometri sul modulo PIR: uno per regolare la sensibilit√† e l'altro per regolare la distanza di rilevamento. Per far funzionare meglio il modulo PIR, √® necessario ruotarli entrambi in senso antiorario fino in fondo.

.. image:: ../img/PIR_TTE.png
    :width: 400
    :align: center

.. note::

    Se non funziona dopo l'esecuzione o compare un messaggio di errore: ``wiringPi.h No such file or directory``, consulta :ref:`install_wiringpi`.


Codice
---------

.. code-block:: c

    #include <wiringPi.h>
    #include <softPwm.h>
    #include <stdio.h>
    #define uchar unsigned char

    #define pirPin    0     //il pir √® connesso a GPIO0
    #define redPin    1
    #define greenPin  2
    #define bluePin   3

    void ledInit(void){
        softPwmCreate(redPin,  0, 100);
        softPwmCreate(greenPin,0, 100);
        softPwmCreate(bluePin, 0, 100);
    }
    void ledColorSet(uchar r_val, uchar g_val, uchar b_val){
        softPwmWrite(redPin,   r_val);
        softPwmWrite(greenPin, g_val);
        softPwmWrite(bluePin,  b_val);
    }
    int main(void)
    {
        int pir_val;
        if(wiringPiSetup() == -1){ //se l'inizializzazione di wiring fallisce, stampa un messaggio sullo schermo
            printf("setup wiringPi failed !");
            return 1;
        }
        ledInit();
        pinMode(pirPin, INPUT);
        while(1){
            pir_val = digitalRead(pirPin);
            if(pir_val== 1){ //se il sensore pir rileva un livello ALTO
                ledColorSet(0xff,0xff,0x00); 
            }
            else {
                ledColorSet(0x00,0x00,0xff); 
            }
        }
        return 0;
    }

Spiegazione del Codice
--------------------------

.. code-block:: c

    void ledInit(void);
    void ledColorSet(uchar r_val, uchar g_val, uchar b_val);

Questi codici sono usati per impostare il colore del LED RGB. Per ulteriori dettagli, consulta :ref:`1.1.2_c_pi5`.

.. code-block:: c

    int main(void)
    {
        int pir_val;
        //‚Ä¶‚Ä¶ 
        pinMode(pirPin, INPUT);
        while(1){
            pir_val = digitalRead(pirPin);
            if(pir_val== 1){ //se il sensore pir rileva un livello ALTO
                ledColorSet(0xff,0xff,0x00); 
            }
            else {
                ledColorSet(0x00,0x00,0xff); 
            }
        }
        return 0;
    }

Quando il sensore PIR rileva lo spettro infrarosso umano, il LED RGB emette luce gialla; in caso contrario, emette luce blu.

Immagine del fenomeno
---------------------------

.. image:: ../img/image215.jpeg
