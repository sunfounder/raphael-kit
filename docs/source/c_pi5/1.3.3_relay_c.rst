.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete m√°s en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _1.3.3_c_pi5:

1.3.3 Rel√©
=================

Introducci√≥n
---------------

En este proyecto, aprenderemos a usar un rel√©. Es uno de los componentes m√°s utilizados 
en los sistemas de control autom√°tico. Cuando el voltaje, corriente, temperatura, presi√≥n, etc., 
alcanza, supera o es inferior al valor predeterminado, el rel√© conectar√° o interrumpir√° el 
circuito para controlar y proteger el equipo.

Componentes Requeridos
------------------------------

En este proyecto, necesitamos los siguientes componentes. 

.. image:: ../img/list_1.3.4.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ART√çCULOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_relay`
        - |link_relay_buy|
    *   - :ref:`cpn_diode`
        - |link_diode_buy|

Diagrama Esquem√°tico
---------------------------

.. image:: ../img/image345.png


Procedimientos Experimentales
---------------------------------

**Paso 1:** Construir el circuito.

.. image:: ../img/image144.png

**Paso 2:** Abrir el archivo de c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.3.3

**Paso 3:** Compilar el c√≥digo.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.3_Relay.c -lwiringPi


**Paso 4:** Ejecutar el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Despu√©s de ejecutar el c√≥digo, el LED se encender√°. Adem√°s, se puede
escuchar un tic-tac causado por la ruptura del contacto normalmente cerrado y 
el cierre del contacto normalmente abierto.

.. note::

    Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", consulte :ref:`install_wiringpi`.

**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define RelayPin 0

    int main(void){
        if(wiringPiSetup() == -1){ //when initialize wiring failed, print message to screen
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(RelayPin, OUTPUT);   //set GPIO17(GPIO0) output
        while(1){
            // Tick
            printf("Relay Open......\n");
            digitalWrite(RelayPin, LOW);
            delay(1000);
            // Tock
            printf("......Relay Close\n");
            digitalWrite(RelayPin, HIGH);
            delay(1000);
        }

        return 0;
    }

**Explicaci√≥n del C√≥digo**

.. code-block:: c

    digitalWrite(RelayPin, LOW);

Establecer el puerto I/O a nivel bajo (0V), por lo tanto, el transistor no est√° energizado
y la bobina no est√° alimentada. No hay fuerza electromagn√©tica, por lo que
el rel√© se abre y el LED no se enciende.

.. code-block:: c

    digitalWrite(RelayPin, HIGH);

Establecer el puerto I/O a nivel alto (5V) para energizar el transistor. La bobina
del rel√© est√° alimentada y genera fuerza electromagn√©tica, y el
rel√© se cierra y el LED se enciende.

Imagen del Fen√≥meno
-------------------------

.. image:: ../img/image145.jpeg