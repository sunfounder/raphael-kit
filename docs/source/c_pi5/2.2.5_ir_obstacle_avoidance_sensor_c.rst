.. note::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts su Facebook! Immergiti pi√π a fondo in Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti?**

    - **Supporto esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime esclusive.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _2.2.5_c_pi5:

2.2.5 Modulo di Evitamento Ostacoli a Infrarossi
===================================================

Introduzione
---------------

In questo progetto, impareremo il modulo di evitamento ostacoli a infrarossi, un modulo sensore che pu√≤ essere utilizzato per rilevare ostacoli a brevi distanze, con piccole interferenze, facile da assemblare e utilizzare. Pu√≤ essere ampiamente utilizzato per l'evitamento di ostacoli nei robot, nei carrelli di evitamento ostacoli, nel conteggio su nastri trasportatori, ecc.


Componenti necessari
-----------------------

In questo progetto abbiamo bisogno dei seguenti componenti.

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTE
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Schema elettrico
-------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Procedure sperimentali
------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**Passo 2:** Cambia la directory.

.. raw:: html

   <run></run>

.. code-block::

   cd ~/raphael-kit/c/2.2.5/

**Passo 3:** Compila.

.. raw:: html

   <run></run>

.. code-block::

   gcc 2.2.5_IrObstacle.c -lwiringPi

**Passo 4:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

   sudo ./a.out

Dopo l'esecuzione del codice, quando metti la mano di fronte alla sonda del modulo, l'indicatore di uscita sul modulo si accender√† e "Detected Barrier!" verr√† stampato ripetutamente sullo schermo.

.. note::

   Se non funziona dopo l'esecuzione o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", consulta :ref:`install_wiringpi`.

Codice
-----------

.. code-block:: c

   #include <wiringPi.h>
   #include <stdio.h>

   #define ObstaclePin      0

   void myISR(void)
   {
      printf("Detected Barrier !\n");
   }

   int main(void)
   {
      if(wiringPiSetup() == -1){ // se l'inizializzazione di wiring fallisce, stampa un messaggio sullo schermo
         printf("setup wiringPi failed !\n");
         return 1; 
      }
      
      if(wiringPiISR(ObstaclePin, INT_EDGE_FALLING, &myISR) < 0){
         printf("Unable to setup ISR !!!\n");
         return 1;
      }
      
      while(1){
         ;
      }

      return 0;
   }

Spiegazione del Codice
--------------------------

.. code-block:: c

   void myISR(void)
   {
      printf("Detected Barrier !\n");
   }

Definisci una funzione ``myISR()`` per stampare ``obstacle detected`` , indicando che √® stato rilevato un ostacolo.

.. code-block:: c

   if(wiringPiISR(ObstaclePin, INT_EDGE_FALLING, &myISR) < 0){
      printf("Unable to setup ISR !!!\n");
      return 1;
   }

Questa funzione ``wiringPiISR()`` registra la funzione ``myISR()`` per ricevere 
interruzioni sul ``ObstaclePin`` specificato.

Quando ObstaclePin cambia da alto a basso, significa che √® stato rilevato un ostacolo. 
In questo momento, chiama la funzione ``myISR()`` per stampare "Detected Barrier!"

Il prototipo di questa funzione ``wiringPiISR()`` √® mostrato di seguito.

.. code-block:: c

   int wiringPiISR (int pin, int edgeType,  void (*function)(void)) ;

Il parametro edgeType √® ``INT_EDGE_FALLING``, ``INT_EDGE_RISING``, ``INT_EDGE_BOTH`` o ``INT_EDGE_SETUP``. Se √® ``INT_EDGE_SETUP``, non verr√† effettuata alcuna inizializzazione del pin - si presume che tu abbia gi√† configurato il pin altrove (ad esempio con il programma gpio), ma se specifichi uno degli altri tipi, il pin verr√† esportato e inizializzato come specificato.

Per maggiori informazioni, consulta: `wiringPi-Functions (API) <https://projects.drogon.net/raspberry-pi/wiringpi/functions/>`_.

Immagine del fenomeno
-------------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   :align: center
