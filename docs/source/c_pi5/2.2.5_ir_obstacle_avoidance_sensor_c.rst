 

.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.5_c_pi5:

2.2.5 Module d'√âvitement d'Obstacles IR
===========================================

Introduction
-----------------

Dans ce projet, nous allons d√©couvrir le module d'√©vitement d'obstacles IR, qui est un module de capteur pouvant √™tre utilis√© pour d√©tecter des obstacles √† courte distance, avec une faible interf√©rence, facile √† assembler et √† utiliser, etc. Il peut √™tre largement utilis√© dans l'√©vitement d'obstacles pour robots, les chariots d'√©vitement d'obstacles, le comptage sur les lignes d'assemblage, etc.

Composants N√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Sch√©ma de C√¢blage
-----------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Proc√©dures Exp√©rimentales
-----------------------------

**√âtape 1:** Construire le circuit.

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**√âtape 2:** Changer de r√©pertoire.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/c/2.2.5/

**√âtape 3 :** Compiler.

.. raw:: html

   <run></run>

.. code-block::

   gcc 2.2.5_IrObstacle.c -lwiringPi

**√âtape 4 :** Ex√©cuter.

.. raw:: html

   <run></run>

.. code-block::

   sudo ./a.out

Apr√®s l'ex√©cution du code, lorsque vous mettez votre main devant la sonde du module, l'indicateur de sortie du module s'allume et le message "Detected Barrier!" sera 
r√©p√©t√© √† l'√©cran.

.. note::

   Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a une erreur indiquant : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

   #include <wiringPi.h>
   #include <stdio.h>

   #define ObstaclePin      0

   void myISR(void)
   {
      printf("Detected Barrier !\n");
   }

   int main(void)
   {
      if(wiringPiSetup() == -1){ //when initialize wiring failed,print messageto screen
         printf("setup wiringPi failed !\n");
         return 1; 
      }
      
      if(wiringPiISR(ObstaclePin, INT_EDGE_FALLING, &myISR) < 0){
         printf("Unable to setup ISR !!!\n");
         return 1;
      }
      
      while(1){
         ;
      }

      return 0;
   }

**Explication du Code**

.. code-block:: c

   void myISR(void)
   {
      printf("Detected Barrier !\n");
   }

D√©finissez une fonction ``myISR()`` pour afficher ``obstacle detected`` , indiquant qu'un obstacle est d√©tect√©.

.. code-block:: c

   if(wiringPiISR(ObstaclePin, INT_EDGE_FALLING, &myISR) < 0){
      printf("Unable to setup ISR !!!\n");
      return 1;
   }

Cette fonction ``wiringPiISR()`` enregistre une fonction ``myISR()`` pour recevoir des interruptions sur le ``ObstaclePin`` sp√©cifi√©.

Lorsque ObstaclePin passe de haut √† bas, cela signifie qu'un obstacle est d√©tect√©. √Ä ce moment-l√†, appelez la fonction ``myISR()`` pour afficher "Detected Barrier !"

Le prototype de cette fonction ``wiringPiISR()`` est montr√© ci-dessous.

.. code-block:: c

   int wiringPiISR (int pin, int edgeType,  void (*function)(void)) ;

Le param√®tre edgeType est soit ``INT_EDGE_FALLING``, ``INT_EDGE_RISING``, ``INT_EDGE_BOTH`` ou ``INT_EDGE_SETUP``. Si c'est ``INT_EDGE_SETUP``, alors aucune initialisation de la broche n'aura lieu - on suppose que vous avez d√©j√† configur√© la broche ailleurs (par exemple, avec le programme gpio), mais si vous sp√©cifiez l'un des autres types, alors la broche sera export√©e et initialis√©e comme sp√©cifi√©.

Pour plus d'informations, veuillez vous r√©f√©rer √† : `wiringPi-Functions (API) <https://projects.drogon.net/raspberry-pi/wiringpi/functions/>`_.

Image du Ph√©nom√®ne
-----------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   :align: center
