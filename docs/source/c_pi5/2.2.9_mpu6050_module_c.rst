.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _2.2.9_c_pi5:

2.2.9 Module MPU6050
===========================

Introduction
-----------------

Le MPU-6050 est le premier et unique dispositif de suivi de mouvement √† 6 axes au 
monde (gyroscope √† 3 axes et acc√©l√©rom√®tre √† 3 axes) con√ßu pour les smartphones, 
tablettes et capteurs portables qui poss√®dent ces caract√©ristiques, y compris les 
exigences de faible consommation d'√©nergie, de faible co√ªt et de haute performance.

Dans cette exp√©rience, nous utilisons l'I2C pour obtenir les valeurs du capteur 
d'acc√©l√©ration √† trois axes et du gyroscope √† trois axes du MPU6050 et les afficher √† l'√©cran.


Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants. 

.. image:: ../img/list_2.2.6.png

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_mpu6050`
        - |link_mpu6050_buy|

Sch√©ma de c√¢blage
-----------------

Le MPU6050 communique avec le microcontr√¥leur via l'interface de bus I2C. Le SDA1 et le SCL1 doivent √™tre connect√©s √† la broche correspondante.

.. image:: ../img/image330.png


Proc√©dures exp√©rimentales
----------------------------------

**√âtape 1 :** Construire le circuit.

.. image:: ../img/image227.png


**√âtape 2** : Configurer l'I2C (voir l'annexe :ref:`i2c_config`. Si vous avez d√©j√† configur√© l'I2C, passez cette √©tape.)

**√âtape 3 :** Aller dans le dossier du code.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.2.9/

**√âtape 4 :** Compiler le code.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.2.9_mpu6050.c -lwiringPi -lm

**√âtape 5 :** Ex√©cuter le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Apr√®s l'ex√©cution du code, l'angle de d√©viation des axes x et y, ainsi que l'acc√©l√©ration et la vitesse angulaire sur chaque axe lus par le MPU6050 seront affich√©s √† l'√©cran apr√®s calcul.

.. note::

    * Si vous obtenez une erreur avec le message ``wiringPi.h: No such file or directory``, veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.
    * Si vous obtenez l'erreur ``Unable to open I2C device: No such file or directory``, vous devez consulter :ref:`i2c_config` pour activer l'I2C et v√©rifier si le c√¢blage est correct.

**Code**

.. code-block:: c

    #include  <wiringPiI2C.h>
    #include <wiringPi.h>
    #include  <stdio.h>
    #include  <math.h>
    int fd;
    int acclX, acclY, acclZ;
    int gyroX, gyroY, gyroZ;
    double acclX_scaled, acclY_scaled, acclZ_scaled;
    double gyroX_scaled, gyroY_scaled, gyroZ_scaled;

    int read_word_2c(int addr)
    {
        int val;
        val = wiringPiI2CReadReg8(fd, addr);
        val = val << 8;
        val += wiringPiI2CReadReg8(fd, addr+1);
        if (val >= 0x8000)
            val = -(65536 - val);
        return val;
    }

    double dist(double a, double b)
    {
        return sqrt((a*a) + (b*b));
    }

    double get_y_rotation(double x, double y, double z)
    {
        double radians;
        radians = atan2(x, dist(y, z));
        return -(radians * (180.0 / M_PI));
    }

    double get_x_rotation(double x, double y, double z)
    {
        double radians;
        radians = atan2(y, dist(x, z));
        return (radians * (180.0 / M_PI));
    }

    int main()
    {
        fd = wiringPiI2CSetup (0x68);
        wiringPiI2CWriteReg8 (fd,0x6B,0x00);//disable sleep mode 
        printf("set 0x6B=%X\n",wiringPiI2CReadReg8 (fd,0x6B));
        
        while(1) {

            gyroX = read_word_2c(0x43);
            gyroY = read_word_2c(0x45);
            gyroZ = read_word_2c(0x47);

            gyroX_scaled = gyroX / 131.0;
            gyroY_scaled = gyroY / 131.0;
            gyroZ_scaled = gyroZ / 131.0;

            //Print values for the X, Y, and Z axes of the gyroscope sensor.
        printf("My gyroX_scaled: %f\n", gyroY X_scaled);
        printf("My gyroY_scaled: %f\n", gyroY Y_scaled);
        printf("My gyroZ_scaled: %f\n", gyroY Z_scaled);

            acclX = read_word_2c(0x3B);
            acclY = read_word_2c(0x3D);
            acclZ = read_word_2c(0x3F);

            acclX_scaled = acclX / 16384.0;
            acclY_scaled = acclY / 16384.0;
            acclZ_scaled = acclZ / 16384.0;
            
            //Print the X, Y, and Z values of the acceleration sensor.
            printf("My acclX_scaled: %f\n", acclX_scaled);
            printf("My acclY_scaled: %f\n", acclY_scaled);
            printf("My acclZ_scaled: %f\n", acclZ_scaled);

            printf("My X rotation: %f\n", get_x_rotation(acclX_scaled, acclY_scaled, acclZ_scaled));
            printf("My Y rotation: %f\n", get_y_rotation(acclX_scaled, acclY_scaled, acclZ_scaled));
            
            delay(100);
        }
        return 0;
    }

**Explication du code**

.. code-block:: c

    int read_word_2c(int addr)
    {
        int val;
        val = wiringPiI2CReadReg8(fd, addr);
        val = val << 8;
        val += wiringPiI2CReadReg8(fd, addr+1);
        if (val >= 0x8000)
            val = -(65536 - val);
        return val;
    }

Lecture des donn√©es du capteur envoy√©es par le MPU6050.

.. code-block:: c

    double get_y_rotation(double x, double y, double z)
    {
        double radians;
        radians = atan2(x, dist(y, z));
        return -(radians * (180.0 / M_PI));
    }

Obtention de l'angle de d√©viation sur l'axe Y.

.. code-block:: c

    double get_x_rotation(double x, double y, double z)
    {
        double radians;
        radians = atan2(y, dist(x, z));
        return (radians * (180.0 / M_PI));
    }

Calcul de l'angle de d√©viation de l'axe X.

.. code-block:: c

    gyroX = read_word_2c(0x43);
    gyroY = read_word_2c(0x45);
    gyroZ = read_word_2c(0x47);

    gyroX_scaled = gyroX / 131.0;
    gyroY_scaled = gyroY / 131.0;
    gyroZ_scaled = gyroZ / 131.0;

    //Print values for the X, Y, and Z axes of the gyroscope sensor.
    printf("My gyroX_scaled: %f\n", gyroY X_scaled);
    printf("My gyroY_scaled: %f\n", gyroY Y_scaled);
    printf("My gyroZ_scaled: %f\n", gyroY Z_scaled);

Lecture des valeurs des axes x, y et z sur le capteur gyroscopique, conversion des m√©tadonn√©es en valeurs de vitesse angulaire, puis impression de celles-ci.

.. code-block:: c

    acclX = read_word_2c(0x3B);
    acclY = read_word_2c(0x3D);
    acclZ = read_word_2c(0x3F);

    acclX_scaled = acclX / 16384.0;
    acclY_scaled = acclY / 16384.0;
    acclZ_scaled = acclZ / 16384.0;
        
    //Print the X, Y, and Z values of the acceleration sensor.
    printf("My acclX_scaled: %f\n", acclX_scaled);
    printf("My acclY_scaled: %f\n", acclY_scaled);
    printf("My acclZ_scaled: %f\n", acclZ_scaled);

Lecture des valeurs des axes x, y et z sur le capteur d'acc√©l√©ration, 
conversion des m√©tadonn√©es en valeurs de vitesse acc√©l√©r√©e (unit√© de gravit√©), 
puis impression de celles-ci.

.. code-block:: c

    printf("My X rotation: %f\n", get_x_rotation(acclX_scaled, acclY_scaled, acclZ_scaled));
    printf("My Y rotation: %f\n", get_y_rotation(acclX_scaled, acclY_scaled, acclZ_scaled));

Impression des angles de d√©viation des axes x et y.

Image du ph√©nom√®ne
-----------------------

.. image:: ../img/image228.jpeg
