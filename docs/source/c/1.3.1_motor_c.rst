.. note::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Esperto**: Risolvi i problemi post-vendita e le sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti subito!

.. _1.3.1_c:

1.3.1 Motore
==================

Introduzione
------------------

In questo progetto, impareremo come utilizzare L293D per pilotare un motore DC
e farlo ruotare in senso orario e antiorario. Poich√© il motore DC
richiede una corrente maggiore, per sicurezza, utilizziamo qui il modulo di alimentazione
per alimentare i motori.

Componenti Necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/list_1.3.1.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link seguenti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_power_module`
        - \-
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_motor`
        - |link_motor_buy|

Schema Elettrico
--------------------

Collega il modulo di alimentazione alla breadboard e inserisci il jumper
nel pin da 5V, quindi questo erogher√† una tensione di 5V. Collega il pin 1 dell'L293D a
GPIO22 e impostalo ad alto livello. Collega il pin 2 a GPIO27 e il pin 7 a
GPIO17, quindi imposta un pin ad alto livello e l'altro a basso. In questo modo puoi cambiare
la direzione di rotazione del motore.

.. image:: ../img/image336.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/1.3.1.png


.. nota::
    Il modulo di alimentazione pu√≤ essere utilizzato con una batteria da 9V 
    tramite il supporto per batteria incluso nel kit. Inserisci il jumper del modulo di alimentazione 
    nelle strisce bus da 5V della breadboard.

.. image:: ../img/image118.jpeg

**Passo 2**: Entra nella cartella del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.3.1/

**Passo 3:** Compila.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.1_Motor.c -lwiringPi

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Quando il codice viene eseguito, il motore prima ruota in senso orario per 5s, quindi si ferma per 5s. 
Successivamente, ruota in senso antiorario per 5s, quindi si ferma nuovamente per 5s. Questa serie di azioni
viene ripetuta ciclicamente.

.. note::

    Se il codice non funziona o appare un errore come: \"wiringPi.h: No such file or directory\", fai riferimento a :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define MotorPin1       0
    #define MotorPin2       2
    #define MotorEnable     3

    int main(void){
        int i;
        if(wiringPiSetup() == -1){ //quando l'inizializzazione di wiring fallisce, stampa messaggio a schermo
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(MotorPin1, OUTPUT);
        pinMode(MotorPin2, OUTPUT);
        pinMode(MotorEnable, OUTPUT);
        while(1){
            printf("Clockwise\n");
            digitalWrite(MotorEnable, HIGH);
            digitalWrite(MotorPin1, HIGH);
            digitalWrite(MotorPin2, LOW);
            for(i=0;i<3;i++){
                delay(1000);
            }

            printf("Stop\n");
            digitalWrite(MotorEnable, LOW);
            for(i=0;i<3;i++){
                delay(1000);
            }

            printf("Anti-clockwise\n");
            digitalWrite(MotorEnable, HIGH);
            digitalWrite(MotorPin1, LOW);
            digitalWrite(MotorPin2, HIGH);
            for(i=0;i<3;i++){
                delay(1000);
            }

            printf("Stop\n");
            digitalWrite(MotorEnable, LOW);
            for(i=0;i<3;i++){
                delay(1000);
            }
        }
        return 0;
    }

**Spiegazione del Codice**

.. code-block:: c

    digitalWrite(MotorEnable, HIGH);

Abilita il L239D.

.. code-block:: c

    digitalWrite(MotorPin1, HIGH);
    digitalWrite(MotorPin2, LOW);

Imposta un livello alto su 2A(pin 7); poich√© 1,2EN(pin 1) √® 
ad alto livello, 2Y emetter√† un livello alto.

Imposta un livello basso su 1A, quindi 1Y emetter√† un livello basso e 
il motore inizier√† a ruotare.

.. code-block:: c

    for(i=0;i<3;i++){
        delay(1000);
    }

Questo ciclo serve a ritardare di 3*1000ms.

.. code-block:: c

    digitalWrite(MotorEnable, LOW)

Se 1,2EN (pin1) √® a livello basso, L293D non funziona. Il motore smette di ruotare.

.. code-block:: c

    digitalWrite(MotorPin1, LOW)
    digitalWrite(MotorPin2, HIGH)

Inverte il flusso di corrente del motore, e il motore ruoter√† in senso inverso.

Immagine del Fenomeno
--------------------------

.. image:: ../img/image119.jpeg
