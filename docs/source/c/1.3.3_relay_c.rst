.. nota::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti subito!

.. _1.3.3_c:

1.3.3 Rel√®
====================

Introduzione
---------------

In questo progetto, impareremo a utilizzare un rel√®. √à uno dei componenti pi√π 
utilizzati nei sistemi di controllo automatico. Quando la tensione, la corrente, 
la temperatura, la pressione, ecc., raggiunge, supera o √® inferiore al valore 
prestabilito, il rel√® collegher√† o interromper√† il circuito per controllare e 
proteggere l'apparecchiatura.

Componenti Necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_1.3.4.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link seguenti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_relay`
        - |link_relay_buy|
    *   - :ref:`cpn_diode`
        - |link_diode_buy|

Schema Elettrico
---------------------

.. image:: ../img/image345.png


Procedure Sperimentali
---------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/image144.png

**Passo 2**: Apri il file del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/1.3.3

**Passo 3:** Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 1.3.3_Relay.c -lwiringPi

**Passo 4:** Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del codice, il LED si accender√†. Inoltre, potrai sentire un 
ticchettio causato dall'apertura del contatto normalmente chiuso e dalla chiusura 
del contatto normalmente aperto.

.. note::

    Se il codice non funziona o appare un errore come: \"wiringPi.h: No such file or directory\", fai riferimento a :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>
    #define RelayPin 0

    int main(void){
        if(wiringPiSetup() == -1){ //quando l'inizializzazione di wiring fallisce, stampa messaggio a schermo
            printf("setup wiringPi failed !");
            return 1;
        }
        pinMode(RelayPin, OUTPUT);   //imposta GPIO17(GPIO0) come output
        while(1){
            // Tick
            printf("Relay Open......\n");
            digitalWrite(RelayPin, LOW);
            delay(1000);
            // Tock
            printf("......Relay Close\n");
            digitalWrite(RelayPin, HIGH);
            delay(1000);
        }

        return 0;
    }

**Spiegazione del Codice**

.. code-block:: c

    digitalWrite(RelayPin, LOW);

Imposta la porta I/O a livello basso (0V), cos√¨ il transistor non viene alimentato 
e la bobina non √® alimentata. Non c'√® forza elettromagnetica, quindi il rel√® si apre 
e il LED non si accende.

.. code-block:: c

    digitalWrite(RelayPin, HIGH);

Imposta la porta I/O a livello alto (5V) per alimentare il transistor. La bobina 
del rel√® √® alimentata e genera forza elettromagnetica, il rel√® si chiude e il LED 
si accende.

Immagine del Fenomeno
-----------------------------

.. image:: ../img/image145.jpeg
