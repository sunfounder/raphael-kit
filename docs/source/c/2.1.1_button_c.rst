.. nota::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti subito!

.. _2.1.1_c:

2.1.1 Pulsante
====================

Introduzione
---------------

In questo progetto, impareremo a utilizzare un pulsante per accendere o spegnere 
un LED.

Componenti Necessari
--------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti.

.. image:: ../img/list_2.1.1_Button.png

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI NEL KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link seguenti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

Schema Elettrico
---------------------

Utilizza un pulsante normalmente aperto come input per il Raspberry Pi, come 
mostrato nello schema elettrico sottostante. Quando il pulsante viene premuto, 
il GPIO18 diventa a livello basso (0V). Possiamo rilevare lo stato del GPIO18 
tramite il programma. Se il GPIO18 diventa a livello basso, significa che il 
pulsante √® stato premuto. √à possibile eseguire il codice corrispondente quando 
il pulsante viene premuto e successivamente il LED si accender√†.

.. note::
    Il pin pi√π lungo del LED √® l'anodo, mentre quello pi√π corto √® il catodo.

.. image:: ../img/image302.png


.. image:: ../img/image303.png


Procedure Sperimentali
---------------------------

**Passo 1**: Costruisci il circuito.

.. image:: ../img/image152.png

**Passo 2**: Apri il file del codice.

.. raw:: html

   <run></run>

.. code-block::

    cd ~/raphael-kit/c/2.1.1/

.. note::
    Cambia directory al percorso del codice di questo esperimento tramite **cd**.

**Passo 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block::

    gcc 2.1.1_Button.c -lwiringPi

**Passo 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block::

    sudo ./a.out

Dopo l'esecuzione del codice, premendo il pulsante il LED si accender√†, altrimenti rimarr√† spento.

.. note::

    Se non funziona dopo l'esecuzione o viene visualizzato un errore come: \"wiringPi.h: No such file or directory\", fai riferimento a :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

    #include <wiringPi.h>
    #include <stdio.h>

    #define LedPin      0
    #define ButtonPin   1

    int main(void){
        // Se l'inizializzazione di wiring fallisce, stampa il messaggio a schermo
        if(wiringPiSetup() == -1){
            printf("setup wiringPi failed !");
            return 1;
        }
        
        pinMode(LedPin, OUTPUT);
        pinMode(ButtonPin, INPUT);
        digitalWrite(LedPin, HIGH);
        
        while(1){
            // Indica che il pulsante √® stato premuto
            if(digitalRead(ButtonPin) == 0){
                // Accende il LED
                digitalWrite(LedPin, LOW);
            //  printf("...LED acceso\n");
            }
            else{
                // Spegne il LED
                digitalWrite(LedPin, HIGH);
            //  printf("LED spento...\n");
            }
        }
        return 0;
    }

**Spiegazione del Codice**

.. code-block:: c

    #define LedPin      0

Il pin GPIO17 della T_Extension Board corrisponde al GPIO0 di wiringPi.

.. code-block:: c

    #define ButtonPin   1

Il ButtonPin √® collegato al GPIO1.

.. code-block:: c

    pinMode(LedPin, OUTPUT);

Imposta LedPin come output per assegnare un valore.

.. code-block:: c

    pinMode(ButtonPin, INPUT);

Imposta ButtonPin come input per leggere il valore di ButtonPin.

.. code-block:: C

    while(1){
            // Indica che il pulsante √® stato premuto
            if(digitalRead(ButtonPin) == 0){
                // Accende il LED
                digitalWrite(LedPin, LOW);
            //  printf("...LED acceso\n");
            }
            else{
                // Spegne il LED
                digitalWrite(LedPin, HIGH);
            //  printf("LED spento...\n");
            }
        }


``if (digitalRead (ButtonPin) == 0)`` : verifica se il pulsante √® stato premuto. 
Esegui ``digitalWrite(LedPin, LOW)`` quando il pulsante √® premuto per accendere il LED.

La funzione ``digitalRead()`` legge HIGH (livello alto) o LOW (livello basso) dal 
pin specificato, restituisce 1 se il pin √® HIGH e 0 se √® LOW.

La funzione ``digitalWrite()`` scrive HIGH (livello alto) o LOW (livello basso) nel 
pin specificato.

Immagine del Fenomeno
^^^^^^^^^^^^^^^^^^^^^^

.. image:: ../img/image153.jpeg


