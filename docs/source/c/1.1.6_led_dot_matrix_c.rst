.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _1.1.6_c:

1.1.6 M√≥dulo de Matriz de LED
==================================

Introducci√≥n
--------------------

En este proyecto, aprender√°s sobre el M√≥dulo de Matriz de LED. Este m√≥dulo utiliza el controlador MAX7219 para manejar la matriz de LED de 8 x 8.

Componentes Necesarios
------------------------------

En este proyecto, necesitamos los siguientes componentes.

.. image:: ../img/list_dot.png

Es definitivamente conveniente comprar un kit completo, aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|

Diagrama Esquem√°tico
-----------------------

============== ======== ======== ====
Nombre T-Board f√≠sico   wiringPi BCM
SPIMOSI        Pin 19   12       MOSI
SPICE0         Pin 24   10       CE0
SPISCLK        Pin 23   14       SCLK
============== ======== ======== ====

.. image:: ../img/schematic_dot.png

Procedimientos Experimentales
-------------------------------

**Paso 1:** Construir el circuito.

.. image:: ../img/1.1.6fritzing.png

**Paso 2:** Activa el SPI antes de comenzar el experimento, consulta :ref:`spi_configuration` para m√°s detalles.

**Paso 3:** Ve a la carpeta del c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/1.1.6/

**Paso 4:** Compila el c√≥digo.

.. raw:: html

   <run></run>

.. code-block:: 

    make

**Paso 5:** Ejecuta el archivo ejecutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./1.1.6_LedMatrix

Despu√©s de ejecutar el c√≥digo, la matriz de LED muestra en secuencia un cuadrado, un coraz√≥n y los n√∫meros del 0 al 9.

.. note::

    Si no funciona despu√©s de ejecutarlo, o aparece un mensaje de error: \"wiringPi.h: No such file or directory\", por favor consulta :ref:`install_wiringpi`.

**C√≥digo**

.. code-block:: c

    #include <wiringPi.h>
    #include <wiringPiSPI.h>
    #include <stdio.h>

    #define SPI_CHANNEL    0           // Define SPI channel (0 or 1)
    #define SPI_SPEED      1000000     // SPI speed set to 1 MHz

    // Function to write data to a MAX7219 register
    void max7219_write(unsigned char address, unsigned char data) {
        unsigned char buffer[2];
        buffer[0] = address;   // Register address to write to
        buffer[1] = data;      // Data to write into the register
        wiringPiSPIDataRW(SPI_CHANNEL, buffer, 2);  // Send data via SPI
    }

    // Function to initialize the MAX7219 display module
    void max7219_init() {
        max7219_write(0x09, 0x00); // Decode Mode: No decoding for digits (useful for 7-segment displays)
        max7219_write(0x0A, 0x03); // Intensity: Set brightness level (0x00 to 0x0F)
        max7219_write(0x0B, 0x07); // Scan Limit: Display digits 0-7 (all 8 digits)
        max7219_write(0x0C, 0x01); // Shutdown Register: Normal operation (not in shutdown mode)
        max7219_write(0x0F, 0x00); // Display Test: Normal operation (no test mode)

        // Clear all digits on the display
        for (int i = 1; i <= 8; i++) {
            max7219_write(i, 0x00); // Write 0 to each digit register
        }
    }

    // Function to display a pattern on the MAX7219
    void max7219_display(unsigned char *data) {
        for (int i = 1; i <= 8; i++) {
            max7219_write(i, data[i - 1]); // Write each row of the pattern to the display
        }
    }

    // Function to display a pattern for a specified duration
    void display_pattern(const unsigned char pattern[8], int delay_ms) {
        max7219_display((unsigned char *)pattern); // Display the pattern
        delay(delay_ms);                           // Wait for the specified time in milliseconds
    }

    // Array of patterns to display
    const unsigned char patterns[][8] = {
        // Square pattern
        {
            0b11111111, // Row 1
            0b10000001, // Row 2
            0b10000001, // Row 3
            0b10000001, // Row 4
            0b10000001, // Row 5
            0b10000001, // Row 6
            0b10000001, // Row 7
            0b11111111  // Row 8
        },
        // Heart pattern
        {
            0b01100110, // Row 1
            0b11111111, // Row 2
            0b11111111, // Row 3
            0b11111111, // Row 4
            0b01111110, // Row 5
            0b00111100, // Row 6
            0b00011000, // Row 7
            0b00000000  // Row 8
        },
        // Number 0
        {
            0b00111100, // Row 1
            0b01100110, // Row 2
            0b11000011, // Row 3
            0b11000011, // Row 4
            0b11000011, // Row 5
            0b11000011, // Row 6
            0b01100110, // Row 7
            0b00111100  // Row 8
        },
        // Number 1
        {
            0b00011000, // Row 1
            0b00111000, // Row 2
            0b01111000, // Row 3
            0b00011000, // Row 4
            0b00011000, // Row 5
            0b00011000, // Row 6
            0b01111110, // Row 7
            0b01111110  // Row 8
        },
        // Number 2
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b00000011, // Row 3
            0b00001110, // Row 4
            0b00110000, // Row 5
            0b11000000, // Row 6
            0b11111111, // Row 7
            0b00000000  // Row 8
        },
        // Number 3
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b00000011, // Row 3
            0b00111110, // Row 4
            0b00000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 4
        {
            0b00001110, // Row 1
            0b00011110, // Row 2
            0b00110110, // Row 3
            0b01100110, // Row 4
            0b11111111, // Row 5
            0b00000110, // Row 6
            0b00000110, // Row 7
            0b00000000  // Row 8
        },
        // Number 5
        {
            0b11111111, // Row 1
            0b11000000, // Row 2
            0b11111110, // Row 3
            0b00000011, // Row 4
            0b00000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 6
        {
            0b00111110, // Row 1
            0b01100000, // Row 2
            0b11000000, // Row 3
            0b11111110, // Row 4
            0b11000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 7
        {
            0b11111111, // Row 1
            0b11000011, // Row 2
            0b00000110, // Row 3
            0b00001100, // Row 4
            0b00011000, // Row 5
            0b00110000, // Row 6
            0b00110000, // Row 7
            0b00000000  // Row 8
        },
        // Number 8
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b11000011, // Row 3
            0b01111110, // Row 4
            0b11000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 9
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b11000011, // Row 3
            0b01111111, // Row 4
            0b00000011, // Row 5
            0b00000110, // Row 6
            0b01111100, // Row 7
            0b00000000  // Row 8
        },
    };

    int main() {
        if (wiringPiSetup() == -1) {
            printf("Failed to initialize WiringPi\n");
            return 1;
        }

        if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1) {
            printf("Failed to initialize SPI\n");
            return 1;
        }

        max7219_init();  // Initialize the MAX7219 module

        // Display patterns in a loop
        while (1) {
            // Display the square pattern
            display_pattern(patterns[0], 1000);  // Display for 1000 milliseconds

            // Display the heart pattern
            display_pattern(patterns[1], 1000);

            // Display numbers 0-9
            for (int i = 2; i <= 11; i++) {
                display_pattern(patterns[i], 1000);
            }
        }

        return 0;
    }


**An√°lisis de C√≥digo**

#. Archivos de Cabecera:

   * ``wiringPi.h``: Proporciona funciones para el control de GPIO.
   * ``wiringPiSPI.h``: Proporciona funciones para la comunicaci√≥n SPI.
   * ``stdio.h``: Biblioteca est√°ndar de entrada/salida para funciones como printf.

#. Definiciones:

   * ``SPI_CHANNEL``: Especifica el canal SPI (0 o 1) utilizado para la comunicaci√≥n.
   * ``SPI_SPEED``: Establece la velocidad de comunicaci√≥n SPI a 1 MHz.

   .. code-block:: c

        #define SPI_CHANNEL    0           // Define el canal SPI (0 o 1)
        #define SPI_SPEED      1000000     // Velocidad SPI establecida en 1 MHz

#. Funci√≥n ``max7219_write``: Env√≠a datos a un registro espec√≠fico del controlador de pantalla MAX7219.

   * ``address``: La direcci√≥n del registro a escribir.
   * ``data``: Los datos a escribir en el registro.
   * Crea un buffer que contiene la direcci√≥n y los datos.
   * Usa ``wiringPiSPIDataRW`` para enviar el buffer por SPI.

   .. code-block:: c

        void max7219_write(unsigned char address, unsigned char data) {
            unsigned char buffer[2];
            buffer[0] = address;   // Direcci√≥n del registro para escribir
            buffer[1] = data;      // Datos para escribir en el registro
            wiringPiSPIDataRW(SPI_CHANNEL, buffer, 2);  // Enviar datos v√≠a SPI
        }

#. Funci√≥n ``max7219_init``: Inicializa el m√≥dulo de pantalla MAX7219 con configuraciones necesarias.

   * Configura el modo de decodificaci√≥n a "sin decodificaci√≥n" ya que estamos controlando los LEDs directamente.
   * Ajusta la intensidad (brillo) a un nivel moderado (0x03).
   * Establece el l√≠mite de escaneo en 7 para habilitar los 8 d√≠gitos (filas) de la pantalla.
   * Sale del modo de apagado para encender la pantalla.
   * Desactiva el modo de prueba de pantalla.
   * Limpia la pantalla escribiendo 0x00 en todos los registros de d√≠gitos.

   .. code-block:: c

        void max7219_init() {
            max7219_write(0x09, 0x00); // Modo de decodificaci√≥n: Sin decodificaci√≥n para d√≠gitos (√∫til para pantallas de 7 segmentos)
            max7219_write(0x0A, 0x03); // Intensidad: Establecer nivel de brillo (0x00 a 0x0F)
            max7219_write(0x0B, 0x07); // L√≠mite de escaneo: Mostrar d√≠gitos 0-7 (todos los 8 d√≠gitos)
            max7219_write(0x0C, 0x01); // Registro de apagado: Operaci√≥n normal (no en modo de apagado)
            max7219_write(0x0F, 0x00); // Prueba de pantalla: Operaci√≥n normal (sin modo de prueba)

            // Limpiar todos los d√≠gitos en la pantalla
            for (int i = 1; i <= 8; i++) {
                max7219_write(i, 0x00); // Escribir 0 en cada registro de d√≠gito
            }
        }

#. Funci√≥n ``max7219_display``: Actualiza la pantalla con un patr√≥n de 8 bytes dado.

   * ``data``: Un arreglo que contiene el patr√≥n a mostrar.
   * Itera a trav√©s de cada una de las 8 filas (d√≠gitos) y escribe los datos correspondientes.

   .. code-block:: c

        void max7219_display(unsigned char *data) {
            for (int i = 1; i <= 8; i++) {
                max7219_write(i, data[i - 1]); // Escribir cada fila del patr√≥n en la pantalla
            }
        }

#. Funci√≥n ``display_pattern``: Muestra un patr√≥n durante un tiempo espec√≠fico.

   * ``pattern``: El patr√≥n a mostrar (arreglo de 8 bytes).
   * ``delay_ms``: Duraci√≥n para mostrar el patr√≥n en milisegundos.
   * Llama a ``max7219_display`` para mostrar el patr√≥n.
   * Usa ``delay`` para esperar durante la duraci√≥n especificada.

   .. code-block:: c

        void display_pattern(const unsigned char pattern[8], int delay_ms) {
            max7219_display((unsigned char *)pattern); // Mostrar el patr√≥n
            delay(delay_ms);                           // Esperar el tiempo especificado en milisegundos
        }

#. Patrones de Arreglos:

   * Contiene patrones predefinidos para el cuadrado, coraz√≥n y n√∫meros del 0 al 9.
   * Cada patr√≥n es un arreglo de 8 bytes, representando 8 filas de la matriz LED de 8x8.
   * Cada byte usa notaci√≥n binaria donde cada bit representa un LED (1 para encendido, 0 para apagado).
   
   .. code-block:: c

        const unsigned char patterns[][8] = {
            // Patr√≥n cuadrado
            {
                0b11111111, // Fila 1
                0b10000001, // Fila 2
                0b10000001, // Fila 3
                0b10000001, // Fila 4
                0b10000001, // Fila 5
                0b10000001, // Fila 6
                0b10000001, // Fila 7
                0b11111111  // Fila 8
            },
            ...
            // N√∫mero 9
            {
                ...
            },
        };    

#. Funci√≥n main:

   * Inicializa ``WiringPi`` y la interfaz ``SPI``.
   
     .. code-block:: c

        if (wiringPiSetup() == -1) {
            printf("Error al inicializar WiringPi\n");
            return 1;
        }

        if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1) {
            printf("Error al inicializar SPI\n");
            return 1;
        }
   
   * Llama a ``max7219_init`` para configurar el m√≥dulo MAX7219.
   
     .. code-block:: c

        max7219_init();  // Inicializar el m√≥dulo MAX7219
      
   * Entra en un bucle infinito para mostrar los patrones continuamente. Muestra cada patr√≥n durante 1 segundo antes de pasar al siguiente.

     .. code-block:: c

        while (1) {
            // Mostrar el patr√≥n cuadrado
            display_pattern(patterns[0], 1000);  // Mostrar durante 1000 milisegundos

            // Mostrar el patr√≥n de coraz√≥n
            display_pattern(patterns[1], 1000);

            // Mostrar n√∫meros del 0 al 9
            for (int i = 2; i <= 11; i++) {
                display_pattern(patterns[i], 1000);
            }
        }

**Comprensi√≥n de los Patrones**

* Representaci√≥n Binaria:

  * Cada patr√≥n se define usando literales binarios (prefijo 0b).
  * Cada byte corresponde a una fila en la matriz LED de 8x8.
  * Cada bit dentro del byte representa una columna (LED) en esa fila.
  * El bit m√°s significativo (a la izquierda) corresponde al primer LED a la izquierda.

* Creaci√≥n de Patrones Personalizados:

  * Puedes crear nuevos patrones definiendo nuevos arreglos de 8 bytes.
  * Cada patr√≥n puede a√±adirse al arreglo de patrones.
  * Actualiza el bucle de visualizaci√≥n en main para incluir tus nuevos patrones.

**Ajustes y Personalizaci√≥n**

* Cambiar el Brillo: Modifica el nivel de intensidad en ``max7219_init``:

   .. code-block:: c

        max7219_write(0x0A, brightness_level); // brillo entre 0x00 y 0x0F

* Modificar el Tiempo de Visualizaci√≥n: Cambia el par√°metro ``delay_ms`` en las llamadas a ``display_pattern`` para ajustar el tiempo de visualizaci√≥n de cada patr√≥n.

Imagen del Fen√≥meno
-----------------------

.. image:: ../img/1.1.6led_dot_matrix.JPG
