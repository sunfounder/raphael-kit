 
.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _1.1.6_c:

1.1.6 Module Matrice √† LED
==================================

Introduction
--------------------

Dans ce projet, vous allez d√©couvrir le module de matrice √† LED. Ce module utilise le driver MAX7219 pour piloter la matrice de LED 8 x 8.

Composants n√©cessaires
------------------------------

Dans ce projet, nous avons besoin des composants suivants.

.. image:: ../img/list_dot.png

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ITEMS IN THIS KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|

Sch√©ma de c√¢blage
-----------------------

============ ======== ======== ====
Nom T-Board  Physique wiringPi BCM
SPIMOSI      Pin 19   12       MOSI
SPICE0       pin 24   10       CE0
SPISCLK      Pin 23   14       SCLK
============ ======== ======== ====

.. image:: ../img/schematic_dot.png

Proc√©dures exp√©rimentales
----------------------------

**√âtape 1 :** Construisez le circuit. 

.. image:: ../img/1.1.6fritzing.png

**√âtape 2:** Activez le SPI avant de commencer l'exp√©rience, r√©f√©rez-vous √† :ref:`spi_configuration` pour les d√©tails.

**√âtape 3:** Acc√©dez au dossier du code.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/1.1.6/

**√âtape 4:** Compilez le code.

.. raw:: html

   <run></run>

.. code-block:: 

    make

**√âtape 5:** Ex√©cutez le fichier ex√©cutable.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./1.1.6_LedMatrix

Apr√®s l'ex√©cution du code, la matrice de LED affiche les chiffres de 0 √† 9 et les lettres de A √† Z en s√©quence.

.. note::

    Si cela ne fonctionne pas apr√®s l'ex√©cution, ou s'il y a une erreur : \"wiringPi.h: No such file or directory\", veuillez vous r√©f√©rer √† :ref:`install_wiringpi`.

**Code**

.. code-block:: c

    #include <wiringPi.h>
    #include <wiringPiSPI.h>
    #include <stdio.h>

    #define SPI_CHANNEL    0           // Define SPI channel (0 or 1)
    #define SPI_SPEED      1000000     // SPI speed set to 1 MHz

    // Function to write data to a MAX7219 register
    void max7219_write(unsigned char address, unsigned char data) {
        unsigned char buffer[2];
        buffer[0] = address;   // Register address to write to
        buffer[1] = data;      // Data to write into the register
        wiringPiSPIDataRW(SPI_CHANNEL, buffer, 2);  // Send data via SPI
    }

    // Function to initialize the MAX7219 display module
    void max7219_init() {
        max7219_write(0x09, 0x00); // Decode Mode: No decoding for digits (useful for 7-segment displays)
        max7219_write(0x0A, 0x03); // Intensity: Set brightness level (0x00 to 0x0F)
        max7219_write(0x0B, 0x07); // Scan Limit: Display digits 0-7 (all 8 digits)
        max7219_write(0x0C, 0x01); // Shutdown Register: Normal operation (not in shutdown mode)
        max7219_write(0x0F, 0x00); // Display Test: Normal operation (no test mode)

        // Clear all digits on the display
        for (int i = 1; i <= 8; i++) {
            max7219_write(i, 0x00); // Write 0 to each digit register
        }
    }

    // Function to display a pattern on the MAX7219
    void max7219_display(unsigned char *data) {
        for (int i = 1; i <= 8; i++) {
            max7219_write(i, data[i - 1]); // Write each row of the pattern to the display
        }
    }

    // Function to display a pattern for a specified duration
    void display_pattern(const unsigned char pattern[8], int delay_ms) {
        max7219_display((unsigned char *)pattern); // Display the pattern
        delay(delay_ms);                           // Wait for the specified time in milliseconds
    }

    // Array of patterns to display
    const unsigned char patterns[][8] = {
        // Square pattern
        {
            0b11111111, // Row 1
            0b10000001, // Row 2
            0b10000001, // Row 3
            0b10000001, // Row 4
            0b10000001, // Row 5
            0b10000001, // Row 6
            0b10000001, // Row 7
            0b11111111  // Row 8
        },
        // Heart pattern
        {
            0b01100110, // Row 1
            0b11111111, // Row 2
            0b11111111, // Row 3
            0b11111111, // Row 4
            0b01111110, // Row 5
            0b00111100, // Row 6
            0b00011000, // Row 7
            0b00000000  // Row 8
        },
        // Number 0
        {
            0b00111100, // Row 1
            0b01100110, // Row 2
            0b11000011, // Row 3
            0b11000011, // Row 4
            0b11000011, // Row 5
            0b11000011, // Row 6
            0b01100110, // Row 7
            0b00111100  // Row 8
        },
        // Number 1
        {
            0b00011000, // Row 1
            0b00111000, // Row 2
            0b01111000, // Row 3
            0b00011000, // Row 4
            0b00011000, // Row 5
            0b00011000, // Row 6
            0b01111110, // Row 7
            0b01111110  // Row 8
        },
        // Number 2
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b00000011, // Row 3
            0b00001110, // Row 4
            0b00110000, // Row 5
            0b11000000, // Row 6
            0b11111111, // Row 7
            0b00000000  // Row 8
        },
        // Number 3
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b00000011, // Row 3
            0b00111110, // Row 4
            0b00000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 4
        {
            0b00001110, // Row 1
            0b00011110, // Row 2
            0b00110110, // Row 3
            0b01100110, // Row 4
            0b11111111, // Row 5
            0b00000110, // Row 6
            0b00000110, // Row 7
            0b00000000  // Row 8
        },
        // Number 5
        {
            0b11111111, // Row 1
            0b11000000, // Row 2
            0b11111110, // Row 3
            0b00000011, // Row 4
            0b00000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 6
        {
            0b00111110, // Row 1
            0b01100000, // Row 2
            0b11000000, // Row 3
            0b11111110, // Row 4
            0b11000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 7
        {
            0b11111111, // Row 1
            0b11000011, // Row 2
            0b00000110, // Row 3
            0b00001100, // Row 4
            0b00011000, // Row 5
            0b00110000, // Row 6
            0b00110000, // Row 7
            0b00000000  // Row 8
        },
        // Number 8
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b11000011, // Row 3
            0b01111110, // Row 4
            0b11000011, // Row 5
            0b11000011, // Row 6
            0b01111110, // Row 7
            0b00000000  // Row 8
        },
        // Number 9
        {
            0b01111110, // Row 1
            0b11000011, // Row 2
            0b11000011, // Row 3
            0b01111111, // Row 4
            0b00000011, // Row 5
            0b00000110, // Row 6
            0b01111100, // Row 7
            0b00000000  // Row 8
        },
    };

    int main() {
        if (wiringPiSetup() == -1) {
            printf("Failed to initialize WiringPi\n");
            return 1;
        }

        if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1) {
            printf("Failed to initialize SPI\n");
            return 1;
        }

        max7219_init();  // Initialize the MAX7219 module

        // Display patterns in a loop
        while (1) {
            // Display the square pattern
            display_pattern(patterns[0], 1000);  // Display for 1000 milliseconds

            // Display the heart pattern
            display_pattern(patterns[1], 1000);

            // Display numbers 0-9
            for (int i = 2; i <= 11; i++) {
                display_pattern(patterns[i], 1000);
            }
        }

        return 0;
    }

**Explication du code**

#. Fichiers d'en-t√™te :

   * ``wiringPi.h`` : Fournit des fonctions pour le contr√¥le GPIO.
   * ``wiringPiSPI.h`` : Fournit des fonctions pour la communication SPI.
   * ``stdio.h`` : Biblioth√®que d'entr√©e/sortie standard pour des fonctions comme printf.

#. D√©finitions :

   * ``SPI_CHANNEL`` : Sp√©cifie le canal SPI (0 ou 1) utilis√© pour la communication.
   * ``SPI_SPEED`` : D√©finit la vitesse de communication SPI √† 1 MHz.

   .. code-block:: c

        #define SPI_CHANNEL    0           // D√©finit le canal SPI (0 ou 1)
        #define SPI_SPEED      1000000     // Vitesse SPI d√©finie √† 1 MHz

#. Fonction ``max7219_write`` : Envoie des donn√©es √† un registre sp√©cifique du pilote d'affichage MAX7219.

   * ``address`` : L'adresse du registre √† √©crire.
   * ``data`` : Les donn√©es √† √©crire dans le registre.
   * Cr√©e un buffer contenant l'adresse et les donn√©es.
   * Utilise ``wiringPiSPIDataRW`` pour envoyer le buffer via SPI.

   .. code-block:: c

        void max7219_write(unsigned char address, unsigned char data) {
            unsigned char buffer[2];
            buffer[0] = address;   // Adresse du registre √† √©crire
            buffer[1] = data;      // Donn√©es √† √©crire dans le registre
            wiringPiSPIDataRW(SPI_CHANNEL, buffer, 2);  // Envoie les donn√©es via SPI
        }

#. Fonction ``max7219_init`` : Initialise le module d'affichage MAX7219 avec les r√©glages n√©cessaires.

   * D√©finit le mode de d√©codage sur "sans d√©codage" car nous contr√¥lons directement les LED.
   * D√©finit l'intensit√© (luminosit√©) √† un niveau mod√©r√© (0x03).
   * D√©finit la limite de balayage √† 7 pour activer les 8 chiffres (lignes) de l'affichage.
   * D√©sactive le mode veille pour allumer l'affichage.
   * D√©sactive le mode de test de l'affichage.
   * Efface l'affichage en √©crivant 0x00 dans tous les registres de chiffres.

   .. code-block:: c

        void max7219_init() {
            max7219_write(0x09, 0x00); // Mode de d√©codage : Pas de d√©codage pour les chiffres (utile pour les affichages √† 7 segments)
            max7219_write(0x0A, 0x03); // Intensit√© : D√©finit le niveau de luminosit√© (0x00 √† 0x0F)
            max7219_write(0x0B, 0x07); // Limite de balayage : Affiche les chiffres 0-7 (tous les 8 chiffres)
            max7219_write(0x0C, 0x01); // Registre d'arr√™t : Fonctionnement normal (pas en mode veille)
            max7219_write(0x0F, 0x00); // Test d'affichage : Fonctionnement normal (pas en mode de test)

            // Efface tous les chiffres de l'affichage
            for (int i = 1; i <= 8; i++) {
                max7219_write(i, 0x00); // √âcrit 0 dans chaque registre de chiffre
            }
        }

#. Fonction ``max7219_display`` : Met √† jour l'affichage avec un mod√®le de 8 octets donn√©.

   * ``data`` : Un tableau contenant le mod√®le √† afficher.
   * It√®re √† travers chacune des 8 lignes (chiffres) et √©crit les donn√©es correspondantes.

   .. code-block:: c

        void max7219_display(unsigned char *data) {
            for (int i = 1; i <= 8; i++) {
                max7219_write(i, data[i - 1]); // √âcrit chaque ligne du mod√®le sur l'affichage
            }
        }

#. Fonction ``display_pattern`` : Affiche un mod√®le pendant une dur√©e sp√©cifi√©e.

   * ``pattern`` : Le mod√®le √† afficher (tableau de 8 octets).
   * ``delay_ms`` : Dur√©e d'affichage du mod√®le en millisecondes.
   * Appelle ``max7219_display`` pour afficher le mod√®le.
   * Utilise ``delay`` pour attendre la dur√©e sp√©cifi√©e.

   .. code-block:: c

        void display_pattern(const unsigned char pattern[8], int delay_ms) {
            max7219_display((unsigned char *)pattern); // Affiche le mod√®le
            delay(delay_ms);                           // Attendre la dur√©e sp√©cifi√©e en millisecondes
        }

#. Mod√®les de tableaux :

   * Contient des mod√®les pr√©d√©finis pour le carr√©, le c≈ìur et les chiffres 0-9.
   * Chaque mod√®le est un tableau de 8 octets, repr√©sentant 8 lignes de la matrice LED 8x8.
   * Chaque octet utilise la notation binaire o√π chaque bit repr√©sente une LED (1 pour allum√©, 0 pour √©teint).
   
   .. code-block:: c

        const unsigned char patterns[][8] = {
            // Mod√®le de carr√©
            {
                0b11111111, // Ligne 1
                0b10000001, // Ligne 2
                0b10000001, // Ligne 3
                0b10000001, // Ligne 4
                0b10000001, // Ligne 5
                0b10000001, // Ligne 6
                0b10000001, // Ligne 7
                0b11111111  // Ligne 8
            },
            ...
            // Chiffre 9
            {
                ...
            },
        };    

#. Fonction principale :

   * Initialise l'interface ``WiringPi`` et ``SPI``.
   
     .. code-block:: c

        if (wiringPiSetup() == -1) {
            printf("√âchec de l'initialisation de WiringPi\n");
            return 1;
        }

        if (wiringPiSPISetup(SPI_CHANNEL, SPI_SPEED) == -1) {
            printf("√âchec de l'initialisation de SPI\n");
            return 1;
        }
   
   * Appelle ``max7219_init`` pour configurer le module MAX7219.
   
     .. code-block:: c

        max7219_init();  // Initialise le module MAX7219
      
   * Entre dans une boucle infinie pour afficher les mod√®les en continu. Affiche chaque mod√®le pendant 1 seconde avant de passer au suivant.

     .. code-block:: c

        while (1) {
            // Affiche le mod√®le de carr√©
            display_pattern(patterns[0], 1000);  // Affiche pendant 1000 millisecondes

            // Affiche le mod√®le de c≈ìur
            display_pattern(patterns[1], 1000);

            // Affiche les chiffres 0-9
            for (int i = 2; i <= 11; i++) {
                display_pattern(patterns[i], 1000);
            }
        }

**Comprendre les Mod√®les**

* Repr√©sentation Binaire :

  * Chaque mod√®le est d√©fini en utilisant des litt√©raux binaires (pr√©fixe 0b).
  * Chaque octet correspond √† une ligne de la matrice LED 8x8.
  * Chaque bit dans l‚Äôoctet repr√©sente une colonne (LED) dans cette ligne.
  * Le bit le plus significatif (√† gauche) correspond √† la premi√®re LED √† gauche.

* Cr√©ation de Mod√®les Personnalis√©s :

  * Vous pouvez cr√©er de nouveaux mod√®les en d√©finissant de nouveaux tableaux de 8 octets.
  * Chaque mod√®le peut √™tre ajout√© au tableau des mod√®les.
  * Mettez √† jour la boucle d'affichage dans la fonction principale pour inclure vos nouveaux mod√®les.


**Ajustements et Personnalisation**

* Changer la Luminosit√© : Modifiez le niveau d'intensit√© dans ``max7219_init`` :

   .. code-block:: c

        max7219_write(0x0A, brightness_level); // brightness_level entre 0x00 et 0x0F

* Modifier le Temps d'Affichage : Changez le param√®tre ``delay_ms`` dans les appels √† ``display_pattern`` pour ajuster la dur√©e d'affichage de chaque mod√®le.

Image du ph√©nom√®ne
-----------------------

.. image:: ../img/1.1.6led_dot_matrix.JPG
