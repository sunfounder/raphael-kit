.. nota::

    Ciao, benvenuto nella SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts Community su Facebook! Immergiti pi√π a fondo nel mondo di Raspberry Pi, Arduino e ESP32 insieme ad altri appassionati.

    **Perch√© unirsi a noi?**

    - **Supporto esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni accesso anticipato agli annunci di nuovi prodotti e alle anteprime.
    - **Sconti speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e omaggi**: Partecipa a omaggi e promozioni festive.

    üëâ Sei pronto per esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _3.1.13_c:

3.1.13 GIOCO‚Äì NotNot
===========================

Introduzione
-------------------

In questo progetto, creeremo un dispositivo di gioco divertente che chiamiamo "Not Not".

Durante il gioco, la matrice di punti visualizzer√† una freccia a caso. Quello che devi fare √® premere il pulsante nella direzione opposta alla freccia entro un tempo limitato. Se il tempo scade o se premi il pulsante nella stessa direzione della freccia, sei fuori.

Questo gioco mette davvero alla prova il tuo pensiero inverso, sei pronto a provarlo?

Componenti necessari
------------------------------

In questo progetto, avremo bisogno dei seguenti componenti.

.. image:: ../img/list_GAME_14_NotNot.png
    :align: center

√à sicuramente conveniente acquistare un intero kit, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - OGGETTI IN QUESTO KIT
        - LINK
    *   - Kit Raphael
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE COMPONENTI
        - LINK ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dot_matrix`
        - |link_led_matrix_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

Schema Elettrico
------------------------

============ ======== ======== ====
T-Board Name physical wiringPi BCM
GPIO22       Pin 15   3        22
GPIO23       Pin 16   4        23
SPIMOSI      Pin 19   12       MOSI
SPICE0       pin 24   10       CE0
SPISCLK      Pin 23   14       SCLK
============ ======== ======== ====

.. image:: ../img/Schematic_notnot.png
   :align: center

Procedure Sperimentali
---------------------------------

**Step 1**: Costruisci il circuito.

.. image:: ../img/3.1.14game_notnot.png

.. note::

    Abilita l'SPI prima di iniziare l'esperimento, fai riferimento a :ref:`spi_configuration` per i dettagli.
    Inoltre √® necessaria la libreria :ref:`BCM2835`.

**Step 2**: Vai alla cartella del codice.

.. raw:: html

   <run></run>

.. code-block:: 

    cd ~/raphael-kit/c/3.1.13/

**Step 3**: Compila il codice.

.. raw:: html

   <run></run>

.. code-block:: 

    make

**Step 4**: Esegui il file eseguibile.

.. raw:: html

   <run></run>

.. code-block:: 

    sudo ./3.1.13_GAME_NotNot

Dopo l'avvio del programma, una freccia a sinistra o a destra verr√† mostrata 
casualmente sulla matrice di punti. Dovrai premere il pulsante nella direzione 
opposta alla freccia, e allora apparir√† ‚Äú‚àö‚Äù sulla matrice. Se premi il pulsante 
nella stessa direzione della freccia, sei fuori e sulla matrice comparir√† ‚Äúx‚Äù. 
Puoi anche aggiungere 2 nuovi pulsanti o sostituirli con i tasti del Joystick 
per le direzioni su, gi√π, sinistra e destra per aumentare la difficolt√† del gioco.

.. note::

    Se dopo l'esecuzione non funziona o compare un messaggio di errore: \"wiringPi.h: No such file or directory\", fai riferimento a :ref:`install_wiringpi`.

Spiegazione del Codice
----------------------

Basato su :ref:`1.1.6_c`, questo progetto aggiunge 2 pulsanti per creare un dispositivo di gioco divertente.

Il processo completo del programma √® il seguente:

#. Utilizza l'ora di sistema per generare un 0 o 1 casuale.
#. Visualizza un modello di freccia casuale a sinistra o a destra.
#. Premi il tasto e determina il risultato.
#. Visualizza il modello giusto o sbagliato.

.. image:: ../img/3.1.14_notnot1.png

.. code-block:: c

    int get_index()
    {
        srand((unsigned)time(NULL));
        return rand()%2;
    }

Il seme del sistema viene modificato dal tempo di sistema, ovvero ``srand((unsigned)time(NULL))``, in modo che ogni volta che viene chiamata la funzione rand, il valore ottenuto sia completamente casuale. Infine, il risultato ottenuto viene diviso per 2, cos√¨ i valori ottenuti sono 0 e 1.

.. code-block:: c

    int get_key(uint num)
    {
        while (1)
        {
            if (1 == bcm2835_gpio_lev(AButtonPin) && num == 0){
                return 1;
            }
            else if (1 == bcm2835_gpio_lev(BButtonPin) && num == 1){
                return 1;
            }
            else if (1 == bcm2835_gpio_lev(AButtonPin) && num == 1){
                return 0;
            }
            else if (1 == bcm2835_gpio_lev(BButtonPin) && num == 0){
                return 0;
            }
        }
    }

Determina quale pulsante √® stato premuto, lo confronta con la direzione della freccia sulla matrice di punti e restituisce il risultato finale di 0 o 1.

.. image:: ../img/3.1.14_getkey.png

.. code-block:: c

    void display(uint index){
        uchar i;
        if (stage == 0){
            for(i=1;i<9;i++)
            {
                Write_Max7219(i,arrow[index][i-1]);
            }
        }
        else if(stage == 1){
            for(i=1;i<9;i++)
            {
                Write_Max7219(i,check[index][i-1]);
            }
        }
    }

In base al valore di ``stage`` e ``index``, viene visualizzata la freccia ``sinistra o destra`` oppure il modello ``giusto o sbagliato``.

.. image:: ../img/3.1.14_display.png
