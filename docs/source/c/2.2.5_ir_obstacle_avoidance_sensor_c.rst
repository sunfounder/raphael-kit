.. note::

    Ciao, benvenuto nella community di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino ed ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra comunit√† e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Ottieni accesso anticipato ai nuovi annunci di prodotti e anteprime.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a concorsi e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti subito!

.. _2.2.5_c:

2.2.5 Modulo di Evitamento Ostacoli IR
==========================================

Introduzione
-----------------

In questo progetto, impareremo a conoscere il modulo di evitamento ostacoli IR, un sensore che pu√≤ essere utilizzato per rilevare ostacoli a breve distanza, con piccole interferenze, facile da assemblare e da usare. Pu√≤ essere ampiamente utilizzato nell'evitamento di ostacoli nei robot, nei carrelli con evitamento ostacoli, nel conteggio su linee di montaggio e altro ancora.

Componenti Necessari
------------------------------

In questo progetto, abbiamo bisogno dei seguenti componenti. 

.. image:: ../img/2.2.5component.png
   :width: 700
   :align: center

√à sicuramente conveniente acquistare un kit completo, ecco il link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - COMPONENTI IN QUESTO KIT
        - LINK
    *   - Raphael Kit
        - 337
        - |link_Raphael_kit|

Puoi anche acquistarli separatamente dai link seguenti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_gpio_extension_board`
        - |link_gpio_board_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_avoid_module`
        - |link_obstacle_avoidance_buy|

Schema Elettrico
-----------------------

.. image:: ../img/IR_schematic.png
   :width: 500
   :align: center

Procedure Sperimentali
-----------------------------

**Passo 1:** Costruisci il circuito.

.. image:: ../img/2.2.5fritzing.png
   :width: 700
   :align: center

**Passo 2:** Cambia directory.

.. raw:: html

   <run></run>

.. code-block::
   
   cd ~/raphael-kit/c/2.2.5/

**Passo 3:** Compila.

.. raw:: html

   <run></run>

.. code-block::

   gcc 2.2.5_IrObstacle.c -lwiringPi

**Passo 4:** Esegui.

.. raw:: html

   <run></run>

.. code-block::

   sudo ./a.out

Dopo l'esecuzione del codice, quando metti la mano davanti alla sonda del modulo, l'indicatore di uscita sul modulo si accende e "Detected Barrier!" verr√† ripetutamente stampato sullo schermo.

.. note::

   Se non funziona dopo l'esecuzione o appare un errore come: \"wiringPi.h: No such file or directory\", fai riferimento a :ref:`install_wiringpi`.

**Codice**

.. code-block:: c

   #include <wiringPi.h>
   #include <stdio.h>

   #define ObstaclePin      0

   void myISR(void)
   {
      printf("Detected Barrier !\n");
   }

   int main(void)
   {
      if(wiringPiSetup() == -1){ //quando l'inizializzazione wiring fallisce, stampa messaggio a schermo
         printf("setup wiringPi failed !\n");
         return 1; 
      }
      
      if(wiringPiISR(ObstaclePin, INT_EDGE_FALLING, &myISR) < 0){
         printf("Unable to setup ISR !!!\n");
         return 1;
      }
      
      while(1){
         ;
      }

      return 0;
   }

**Spiegazione del Codice**

.. code-block:: c

   void myISR(void)
   {
      printf("Detected Barrier !\n");
   }

Definisci una funzione ``myISR()`` per stampare ``ostacolo rilevato`` , indicando che √® stato rilevato un ostacolo.

.. code-block:: c

   if(wiringPiISR(ObstaclePin, INT_EDGE_FALLING, &myISR) < 0){
      printf("Unable to setup ISR !!!\n");
      return 1;
   }

Questa funzione ``wiringPiISR()`` registra una funzione ``myISR()`` per ricevere interruzioni sul pin specificato ``ObstaclePin``.

Quando il pin ObstaclePin passa da alto a basso, significa che √® stato rilevato un ostacolo. In questo momento, viene chiamata la funzione ``myISR()`` per stampare "Detected Barrier !".

Il prototipo di questa funzione ``wiringPiISR()`` √® mostrato di seguito.

.. code-block:: c

   int wiringPiISR (int pin, int edgeType,  void (*function)(void)) ;

Il parametro edgeType pu√≤ essere ``INT_EDGE_FALLING`` , ``INT_EDGE_RISING`` , ``INT_EDGE_BOTH`` o ``INT_EDGE_SETUP``. Se √® ``INT_EDGE_SETUP`` non verr√† eseguita alcuna inizializzazione del pin ‚Äì si presume che il pin sia gi√† stato configurato altrove (ad esempio con il programma gpio), ma se si specifica uno degli altri tipi, il pin verr√† esportato e inizializzato come specificato.

Per maggiori informazioni, fai riferimento a: `wiringPi-Functions (API) <https://projects.drogon.net/raspberry-pi/wiringpi/functions/>`_.


Immagine del Fenomeno
-----------------------

.. image:: ../img/2.2.5IR.JPG
   :width: 500
   :align: center
